// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

generator typegraphql {
  provider = "typegraphql-prisma"
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URI")
}

model User {
  id                Int                @id @default(autoincrement())
  email             String             @unique
  name              String             
  picture           String             @default("https://www.gravatar.com/avatar/00000000000000000000000000000000?d=mp&f=y")
  jwtToken          String?            @db.MediumText
  expoToken         String?            @db.MediumText
  isOnBoarded       Boolean
  userTags          UserTag[]
  clubCoordinator   ClubCoordinator[]
  clubMember        ClubMember[]
  subscription      Subscription[]
  rsvpEvent         RSVPEvent[]
  votes             Vote[]
  positions         Position[]
  userNotifications UserNotification[]
  studentRank       StudentRank?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  deletedAt         DateTime?
}

model Club {
  id              Int               @id @default(autoincrement())
  name            String
  description     String            @db.MediumText
  links           String            @db.MediumText
  image           String            @default("https://www.gravatar.com/avatar/")
  clubtags        ClubTag[]
  clubCoordinator ClubCoordinator[]
  clubMember      ClubMember[]
  subscription    Subscription[]
  clubEvents      ClubEvent[]
  notifications   Notification[]
  clubRank        ClubRank?
  otp             OTP?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deletedAt       DateTime?
}

model Event {
  id             Int         @id @default(autoincrement())
  name           String
  description    String      @db.MediumText
  image          String      @default("https://www.gravatar.com/avatar/")
  link           String?     @db.MediumText
  deadline       DateTime?
  eventStartDate DateTime?
  eventEndDate   DateTime?
  venue          String?
  votes          Vote[]
  rsvpEvent      RSVPEvent[]
  postions       Position[]
  clubEvents     ClubEvent[]
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  deletedAt      DateTime?
}

model Tag {
  id        Int       @id @default(autoincrement())
  name      String
  clubTags  ClubTag[]
  userTags  UserTag[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Position {
  id        Int       @id @default(autoincrement())
  event     Event     @relation(fields: [eventId], references: [id])
  eventId   Int
  position  String // Valiate first, second, third, other;
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  money     Int?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model StudentRank {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int       @unique
  rank        Int
  eventCount  Int
  moneyEarned Int
  firstCount  Int
  secondCount Int
  thirdCount  Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

model ClubRank {
  id           Int       @id @default(autoincrement())
  club         Club      @relation(fields: [clubId], references: [id])
  clubId       Int       @unique
  rank         Int
  eventCount   Int
  moneyAwarded Int
  rsvpCount    Int
  upVoteCount  Int
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
}

model OTP {
  id        Int       @id @default(autoincrement())
  club      Club      @relation(fields: [clubId], references: [id])
  clubId    Int       @unique
  otp       String
  expiredAt DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Notification {
  id                Int                @id @default(autoincrement())
  userNotifications UserNotification[]
  createdBy         Club               @relation(fields: [clubId], references: [id])
  clubId            Int                @unique
  message           String             @db.MediumText
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  deletedAt         DateTime?
}

// Defining Relation Mappings

model ClubEvent {
  id        Int       @id @default(autoincrement())
  club      Club      @relation(fields: [clubId], references: [id])
  clubId    Int
  event     Event     @relation(fields: [eventId], references: [id])
  eventId   Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([clubId, eventId])
}

model ClubTag {
  id        Int       @id @default(autoincrement())
  club      Club      @relation(fields: [clubId], references: [id])
  clubId    Int
  tag       Tag       @relation(fields: [tagId], references: [id])
  tagId     Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([clubId, tagId])
}

model UserTag {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  tag       Tag      @relation(fields: [tagId], references: [id])
  tagId     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, tagId])
}

model UserNotification {
  id             Int          @id @default(autoincrement())
  notification   Notification @relation(fields: [notificationId], references: [id])
  notificationId Int
  user           User         @relation(fields: [userId], references: [id])
  userId         Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?

  @@unique([notificationId, userId])
}

model ClubCoordinator {
  id        Int       @id @default(autoincrement())
  club      Club      @relation(fields: [clubId], references: [id])
  clubId    Int
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([clubId, userId])
}

model ClubMember {
  id        Int       @id @default(autoincrement())
  club      Club      @relation(fields: [clubId], references: [id])
  clubId    Int
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  level     Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([clubId, userId])
}

model Subscription {
  id        Int       @id @default(autoincrement())
  club      Club      @relation(fields: [clubId], references: [id])
  clubId    Int
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([clubId, userId])
}

model RSVPEvent {
  id        Int       @id @default(autoincrement())
  eventId   Int
  event     Event     @relation(fields: [eventId], references: [id])
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([eventId, userId])
}

model Vote {
  id        Int       @id @default(autoincrement())
  vote      Boolean // True - upvote, False - downvote
  eventId   Int
  event     Event     @relation(fields: [eventId], references: [id])
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([eventId, userId])
}

// enum VoteStatus {
//   UPVOTE
//   DOWNVOTE
// }
