# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AffectedRowsOutput {
  count: Int!
}

type AggregateClub {
  _count: ClubCountAggregate
  _max: ClubMaxAggregate
  _min: ClubMinAggregate
}

type AggregateClubCoordinator {
  _count: ClubCoordinatorCountAggregate
  _max: ClubCoordinatorMaxAggregate
  _min: ClubCoordinatorMinAggregate
}

type AggregateClubMember {
  _avg: ClubMemberAvgAggregate
  _count: ClubMemberCountAggregate
  _max: ClubMemberMaxAggregate
  _min: ClubMemberMinAggregate
  _sum: ClubMemberSumAggregate
}

type AggregateClubRank {
  _avg: ClubRankAvgAggregate
  _count: ClubRankCountAggregate
  _max: ClubRankMaxAggregate
  _min: ClubRankMinAggregate
  _sum: ClubRankSumAggregate
}

type AggregateEvent {
  _count: EventCountAggregate
  _max: EventMaxAggregate
  _min: EventMinAggregate
}

type AggregateOTP {
  _count: OTPCountAggregate
  _max: OTPMaxAggregate
  _min: OTPMinAggregate
}

type AggregatePosition {
  _avg: PositionAvgAggregate
  _count: PositionCountAggregate
  _max: PositionMaxAggregate
  _min: PositionMinAggregate
  _sum: PositionSumAggregate
}

type AggregateRSVPEvent {
  _count: RSVPEventCountAggregate
  _max: RSVPEventMaxAggregate
  _min: RSVPEventMinAggregate
}

type AggregateStudentRank {
  _avg: StudentRankAvgAggregate
  _count: StudentRankCountAggregate
  _max: StudentRankMaxAggregate
  _min: StudentRankMinAggregate
  _sum: StudentRankSumAggregate
}

type AggregateSubscription {
  _count: SubscriptionCountAggregate
  _max: SubscriptionMaxAggregate
  _min: SubscriptionMinAggregate
}

type AggregateTag {
  _count: TagCountAggregate
  _max: TagMaxAggregate
  _min: TagMinAggregate
}

type AggregateUser {
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
}

type AggregateVote {
  _count: VoteCountAggregate
  _max: VoteMaxAggregate
  _min: VoteMinAggregate
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

type Club {
  _count: ClubCount
  clubCoordinator(cursor: ClubCoordinatorWhereUniqueInput, distinct: [ClubCoordinatorScalarFieldEnum!], orderBy: [ClubCoordinatorOrderByWithRelationInput!], skip: Int, take: Int, where: ClubCoordinatorWhereInput): [ClubCoordinator!]!
  clubMember(cursor: ClubMemberWhereUniqueInput, distinct: [ClubMemberScalarFieldEnum!], orderBy: [ClubMemberOrderByWithRelationInput!], skip: Int, take: Int, where: ClubMemberWhereInput): [ClubMember!]!
  clubRank: ClubRank
  createdAt: DateTime!
  deletedAt: DateTime
  description: String!
  events(cursor: EventWhereUniqueInput, distinct: [EventScalarFieldEnum!], orderBy: [EventOrderByWithRelationInput!], skip: Int, take: Int, where: EventWhereInput): [Event!]!
  id: String!
  links: String!
  name: String!
  otp: OTP
  subscription(cursor: SubscriptionWhereUniqueInput, distinct: [SubscriptionScalarFieldEnum!], orderBy: [SubscriptionOrderByWithRelationInput!], skip: Int, take: Int, where: SubscriptionWhereInput): [Subscription!]!
  tags(cursor: TagWhereUniqueInput, distinct: [TagScalarFieldEnum!], orderBy: [TagOrderByWithRelationInput!], skip: Int, take: Int, where: TagWhereInput): [Tag!]!
  updatedAt: DateTime!
}

type ClubCoordinator {
  club: Club!
  clubId: String!
  createdAt: DateTime!
  deletedAt: DateTime
  user: User!
  userEmail: String!
}

input ClubCoordinatorClubIdUserEmailCompoundUniqueInput {
  clubId: String!
  userEmail: String!
}

type ClubCoordinatorCountAggregate {
  _all: Int!
  clubId: Int!
  createdAt: Int!
  deletedAt: Int!
  userEmail: Int!
}

input ClubCoordinatorCountOrderByAggregateInput {
  clubId: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  userEmail: SortOrder
}

input ClubCoordinatorCreateInput {
  club: ClubCreateNestedOneWithoutClubCoordinatorInput!
  createdAt: DateTime
  deletedAt: DateTime
  user: UserCreateNestedOneWithoutClubCoordinatorInput!
}

input ClubCoordinatorCreateNestedManyWithoutClubInput {
  connect: [ClubCoordinatorWhereUniqueInput!]
  connectOrCreate: [ClubCoordinatorCreateOrConnectWithoutClubInput!]
  create: [ClubCoordinatorCreateWithoutClubInput!]
}

input ClubCoordinatorCreateNestedManyWithoutUserInput {
  connect: [ClubCoordinatorWhereUniqueInput!]
  connectOrCreate: [ClubCoordinatorCreateOrConnectWithoutUserInput!]
  create: [ClubCoordinatorCreateWithoutUserInput!]
}

input ClubCoordinatorCreateOrConnectWithoutClubInput {
  create: ClubCoordinatorCreateWithoutClubInput!
  where: ClubCoordinatorWhereUniqueInput!
}

input ClubCoordinatorCreateOrConnectWithoutUserInput {
  create: ClubCoordinatorCreateWithoutUserInput!
  where: ClubCoordinatorWhereUniqueInput!
}

input ClubCoordinatorCreateWithoutClubInput {
  createdAt: DateTime
  deletedAt: DateTime
  user: UserCreateNestedOneWithoutClubCoordinatorInput!
}

input ClubCoordinatorCreateWithoutUserInput {
  club: ClubCreateNestedOneWithoutClubCoordinatorInput!
  createdAt: DateTime
  deletedAt: DateTime
}

type ClubCoordinatorGroupBy {
  _count: ClubCoordinatorCountAggregate
  _max: ClubCoordinatorMaxAggregate
  _min: ClubCoordinatorMinAggregate
  clubId: String!
  createdAt: DateTime!
  deletedAt: DateTime
  userEmail: String!
}

input ClubCoordinatorListRelationFilter {
  every: ClubCoordinatorWhereInput
  none: ClubCoordinatorWhereInput
  some: ClubCoordinatorWhereInput
}

type ClubCoordinatorMaxAggregate {
  clubId: String
  createdAt: DateTime
  deletedAt: DateTime
  userEmail: String
}

input ClubCoordinatorMaxOrderByAggregateInput {
  clubId: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  userEmail: SortOrder
}

type ClubCoordinatorMinAggregate {
  clubId: String
  createdAt: DateTime
  deletedAt: DateTime
  userEmail: String
}

input ClubCoordinatorMinOrderByAggregateInput {
  clubId: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  userEmail: SortOrder
}

input ClubCoordinatorOrderByRelationAggregateInput {
  _count: SortOrder
}

input ClubCoordinatorOrderByWithAggregationInput {
  _count: ClubCoordinatorCountOrderByAggregateInput
  _max: ClubCoordinatorMaxOrderByAggregateInput
  _min: ClubCoordinatorMinOrderByAggregateInput
  clubId: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  userEmail: SortOrder
}

input ClubCoordinatorOrderByWithRelationInput {
  club: ClubOrderByWithRelationInput
  clubId: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  user: UserOrderByWithRelationInput
  userEmail: SortOrder
}

enum ClubCoordinatorScalarFieldEnum {
  clubId
  createdAt
  deletedAt
  userEmail
}

input ClubCoordinatorScalarWhereInput {
  AND: [ClubCoordinatorScalarWhereInput!]
  NOT: [ClubCoordinatorScalarWhereInput!]
  OR: [ClubCoordinatorScalarWhereInput!]
  clubId: StringFilter
  createdAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  userEmail: StringFilter
}

input ClubCoordinatorScalarWhereWithAggregatesInput {
  AND: [ClubCoordinatorScalarWhereWithAggregatesInput!]
  NOT: [ClubCoordinatorScalarWhereWithAggregatesInput!]
  OR: [ClubCoordinatorScalarWhereWithAggregatesInput!]
  clubId: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  deletedAt: DateTimeNullableWithAggregatesFilter
  userEmail: StringWithAggregatesFilter
}

input ClubCoordinatorUpdateInput {
  club: ClubUpdateOneRequiredWithoutClubCoordinatorInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutClubCoordinatorInput
}

input ClubCoordinatorUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
}

input ClubCoordinatorUpdateManyWithWhereWithoutClubInput {
  data: ClubCoordinatorUpdateManyMutationInput!
  where: ClubCoordinatorScalarWhereInput!
}

input ClubCoordinatorUpdateManyWithWhereWithoutUserInput {
  data: ClubCoordinatorUpdateManyMutationInput!
  where: ClubCoordinatorScalarWhereInput!
}

input ClubCoordinatorUpdateManyWithoutClubInput {
  connect: [ClubCoordinatorWhereUniqueInput!]
  connectOrCreate: [ClubCoordinatorCreateOrConnectWithoutClubInput!]
  create: [ClubCoordinatorCreateWithoutClubInput!]
  delete: [ClubCoordinatorWhereUniqueInput!]
  deleteMany: [ClubCoordinatorScalarWhereInput!]
  disconnect: [ClubCoordinatorWhereUniqueInput!]
  set: [ClubCoordinatorWhereUniqueInput!]
  update: [ClubCoordinatorUpdateWithWhereUniqueWithoutClubInput!]
  updateMany: [ClubCoordinatorUpdateManyWithWhereWithoutClubInput!]
  upsert: [ClubCoordinatorUpsertWithWhereUniqueWithoutClubInput!]
}

input ClubCoordinatorUpdateManyWithoutUserInput {
  connect: [ClubCoordinatorWhereUniqueInput!]
  connectOrCreate: [ClubCoordinatorCreateOrConnectWithoutUserInput!]
  create: [ClubCoordinatorCreateWithoutUserInput!]
  delete: [ClubCoordinatorWhereUniqueInput!]
  deleteMany: [ClubCoordinatorScalarWhereInput!]
  disconnect: [ClubCoordinatorWhereUniqueInput!]
  set: [ClubCoordinatorWhereUniqueInput!]
  update: [ClubCoordinatorUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ClubCoordinatorUpdateManyWithWhereWithoutUserInput!]
  upsert: [ClubCoordinatorUpsertWithWhereUniqueWithoutUserInput!]
}

input ClubCoordinatorUpdateWithWhereUniqueWithoutClubInput {
  data: ClubCoordinatorUpdateWithoutClubInput!
  where: ClubCoordinatorWhereUniqueInput!
}

input ClubCoordinatorUpdateWithWhereUniqueWithoutUserInput {
  data: ClubCoordinatorUpdateWithoutUserInput!
  where: ClubCoordinatorWhereUniqueInput!
}

input ClubCoordinatorUpdateWithoutClubInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutClubCoordinatorInput
}

input ClubCoordinatorUpdateWithoutUserInput {
  club: ClubUpdateOneRequiredWithoutClubCoordinatorInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
}

input ClubCoordinatorUpsertWithWhereUniqueWithoutClubInput {
  create: ClubCoordinatorCreateWithoutClubInput!
  update: ClubCoordinatorUpdateWithoutClubInput!
  where: ClubCoordinatorWhereUniqueInput!
}

input ClubCoordinatorUpsertWithWhereUniqueWithoutUserInput {
  create: ClubCoordinatorCreateWithoutUserInput!
  update: ClubCoordinatorUpdateWithoutUserInput!
  where: ClubCoordinatorWhereUniqueInput!
}

input ClubCoordinatorWhereInput {
  AND: [ClubCoordinatorWhereInput!]
  NOT: [ClubCoordinatorWhereInput!]
  OR: [ClubCoordinatorWhereInput!]
  club: ClubRelationFilter
  clubId: StringFilter
  createdAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  user: UserRelationFilter
  userEmail: StringFilter
}

input ClubCoordinatorWhereUniqueInput {
  clubId_userEmail: ClubCoordinatorClubIdUserEmailCompoundUniqueInput
}

type ClubCount {
  clubCoordinator: Int!
  clubMember: Int!
  events: Int!
  subscription: Int!
  tags: Int!
}

type ClubCountAggregate {
  _all: Int!
  createdAt: Int!
  deletedAt: Int!
  description: Int!
  id: Int!
  links: Int!
  name: Int!
  updatedAt: Int!
}

input ClubCountOrderByAggregateInput {
  createdAt: SortOrder
  deletedAt: SortOrder
  description: SortOrder
  id: SortOrder
  links: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input ClubCreateInput {
  clubCoordinator: ClubCoordinatorCreateNestedManyWithoutClubInput
  clubMember: ClubMemberCreateNestedManyWithoutClubInput
  clubRank: ClubRankCreateNestedOneWithoutClubInput
  createdAt: DateTime
  deletedAt: DateTime
  description: String!
  events: EventCreateNestedManyWithoutClubsInput
  id: String
  links: String!
  name: String!
  otp: OTPCreateNestedOneWithoutClubInput
  subscription: SubscriptionCreateNestedManyWithoutClubInput
  tags: TagCreateNestedManyWithoutClubsInput
  updatedAt: DateTime
}

input ClubCreateNestedManyWithoutEventsInput {
  connect: [ClubWhereUniqueInput!]
  connectOrCreate: [ClubCreateOrConnectWithoutEventsInput!]
  create: [ClubCreateWithoutEventsInput!]
}

input ClubCreateNestedManyWithoutTagsInput {
  connect: [ClubWhereUniqueInput!]
  connectOrCreate: [ClubCreateOrConnectWithoutTagsInput!]
  create: [ClubCreateWithoutTagsInput!]
}

input ClubCreateNestedOneWithoutClubCoordinatorInput {
  connect: ClubWhereUniqueInput
  connectOrCreate: ClubCreateOrConnectWithoutClubCoordinatorInput
  create: ClubCreateWithoutClubCoordinatorInput
}

input ClubCreateNestedOneWithoutClubMemberInput {
  connect: ClubWhereUniqueInput
  connectOrCreate: ClubCreateOrConnectWithoutClubMemberInput
  create: ClubCreateWithoutClubMemberInput
}

input ClubCreateNestedOneWithoutClubRankInput {
  connect: ClubWhereUniqueInput
  connectOrCreate: ClubCreateOrConnectWithoutClubRankInput
  create: ClubCreateWithoutClubRankInput
}

input ClubCreateNestedOneWithoutOtpInput {
  connect: ClubWhereUniqueInput
  connectOrCreate: ClubCreateOrConnectWithoutOtpInput
  create: ClubCreateWithoutOtpInput
}

input ClubCreateNestedOneWithoutSubscriptionInput {
  connect: ClubWhereUniqueInput
  connectOrCreate: ClubCreateOrConnectWithoutSubscriptionInput
  create: ClubCreateWithoutSubscriptionInput
}

input ClubCreateOrConnectWithoutClubCoordinatorInput {
  create: ClubCreateWithoutClubCoordinatorInput!
  where: ClubWhereUniqueInput!
}

input ClubCreateOrConnectWithoutClubMemberInput {
  create: ClubCreateWithoutClubMemberInput!
  where: ClubWhereUniqueInput!
}

input ClubCreateOrConnectWithoutClubRankInput {
  create: ClubCreateWithoutClubRankInput!
  where: ClubWhereUniqueInput!
}

input ClubCreateOrConnectWithoutEventsInput {
  create: ClubCreateWithoutEventsInput!
  where: ClubWhereUniqueInput!
}

input ClubCreateOrConnectWithoutOtpInput {
  create: ClubCreateWithoutOtpInput!
  where: ClubWhereUniqueInput!
}

input ClubCreateOrConnectWithoutSubscriptionInput {
  create: ClubCreateWithoutSubscriptionInput!
  where: ClubWhereUniqueInput!
}

input ClubCreateOrConnectWithoutTagsInput {
  create: ClubCreateWithoutTagsInput!
  where: ClubWhereUniqueInput!
}

input ClubCreateWithoutClubCoordinatorInput {
  clubMember: ClubMemberCreateNestedManyWithoutClubInput
  clubRank: ClubRankCreateNestedOneWithoutClubInput
  createdAt: DateTime
  deletedAt: DateTime
  description: String!
  events: EventCreateNestedManyWithoutClubsInput
  id: String
  links: String!
  name: String!
  otp: OTPCreateNestedOneWithoutClubInput
  subscription: SubscriptionCreateNestedManyWithoutClubInput
  tags: TagCreateNestedManyWithoutClubsInput
  updatedAt: DateTime
}

input ClubCreateWithoutClubMemberInput {
  clubCoordinator: ClubCoordinatorCreateNestedManyWithoutClubInput
  clubRank: ClubRankCreateNestedOneWithoutClubInput
  createdAt: DateTime
  deletedAt: DateTime
  description: String!
  events: EventCreateNestedManyWithoutClubsInput
  id: String
  links: String!
  name: String!
  otp: OTPCreateNestedOneWithoutClubInput
  subscription: SubscriptionCreateNestedManyWithoutClubInput
  tags: TagCreateNestedManyWithoutClubsInput
  updatedAt: DateTime
}

input ClubCreateWithoutClubRankInput {
  clubCoordinator: ClubCoordinatorCreateNestedManyWithoutClubInput
  clubMember: ClubMemberCreateNestedManyWithoutClubInput
  createdAt: DateTime
  deletedAt: DateTime
  description: String!
  events: EventCreateNestedManyWithoutClubsInput
  id: String
  links: String!
  name: String!
  otp: OTPCreateNestedOneWithoutClubInput
  subscription: SubscriptionCreateNestedManyWithoutClubInput
  tags: TagCreateNestedManyWithoutClubsInput
  updatedAt: DateTime
}

input ClubCreateWithoutEventsInput {
  clubCoordinator: ClubCoordinatorCreateNestedManyWithoutClubInput
  clubMember: ClubMemberCreateNestedManyWithoutClubInput
  clubRank: ClubRankCreateNestedOneWithoutClubInput
  createdAt: DateTime
  deletedAt: DateTime
  description: String!
  id: String
  links: String!
  name: String!
  otp: OTPCreateNestedOneWithoutClubInput
  subscription: SubscriptionCreateNestedManyWithoutClubInput
  tags: TagCreateNestedManyWithoutClubsInput
  updatedAt: DateTime
}

input ClubCreateWithoutOtpInput {
  clubCoordinator: ClubCoordinatorCreateNestedManyWithoutClubInput
  clubMember: ClubMemberCreateNestedManyWithoutClubInput
  clubRank: ClubRankCreateNestedOneWithoutClubInput
  createdAt: DateTime
  deletedAt: DateTime
  description: String!
  events: EventCreateNestedManyWithoutClubsInput
  id: String
  links: String!
  name: String!
  subscription: SubscriptionCreateNestedManyWithoutClubInput
  tags: TagCreateNestedManyWithoutClubsInput
  updatedAt: DateTime
}

input ClubCreateWithoutSubscriptionInput {
  clubCoordinator: ClubCoordinatorCreateNestedManyWithoutClubInput
  clubMember: ClubMemberCreateNestedManyWithoutClubInput
  clubRank: ClubRankCreateNestedOneWithoutClubInput
  createdAt: DateTime
  deletedAt: DateTime
  description: String!
  events: EventCreateNestedManyWithoutClubsInput
  id: String
  links: String!
  name: String!
  otp: OTPCreateNestedOneWithoutClubInput
  tags: TagCreateNestedManyWithoutClubsInput
  updatedAt: DateTime
}

input ClubCreateWithoutTagsInput {
  clubCoordinator: ClubCoordinatorCreateNestedManyWithoutClubInput
  clubMember: ClubMemberCreateNestedManyWithoutClubInput
  clubRank: ClubRankCreateNestedOneWithoutClubInput
  createdAt: DateTime
  deletedAt: DateTime
  description: String!
  events: EventCreateNestedManyWithoutClubsInput
  id: String
  links: String!
  name: String!
  otp: OTPCreateNestedOneWithoutClubInput
  subscription: SubscriptionCreateNestedManyWithoutClubInput
  updatedAt: DateTime
}

type ClubGroupBy {
  _count: ClubCountAggregate
  _max: ClubMaxAggregate
  _min: ClubMinAggregate
  createdAt: DateTime!
  deletedAt: DateTime
  description: String!
  id: String!
  links: String!
  name: String!
  updatedAt: DateTime!
}

input ClubListRelationFilter {
  every: ClubWhereInput
  none: ClubWhereInput
  some: ClubWhereInput
}

type ClubMaxAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  id: String
  links: String
  name: String
  updatedAt: DateTime
}

input ClubMaxOrderByAggregateInput {
  createdAt: SortOrder
  deletedAt: SortOrder
  description: SortOrder
  id: SortOrder
  links: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

type ClubMember {
  club: Club!
  clubId: String!
  createdAt: DateTime!
  deletedAt: DateTime
  level: Int!
  user: User!
  userEmail: String!
}

type ClubMemberAvgAggregate {
  level: Float
}

input ClubMemberAvgOrderByAggregateInput {
  level: SortOrder
}

input ClubMemberClubIdUserEmailCompoundUniqueInput {
  clubId: String!
  userEmail: String!
}

type ClubMemberCountAggregate {
  _all: Int!
  clubId: Int!
  createdAt: Int!
  deletedAt: Int!
  level: Int!
  userEmail: Int!
}

input ClubMemberCountOrderByAggregateInput {
  clubId: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  level: SortOrder
  userEmail: SortOrder
}

input ClubMemberCreateInput {
  club: ClubCreateNestedOneWithoutClubMemberInput!
  createdAt: DateTime
  deletedAt: DateTime
  level: Int
  user: UserCreateNestedOneWithoutClubMemberInput!
}

input ClubMemberCreateNestedManyWithoutClubInput {
  connect: [ClubMemberWhereUniqueInput!]
  connectOrCreate: [ClubMemberCreateOrConnectWithoutClubInput!]
  create: [ClubMemberCreateWithoutClubInput!]
}

input ClubMemberCreateNestedManyWithoutUserInput {
  connect: [ClubMemberWhereUniqueInput!]
  connectOrCreate: [ClubMemberCreateOrConnectWithoutUserInput!]
  create: [ClubMemberCreateWithoutUserInput!]
}

input ClubMemberCreateOrConnectWithoutClubInput {
  create: ClubMemberCreateWithoutClubInput!
  where: ClubMemberWhereUniqueInput!
}

input ClubMemberCreateOrConnectWithoutUserInput {
  create: ClubMemberCreateWithoutUserInput!
  where: ClubMemberWhereUniqueInput!
}

input ClubMemberCreateWithoutClubInput {
  createdAt: DateTime
  deletedAt: DateTime
  level: Int
  user: UserCreateNestedOneWithoutClubMemberInput!
}

input ClubMemberCreateWithoutUserInput {
  club: ClubCreateNestedOneWithoutClubMemberInput!
  createdAt: DateTime
  deletedAt: DateTime
  level: Int
}

type ClubMemberGroupBy {
  _avg: ClubMemberAvgAggregate
  _count: ClubMemberCountAggregate
  _max: ClubMemberMaxAggregate
  _min: ClubMemberMinAggregate
  _sum: ClubMemberSumAggregate
  clubId: String!
  createdAt: DateTime!
  deletedAt: DateTime
  level: Int!
  userEmail: String!
}

input ClubMemberListRelationFilter {
  every: ClubMemberWhereInput
  none: ClubMemberWhereInput
  some: ClubMemberWhereInput
}

type ClubMemberMaxAggregate {
  clubId: String
  createdAt: DateTime
  deletedAt: DateTime
  level: Int
  userEmail: String
}

input ClubMemberMaxOrderByAggregateInput {
  clubId: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  level: SortOrder
  userEmail: SortOrder
}

type ClubMemberMinAggregate {
  clubId: String
  createdAt: DateTime
  deletedAt: DateTime
  level: Int
  userEmail: String
}

input ClubMemberMinOrderByAggregateInput {
  clubId: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  level: SortOrder
  userEmail: SortOrder
}

input ClubMemberOrderByRelationAggregateInput {
  _count: SortOrder
}

input ClubMemberOrderByWithAggregationInput {
  _avg: ClubMemberAvgOrderByAggregateInput
  _count: ClubMemberCountOrderByAggregateInput
  _max: ClubMemberMaxOrderByAggregateInput
  _min: ClubMemberMinOrderByAggregateInput
  _sum: ClubMemberSumOrderByAggregateInput
  clubId: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  level: SortOrder
  userEmail: SortOrder
}

input ClubMemberOrderByWithRelationInput {
  club: ClubOrderByWithRelationInput
  clubId: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  level: SortOrder
  user: UserOrderByWithRelationInput
  userEmail: SortOrder
}

enum ClubMemberScalarFieldEnum {
  clubId
  createdAt
  deletedAt
  level
  userEmail
}

input ClubMemberScalarWhereInput {
  AND: [ClubMemberScalarWhereInput!]
  NOT: [ClubMemberScalarWhereInput!]
  OR: [ClubMemberScalarWhereInput!]
  clubId: StringFilter
  createdAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  level: IntFilter
  userEmail: StringFilter
}

input ClubMemberScalarWhereWithAggregatesInput {
  AND: [ClubMemberScalarWhereWithAggregatesInput!]
  NOT: [ClubMemberScalarWhereWithAggregatesInput!]
  OR: [ClubMemberScalarWhereWithAggregatesInput!]
  clubId: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  deletedAt: DateTimeNullableWithAggregatesFilter
  level: IntWithAggregatesFilter
  userEmail: StringWithAggregatesFilter
}

type ClubMemberSumAggregate {
  level: Int
}

input ClubMemberSumOrderByAggregateInput {
  level: SortOrder
}

input ClubMemberUpdateInput {
  club: ClubUpdateOneRequiredWithoutClubMemberInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  level: IntFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutClubMemberInput
}

input ClubMemberUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  level: IntFieldUpdateOperationsInput
}

input ClubMemberUpdateManyWithWhereWithoutClubInput {
  data: ClubMemberUpdateManyMutationInput!
  where: ClubMemberScalarWhereInput!
}

input ClubMemberUpdateManyWithWhereWithoutUserInput {
  data: ClubMemberUpdateManyMutationInput!
  where: ClubMemberScalarWhereInput!
}

input ClubMemberUpdateManyWithoutClubInput {
  connect: [ClubMemberWhereUniqueInput!]
  connectOrCreate: [ClubMemberCreateOrConnectWithoutClubInput!]
  create: [ClubMemberCreateWithoutClubInput!]
  delete: [ClubMemberWhereUniqueInput!]
  deleteMany: [ClubMemberScalarWhereInput!]
  disconnect: [ClubMemberWhereUniqueInput!]
  set: [ClubMemberWhereUniqueInput!]
  update: [ClubMemberUpdateWithWhereUniqueWithoutClubInput!]
  updateMany: [ClubMemberUpdateManyWithWhereWithoutClubInput!]
  upsert: [ClubMemberUpsertWithWhereUniqueWithoutClubInput!]
}

input ClubMemberUpdateManyWithoutUserInput {
  connect: [ClubMemberWhereUniqueInput!]
  connectOrCreate: [ClubMemberCreateOrConnectWithoutUserInput!]
  create: [ClubMemberCreateWithoutUserInput!]
  delete: [ClubMemberWhereUniqueInput!]
  deleteMany: [ClubMemberScalarWhereInput!]
  disconnect: [ClubMemberWhereUniqueInput!]
  set: [ClubMemberWhereUniqueInput!]
  update: [ClubMemberUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ClubMemberUpdateManyWithWhereWithoutUserInput!]
  upsert: [ClubMemberUpsertWithWhereUniqueWithoutUserInput!]
}

input ClubMemberUpdateWithWhereUniqueWithoutClubInput {
  data: ClubMemberUpdateWithoutClubInput!
  where: ClubMemberWhereUniqueInput!
}

input ClubMemberUpdateWithWhereUniqueWithoutUserInput {
  data: ClubMemberUpdateWithoutUserInput!
  where: ClubMemberWhereUniqueInput!
}

input ClubMemberUpdateWithoutClubInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  level: IntFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutClubMemberInput
}

input ClubMemberUpdateWithoutUserInput {
  club: ClubUpdateOneRequiredWithoutClubMemberInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  level: IntFieldUpdateOperationsInput
}

input ClubMemberUpsertWithWhereUniqueWithoutClubInput {
  create: ClubMemberCreateWithoutClubInput!
  update: ClubMemberUpdateWithoutClubInput!
  where: ClubMemberWhereUniqueInput!
}

input ClubMemberUpsertWithWhereUniqueWithoutUserInput {
  create: ClubMemberCreateWithoutUserInput!
  update: ClubMemberUpdateWithoutUserInput!
  where: ClubMemberWhereUniqueInput!
}

input ClubMemberWhereInput {
  AND: [ClubMemberWhereInput!]
  NOT: [ClubMemberWhereInput!]
  OR: [ClubMemberWhereInput!]
  club: ClubRelationFilter
  clubId: StringFilter
  createdAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  level: IntFilter
  user: UserRelationFilter
  userEmail: StringFilter
}

input ClubMemberWhereUniqueInput {
  clubId_userEmail: ClubMemberClubIdUserEmailCompoundUniqueInput
}

type ClubMinAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  id: String
  links: String
  name: String
  updatedAt: DateTime
}

input ClubMinOrderByAggregateInput {
  createdAt: SortOrder
  deletedAt: SortOrder
  description: SortOrder
  id: SortOrder
  links: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input ClubOrderByRelationAggregateInput {
  _count: SortOrder
}

input ClubOrderByWithAggregationInput {
  _count: ClubCountOrderByAggregateInput
  _max: ClubMaxOrderByAggregateInput
  _min: ClubMinOrderByAggregateInput
  createdAt: SortOrder
  deletedAt: SortOrder
  description: SortOrder
  id: SortOrder
  links: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input ClubOrderByWithRelationInput {
  clubCoordinator: ClubCoordinatorOrderByRelationAggregateInput
  clubMember: ClubMemberOrderByRelationAggregateInput
  clubRank: ClubRankOrderByWithRelationInput
  createdAt: SortOrder
  deletedAt: SortOrder
  description: SortOrder
  events: EventOrderByRelationAggregateInput
  id: SortOrder
  links: SortOrder
  name: SortOrder
  otp: OTPOrderByWithRelationInput
  subscription: SubscriptionOrderByRelationAggregateInput
  tags: TagOrderByRelationAggregateInput
  updatedAt: SortOrder
}

type ClubRank {
  club: Club!
  clubId: String!
  eventCount: Int!
  id: String!
  moneyAwarded: Int!
  rank: Int!
  rsvpCount: Int!
  upVoteCount: Int!
}

type ClubRankAvgAggregate {
  eventCount: Float
  moneyAwarded: Float
  rank: Float
  rsvpCount: Float
  upVoteCount: Float
}

input ClubRankAvgOrderByAggregateInput {
  eventCount: SortOrder
  moneyAwarded: SortOrder
  rank: SortOrder
  rsvpCount: SortOrder
  upVoteCount: SortOrder
}

type ClubRankCountAggregate {
  _all: Int!
  clubId: Int!
  eventCount: Int!
  id: Int!
  moneyAwarded: Int!
  rank: Int!
  rsvpCount: Int!
  upVoteCount: Int!
}

input ClubRankCountOrderByAggregateInput {
  clubId: SortOrder
  eventCount: SortOrder
  id: SortOrder
  moneyAwarded: SortOrder
  rank: SortOrder
  rsvpCount: SortOrder
  upVoteCount: SortOrder
}

input ClubRankCreateInput {
  club: ClubCreateNestedOneWithoutClubRankInput!
  eventCount: Int!
  id: String
  moneyAwarded: Int!
  rank: Int!
  rsvpCount: Int!
  upVoteCount: Int!
}

input ClubRankCreateNestedOneWithoutClubInput {
  connect: ClubRankWhereUniqueInput
  connectOrCreate: ClubRankCreateOrConnectWithoutClubInput
  create: ClubRankCreateWithoutClubInput
}

input ClubRankCreateOrConnectWithoutClubInput {
  create: ClubRankCreateWithoutClubInput!
  where: ClubRankWhereUniqueInput!
}

input ClubRankCreateWithoutClubInput {
  eventCount: Int!
  id: String
  moneyAwarded: Int!
  rank: Int!
  rsvpCount: Int!
  upVoteCount: Int!
}

type ClubRankGroupBy {
  _avg: ClubRankAvgAggregate
  _count: ClubRankCountAggregate
  _max: ClubRankMaxAggregate
  _min: ClubRankMinAggregate
  _sum: ClubRankSumAggregate
  clubId: String!
  eventCount: Int!
  id: String!
  moneyAwarded: Int!
  rank: Int!
  rsvpCount: Int!
  upVoteCount: Int!
}

type ClubRankMaxAggregate {
  clubId: String
  eventCount: Int
  id: String
  moneyAwarded: Int
  rank: Int
  rsvpCount: Int
  upVoteCount: Int
}

input ClubRankMaxOrderByAggregateInput {
  clubId: SortOrder
  eventCount: SortOrder
  id: SortOrder
  moneyAwarded: SortOrder
  rank: SortOrder
  rsvpCount: SortOrder
  upVoteCount: SortOrder
}

type ClubRankMinAggregate {
  clubId: String
  eventCount: Int
  id: String
  moneyAwarded: Int
  rank: Int
  rsvpCount: Int
  upVoteCount: Int
}

input ClubRankMinOrderByAggregateInput {
  clubId: SortOrder
  eventCount: SortOrder
  id: SortOrder
  moneyAwarded: SortOrder
  rank: SortOrder
  rsvpCount: SortOrder
  upVoteCount: SortOrder
}

input ClubRankOrderByWithAggregationInput {
  _avg: ClubRankAvgOrderByAggregateInput
  _count: ClubRankCountOrderByAggregateInput
  _max: ClubRankMaxOrderByAggregateInput
  _min: ClubRankMinOrderByAggregateInput
  _sum: ClubRankSumOrderByAggregateInput
  clubId: SortOrder
  eventCount: SortOrder
  id: SortOrder
  moneyAwarded: SortOrder
  rank: SortOrder
  rsvpCount: SortOrder
  upVoteCount: SortOrder
}

input ClubRankOrderByWithRelationInput {
  club: ClubOrderByWithRelationInput
  clubId: SortOrder
  eventCount: SortOrder
  id: SortOrder
  moneyAwarded: SortOrder
  rank: SortOrder
  rsvpCount: SortOrder
  upVoteCount: SortOrder
}

input ClubRankRelationFilter {
  is: ClubRankWhereInput
  isNot: ClubRankWhereInput
}

enum ClubRankScalarFieldEnum {
  clubId
  eventCount
  id
  moneyAwarded
  rank
  rsvpCount
  upVoteCount
}

input ClubRankScalarWhereWithAggregatesInput {
  AND: [ClubRankScalarWhereWithAggregatesInput!]
  NOT: [ClubRankScalarWhereWithAggregatesInput!]
  OR: [ClubRankScalarWhereWithAggregatesInput!]
  clubId: StringWithAggregatesFilter
  eventCount: IntWithAggregatesFilter
  id: StringWithAggregatesFilter
  moneyAwarded: IntWithAggregatesFilter
  rank: IntWithAggregatesFilter
  rsvpCount: IntWithAggregatesFilter
  upVoteCount: IntWithAggregatesFilter
}

type ClubRankSumAggregate {
  eventCount: Int
  moneyAwarded: Int
  rank: Int
  rsvpCount: Int
  upVoteCount: Int
}

input ClubRankSumOrderByAggregateInput {
  eventCount: SortOrder
  moneyAwarded: SortOrder
  rank: SortOrder
  rsvpCount: SortOrder
  upVoteCount: SortOrder
}

input ClubRankUpdateInput {
  club: ClubUpdateOneRequiredWithoutClubRankInput
  eventCount: IntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  moneyAwarded: IntFieldUpdateOperationsInput
  rank: IntFieldUpdateOperationsInput
  rsvpCount: IntFieldUpdateOperationsInput
  upVoteCount: IntFieldUpdateOperationsInput
}

input ClubRankUpdateManyMutationInput {
  eventCount: IntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  moneyAwarded: IntFieldUpdateOperationsInput
  rank: IntFieldUpdateOperationsInput
  rsvpCount: IntFieldUpdateOperationsInput
  upVoteCount: IntFieldUpdateOperationsInput
}

input ClubRankUpdateOneWithoutClubInput {
  connect: ClubRankWhereUniqueInput
  connectOrCreate: ClubRankCreateOrConnectWithoutClubInput
  create: ClubRankCreateWithoutClubInput
  delete: Boolean
  disconnect: Boolean
  update: ClubRankUpdateWithoutClubInput
  upsert: ClubRankUpsertWithoutClubInput
}

input ClubRankUpdateWithoutClubInput {
  eventCount: IntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  moneyAwarded: IntFieldUpdateOperationsInput
  rank: IntFieldUpdateOperationsInput
  rsvpCount: IntFieldUpdateOperationsInput
  upVoteCount: IntFieldUpdateOperationsInput
}

input ClubRankUpsertWithoutClubInput {
  create: ClubRankCreateWithoutClubInput!
  update: ClubRankUpdateWithoutClubInput!
}

input ClubRankWhereInput {
  AND: [ClubRankWhereInput!]
  NOT: [ClubRankWhereInput!]
  OR: [ClubRankWhereInput!]
  club: ClubRelationFilter
  clubId: StringFilter
  eventCount: IntFilter
  id: StringFilter
  moneyAwarded: IntFilter
  rank: IntFilter
  rsvpCount: IntFilter
  upVoteCount: IntFilter
}

input ClubRankWhereUniqueInput {
  clubId: String
  id: String
}

input ClubRelationFilter {
  is: ClubWhereInput
  isNot: ClubWhereInput
}

enum ClubScalarFieldEnum {
  createdAt
  deletedAt
  description
  id
  links
  name
  updatedAt
}

input ClubScalarWhereInput {
  AND: [ClubScalarWhereInput!]
  NOT: [ClubScalarWhereInput!]
  OR: [ClubScalarWhereInput!]
  createdAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  description: StringFilter
  id: StringFilter
  links: StringFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

input ClubScalarWhereWithAggregatesInput {
  AND: [ClubScalarWhereWithAggregatesInput!]
  NOT: [ClubScalarWhereWithAggregatesInput!]
  OR: [ClubScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  deletedAt: DateTimeNullableWithAggregatesFilter
  description: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  links: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input ClubUpdateInput {
  clubCoordinator: ClubCoordinatorUpdateManyWithoutClubInput
  clubMember: ClubMemberUpdateManyWithoutClubInput
  clubRank: ClubRankUpdateOneWithoutClubInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  events: EventUpdateManyWithoutClubsInput
  id: StringFieldUpdateOperationsInput
  links: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  otp: OTPUpdateOneWithoutClubInput
  subscription: SubscriptionUpdateManyWithoutClubInput
  tags: TagUpdateManyWithoutClubsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClubUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  links: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClubUpdateManyWithWhereWithoutEventsInput {
  data: ClubUpdateManyMutationInput!
  where: ClubScalarWhereInput!
}

input ClubUpdateManyWithWhereWithoutTagsInput {
  data: ClubUpdateManyMutationInput!
  where: ClubScalarWhereInput!
}

input ClubUpdateManyWithoutEventsInput {
  connect: [ClubWhereUniqueInput!]
  connectOrCreate: [ClubCreateOrConnectWithoutEventsInput!]
  create: [ClubCreateWithoutEventsInput!]
  delete: [ClubWhereUniqueInput!]
  deleteMany: [ClubScalarWhereInput!]
  disconnect: [ClubWhereUniqueInput!]
  set: [ClubWhereUniqueInput!]
  update: [ClubUpdateWithWhereUniqueWithoutEventsInput!]
  updateMany: [ClubUpdateManyWithWhereWithoutEventsInput!]
  upsert: [ClubUpsertWithWhereUniqueWithoutEventsInput!]
}

input ClubUpdateManyWithoutTagsInput {
  connect: [ClubWhereUniqueInput!]
  connectOrCreate: [ClubCreateOrConnectWithoutTagsInput!]
  create: [ClubCreateWithoutTagsInput!]
  delete: [ClubWhereUniqueInput!]
  deleteMany: [ClubScalarWhereInput!]
  disconnect: [ClubWhereUniqueInput!]
  set: [ClubWhereUniqueInput!]
  update: [ClubUpdateWithWhereUniqueWithoutTagsInput!]
  updateMany: [ClubUpdateManyWithWhereWithoutTagsInput!]
  upsert: [ClubUpsertWithWhereUniqueWithoutTagsInput!]
}

input ClubUpdateOneRequiredWithoutClubCoordinatorInput {
  connect: ClubWhereUniqueInput
  connectOrCreate: ClubCreateOrConnectWithoutClubCoordinatorInput
  create: ClubCreateWithoutClubCoordinatorInput
  update: ClubUpdateWithoutClubCoordinatorInput
  upsert: ClubUpsertWithoutClubCoordinatorInput
}

input ClubUpdateOneRequiredWithoutClubMemberInput {
  connect: ClubWhereUniqueInput
  connectOrCreate: ClubCreateOrConnectWithoutClubMemberInput
  create: ClubCreateWithoutClubMemberInput
  update: ClubUpdateWithoutClubMemberInput
  upsert: ClubUpsertWithoutClubMemberInput
}

input ClubUpdateOneRequiredWithoutClubRankInput {
  connect: ClubWhereUniqueInput
  connectOrCreate: ClubCreateOrConnectWithoutClubRankInput
  create: ClubCreateWithoutClubRankInput
  update: ClubUpdateWithoutClubRankInput
  upsert: ClubUpsertWithoutClubRankInput
}

input ClubUpdateOneRequiredWithoutOtpInput {
  connect: ClubWhereUniqueInput
  connectOrCreate: ClubCreateOrConnectWithoutOtpInput
  create: ClubCreateWithoutOtpInput
  update: ClubUpdateWithoutOtpInput
  upsert: ClubUpsertWithoutOtpInput
}

input ClubUpdateOneRequiredWithoutSubscriptionInput {
  connect: ClubWhereUniqueInput
  connectOrCreate: ClubCreateOrConnectWithoutSubscriptionInput
  create: ClubCreateWithoutSubscriptionInput
  update: ClubUpdateWithoutSubscriptionInput
  upsert: ClubUpsertWithoutSubscriptionInput
}

input ClubUpdateWithWhereUniqueWithoutEventsInput {
  data: ClubUpdateWithoutEventsInput!
  where: ClubWhereUniqueInput!
}

input ClubUpdateWithWhereUniqueWithoutTagsInput {
  data: ClubUpdateWithoutTagsInput!
  where: ClubWhereUniqueInput!
}

input ClubUpdateWithoutClubCoordinatorInput {
  clubMember: ClubMemberUpdateManyWithoutClubInput
  clubRank: ClubRankUpdateOneWithoutClubInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  events: EventUpdateManyWithoutClubsInput
  id: StringFieldUpdateOperationsInput
  links: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  otp: OTPUpdateOneWithoutClubInput
  subscription: SubscriptionUpdateManyWithoutClubInput
  tags: TagUpdateManyWithoutClubsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClubUpdateWithoutClubMemberInput {
  clubCoordinator: ClubCoordinatorUpdateManyWithoutClubInput
  clubRank: ClubRankUpdateOneWithoutClubInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  events: EventUpdateManyWithoutClubsInput
  id: StringFieldUpdateOperationsInput
  links: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  otp: OTPUpdateOneWithoutClubInput
  subscription: SubscriptionUpdateManyWithoutClubInput
  tags: TagUpdateManyWithoutClubsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClubUpdateWithoutClubRankInput {
  clubCoordinator: ClubCoordinatorUpdateManyWithoutClubInput
  clubMember: ClubMemberUpdateManyWithoutClubInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  events: EventUpdateManyWithoutClubsInput
  id: StringFieldUpdateOperationsInput
  links: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  otp: OTPUpdateOneWithoutClubInput
  subscription: SubscriptionUpdateManyWithoutClubInput
  tags: TagUpdateManyWithoutClubsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClubUpdateWithoutEventsInput {
  clubCoordinator: ClubCoordinatorUpdateManyWithoutClubInput
  clubMember: ClubMemberUpdateManyWithoutClubInput
  clubRank: ClubRankUpdateOneWithoutClubInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  links: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  otp: OTPUpdateOneWithoutClubInput
  subscription: SubscriptionUpdateManyWithoutClubInput
  tags: TagUpdateManyWithoutClubsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClubUpdateWithoutOtpInput {
  clubCoordinator: ClubCoordinatorUpdateManyWithoutClubInput
  clubMember: ClubMemberUpdateManyWithoutClubInput
  clubRank: ClubRankUpdateOneWithoutClubInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  events: EventUpdateManyWithoutClubsInput
  id: StringFieldUpdateOperationsInput
  links: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  subscription: SubscriptionUpdateManyWithoutClubInput
  tags: TagUpdateManyWithoutClubsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClubUpdateWithoutSubscriptionInput {
  clubCoordinator: ClubCoordinatorUpdateManyWithoutClubInput
  clubMember: ClubMemberUpdateManyWithoutClubInput
  clubRank: ClubRankUpdateOneWithoutClubInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  events: EventUpdateManyWithoutClubsInput
  id: StringFieldUpdateOperationsInput
  links: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  otp: OTPUpdateOneWithoutClubInput
  tags: TagUpdateManyWithoutClubsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClubUpdateWithoutTagsInput {
  clubCoordinator: ClubCoordinatorUpdateManyWithoutClubInput
  clubMember: ClubMemberUpdateManyWithoutClubInput
  clubRank: ClubRankUpdateOneWithoutClubInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  events: EventUpdateManyWithoutClubsInput
  id: StringFieldUpdateOperationsInput
  links: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  otp: OTPUpdateOneWithoutClubInput
  subscription: SubscriptionUpdateManyWithoutClubInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClubUpsertWithWhereUniqueWithoutEventsInput {
  create: ClubCreateWithoutEventsInput!
  update: ClubUpdateWithoutEventsInput!
  where: ClubWhereUniqueInput!
}

input ClubUpsertWithWhereUniqueWithoutTagsInput {
  create: ClubCreateWithoutTagsInput!
  update: ClubUpdateWithoutTagsInput!
  where: ClubWhereUniqueInput!
}

input ClubUpsertWithoutClubCoordinatorInput {
  create: ClubCreateWithoutClubCoordinatorInput!
  update: ClubUpdateWithoutClubCoordinatorInput!
}

input ClubUpsertWithoutClubMemberInput {
  create: ClubCreateWithoutClubMemberInput!
  update: ClubUpdateWithoutClubMemberInput!
}

input ClubUpsertWithoutClubRankInput {
  create: ClubCreateWithoutClubRankInput!
  update: ClubUpdateWithoutClubRankInput!
}

input ClubUpsertWithoutOtpInput {
  create: ClubCreateWithoutOtpInput!
  update: ClubUpdateWithoutOtpInput!
}

input ClubUpsertWithoutSubscriptionInput {
  create: ClubCreateWithoutSubscriptionInput!
  update: ClubUpdateWithoutSubscriptionInput!
}

input ClubWhereInput {
  AND: [ClubWhereInput!]
  NOT: [ClubWhereInput!]
  OR: [ClubWhereInput!]
  clubCoordinator: ClubCoordinatorListRelationFilter
  clubMember: ClubMemberListRelationFilter
  clubRank: ClubRankRelationFilter
  createdAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  description: StringFilter
  events: EventListRelationFilter
  id: StringFilter
  links: StringFilter
  name: StringFilter
  otp: OTPRelationFilter
  subscription: SubscriptionListRelationFilter
  tags: TagListRelationFilter
  updatedAt: DateTimeFilter
}

input ClubWhereUniqueInput {
  id: String
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input DateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTime!]
}

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

type Event {
  _count: EventCount
  clubs(cursor: ClubWhereUniqueInput, distinct: [ClubScalarFieldEnum!], orderBy: [ClubOrderByWithRelationInput!], skip: Int, take: Int, where: ClubWhereInput): [Club!]!
  createdAt: DateTime!
  deadline: DateTime
  deletedAt: DateTime
  description: String!
  eventEndDate: DateTime
  eventStartDate: DateTime
  id: String!
  link: String
  name: String!
  postions(cursor: PositionWhereUniqueInput, distinct: [PositionScalarFieldEnum!], orderBy: [PositionOrderByWithRelationInput!], skip: Int, take: Int, where: PositionWhereInput): [Position!]!
  rsvpEvent(cursor: RSVPEventWhereUniqueInput, distinct: [RSVPEventScalarFieldEnum!], orderBy: [RSVPEventOrderByWithRelationInput!], skip: Int, take: Int, where: RSVPEventWhereInput): [RSVPEvent!]!
  updatedAt: DateTime!
  venue: String
  votes(cursor: VoteWhereUniqueInput, distinct: [VoteScalarFieldEnum!], orderBy: [VoteOrderByWithRelationInput!], skip: Int, take: Int, where: VoteWhereInput): [Vote!]!
}

type EventCount {
  clubs: Int!
  postions: Int!
  rsvpEvent: Int!
  votes: Int!
}

type EventCountAggregate {
  _all: Int!
  createdAt: Int!
  deadline: Int!
  deletedAt: Int!
  description: Int!
  eventEndDate: Int!
  eventStartDate: Int!
  id: Int!
  link: Int!
  name: Int!
  updatedAt: Int!
  venue: Int!
}

input EventCountOrderByAggregateInput {
  createdAt: SortOrder
  deadline: SortOrder
  deletedAt: SortOrder
  description: SortOrder
  eventEndDate: SortOrder
  eventStartDate: SortOrder
  id: SortOrder
  link: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  venue: SortOrder
}

input EventCreateInput {
  clubs: ClubCreateNestedManyWithoutEventsInput
  createdAt: DateTime
  deadline: DateTime
  deletedAt: DateTime
  description: String!
  eventEndDate: DateTime
  eventStartDate: DateTime
  id: String
  link: String
  name: String!
  postions: PositionCreateNestedManyWithoutEventInput
  rsvpEvent: RSVPEventCreateNestedManyWithoutEventInput
  updatedAt: DateTime
  venue: String
  votes: VoteCreateNestedManyWithoutEventInput
}

input EventCreateNestedManyWithoutClubsInput {
  connect: [EventWhereUniqueInput!]
  connectOrCreate: [EventCreateOrConnectWithoutClubsInput!]
  create: [EventCreateWithoutClubsInput!]
}

input EventCreateNestedOneWithoutPostionsInput {
  connect: EventWhereUniqueInput
  connectOrCreate: EventCreateOrConnectWithoutPostionsInput
  create: EventCreateWithoutPostionsInput
}

input EventCreateNestedOneWithoutRsvpEventInput {
  connect: EventWhereUniqueInput
  connectOrCreate: EventCreateOrConnectWithoutRsvpEventInput
  create: EventCreateWithoutRsvpEventInput
}

input EventCreateNestedOneWithoutVotesInput {
  connect: EventWhereUniqueInput
  connectOrCreate: EventCreateOrConnectWithoutVotesInput
  create: EventCreateWithoutVotesInput
}

input EventCreateOrConnectWithoutClubsInput {
  create: EventCreateWithoutClubsInput!
  where: EventWhereUniqueInput!
}

input EventCreateOrConnectWithoutPostionsInput {
  create: EventCreateWithoutPostionsInput!
  where: EventWhereUniqueInput!
}

input EventCreateOrConnectWithoutRsvpEventInput {
  create: EventCreateWithoutRsvpEventInput!
  where: EventWhereUniqueInput!
}

input EventCreateOrConnectWithoutVotesInput {
  create: EventCreateWithoutVotesInput!
  where: EventWhereUniqueInput!
}

input EventCreateWithoutClubsInput {
  createdAt: DateTime
  deadline: DateTime
  deletedAt: DateTime
  description: String!
  eventEndDate: DateTime
  eventStartDate: DateTime
  id: String
  link: String
  name: String!
  postions: PositionCreateNestedManyWithoutEventInput
  rsvpEvent: RSVPEventCreateNestedManyWithoutEventInput
  updatedAt: DateTime
  venue: String
  votes: VoteCreateNestedManyWithoutEventInput
}

input EventCreateWithoutPostionsInput {
  clubs: ClubCreateNestedManyWithoutEventsInput
  createdAt: DateTime
  deadline: DateTime
  deletedAt: DateTime
  description: String!
  eventEndDate: DateTime
  eventStartDate: DateTime
  id: String
  link: String
  name: String!
  rsvpEvent: RSVPEventCreateNestedManyWithoutEventInput
  updatedAt: DateTime
  venue: String
  votes: VoteCreateNestedManyWithoutEventInput
}

input EventCreateWithoutRsvpEventInput {
  clubs: ClubCreateNestedManyWithoutEventsInput
  createdAt: DateTime
  deadline: DateTime
  deletedAt: DateTime
  description: String!
  eventEndDate: DateTime
  eventStartDate: DateTime
  id: String
  link: String
  name: String!
  postions: PositionCreateNestedManyWithoutEventInput
  updatedAt: DateTime
  venue: String
  votes: VoteCreateNestedManyWithoutEventInput
}

input EventCreateWithoutVotesInput {
  clubs: ClubCreateNestedManyWithoutEventsInput
  createdAt: DateTime
  deadline: DateTime
  deletedAt: DateTime
  description: String!
  eventEndDate: DateTime
  eventStartDate: DateTime
  id: String
  link: String
  name: String!
  postions: PositionCreateNestedManyWithoutEventInput
  rsvpEvent: RSVPEventCreateNestedManyWithoutEventInput
  updatedAt: DateTime
  venue: String
}

type EventGroupBy {
  _count: EventCountAggregate
  _max: EventMaxAggregate
  _min: EventMinAggregate
  createdAt: DateTime!
  deadline: DateTime
  deletedAt: DateTime
  description: String!
  eventEndDate: DateTime
  eventStartDate: DateTime
  id: String!
  link: String
  name: String!
  updatedAt: DateTime!
  venue: String
}

input EventListRelationFilter {
  every: EventWhereInput
  none: EventWhereInput
  some: EventWhereInput
}

type EventMaxAggregate {
  createdAt: DateTime
  deadline: DateTime
  deletedAt: DateTime
  description: String
  eventEndDate: DateTime
  eventStartDate: DateTime
  id: String
  link: String
  name: String
  updatedAt: DateTime
  venue: String
}

input EventMaxOrderByAggregateInput {
  createdAt: SortOrder
  deadline: SortOrder
  deletedAt: SortOrder
  description: SortOrder
  eventEndDate: SortOrder
  eventStartDate: SortOrder
  id: SortOrder
  link: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  venue: SortOrder
}

type EventMinAggregate {
  createdAt: DateTime
  deadline: DateTime
  deletedAt: DateTime
  description: String
  eventEndDate: DateTime
  eventStartDate: DateTime
  id: String
  link: String
  name: String
  updatedAt: DateTime
  venue: String
}

input EventMinOrderByAggregateInput {
  createdAt: SortOrder
  deadline: SortOrder
  deletedAt: SortOrder
  description: SortOrder
  eventEndDate: SortOrder
  eventStartDate: SortOrder
  id: SortOrder
  link: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  venue: SortOrder
}

input EventOrderByRelationAggregateInput {
  _count: SortOrder
}

input EventOrderByWithAggregationInput {
  _count: EventCountOrderByAggregateInput
  _max: EventMaxOrderByAggregateInput
  _min: EventMinOrderByAggregateInput
  createdAt: SortOrder
  deadline: SortOrder
  deletedAt: SortOrder
  description: SortOrder
  eventEndDate: SortOrder
  eventStartDate: SortOrder
  id: SortOrder
  link: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  venue: SortOrder
}

input EventOrderByWithRelationInput {
  clubs: ClubOrderByRelationAggregateInput
  createdAt: SortOrder
  deadline: SortOrder
  deletedAt: SortOrder
  description: SortOrder
  eventEndDate: SortOrder
  eventStartDate: SortOrder
  id: SortOrder
  link: SortOrder
  name: SortOrder
  postions: PositionOrderByRelationAggregateInput
  rsvpEvent: RSVPEventOrderByRelationAggregateInput
  updatedAt: SortOrder
  venue: SortOrder
  votes: VoteOrderByRelationAggregateInput
}

input EventRelationFilter {
  is: EventWhereInput
  isNot: EventWhereInput
}

enum EventScalarFieldEnum {
  createdAt
  deadline
  deletedAt
  description
  eventEndDate
  eventStartDate
  id
  link
  name
  updatedAt
  venue
}

input EventScalarWhereInput {
  AND: [EventScalarWhereInput!]
  NOT: [EventScalarWhereInput!]
  OR: [EventScalarWhereInput!]
  createdAt: DateTimeFilter
  deadline: DateTimeNullableFilter
  deletedAt: DateTimeNullableFilter
  description: StringFilter
  eventEndDate: DateTimeNullableFilter
  eventStartDate: DateTimeNullableFilter
  id: StringFilter
  link: StringNullableFilter
  name: StringFilter
  updatedAt: DateTimeFilter
  venue: StringNullableFilter
}

input EventScalarWhereWithAggregatesInput {
  AND: [EventScalarWhereWithAggregatesInput!]
  NOT: [EventScalarWhereWithAggregatesInput!]
  OR: [EventScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  deadline: DateTimeNullableWithAggregatesFilter
  deletedAt: DateTimeNullableWithAggregatesFilter
  description: StringWithAggregatesFilter
  eventEndDate: DateTimeNullableWithAggregatesFilter
  eventStartDate: DateTimeNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  link: StringNullableWithAggregatesFilter
  name: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  venue: StringNullableWithAggregatesFilter
}

input EventUpdateInput {
  clubs: ClubUpdateManyWithoutEventsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deadline: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  eventEndDate: NullableDateTimeFieldUpdateOperationsInput
  eventStartDate: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  link: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  postions: PositionUpdateManyWithoutEventInput
  rsvpEvent: RSVPEventUpdateManyWithoutEventInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  venue: NullableStringFieldUpdateOperationsInput
  votes: VoteUpdateManyWithoutEventInput
}

input EventUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deadline: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  eventEndDate: NullableDateTimeFieldUpdateOperationsInput
  eventStartDate: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  link: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  venue: NullableStringFieldUpdateOperationsInput
}

input EventUpdateManyWithWhereWithoutClubsInput {
  data: EventUpdateManyMutationInput!
  where: EventScalarWhereInput!
}

input EventUpdateManyWithoutClubsInput {
  connect: [EventWhereUniqueInput!]
  connectOrCreate: [EventCreateOrConnectWithoutClubsInput!]
  create: [EventCreateWithoutClubsInput!]
  delete: [EventWhereUniqueInput!]
  deleteMany: [EventScalarWhereInput!]
  disconnect: [EventWhereUniqueInput!]
  set: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueWithoutClubsInput!]
  updateMany: [EventUpdateManyWithWhereWithoutClubsInput!]
  upsert: [EventUpsertWithWhereUniqueWithoutClubsInput!]
}

input EventUpdateOneRequiredWithoutPostionsInput {
  connect: EventWhereUniqueInput
  connectOrCreate: EventCreateOrConnectWithoutPostionsInput
  create: EventCreateWithoutPostionsInput
  update: EventUpdateWithoutPostionsInput
  upsert: EventUpsertWithoutPostionsInput
}

input EventUpdateOneRequiredWithoutRsvpEventInput {
  connect: EventWhereUniqueInput
  connectOrCreate: EventCreateOrConnectWithoutRsvpEventInput
  create: EventCreateWithoutRsvpEventInput
  update: EventUpdateWithoutRsvpEventInput
  upsert: EventUpsertWithoutRsvpEventInput
}

input EventUpdateOneRequiredWithoutVotesInput {
  connect: EventWhereUniqueInput
  connectOrCreate: EventCreateOrConnectWithoutVotesInput
  create: EventCreateWithoutVotesInput
  update: EventUpdateWithoutVotesInput
  upsert: EventUpsertWithoutVotesInput
}

input EventUpdateWithWhereUniqueWithoutClubsInput {
  data: EventUpdateWithoutClubsInput!
  where: EventWhereUniqueInput!
}

input EventUpdateWithoutClubsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deadline: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  eventEndDate: NullableDateTimeFieldUpdateOperationsInput
  eventStartDate: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  link: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  postions: PositionUpdateManyWithoutEventInput
  rsvpEvent: RSVPEventUpdateManyWithoutEventInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  venue: NullableStringFieldUpdateOperationsInput
  votes: VoteUpdateManyWithoutEventInput
}

input EventUpdateWithoutPostionsInput {
  clubs: ClubUpdateManyWithoutEventsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deadline: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  eventEndDate: NullableDateTimeFieldUpdateOperationsInput
  eventStartDate: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  link: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  rsvpEvent: RSVPEventUpdateManyWithoutEventInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  venue: NullableStringFieldUpdateOperationsInput
  votes: VoteUpdateManyWithoutEventInput
}

input EventUpdateWithoutRsvpEventInput {
  clubs: ClubUpdateManyWithoutEventsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deadline: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  eventEndDate: NullableDateTimeFieldUpdateOperationsInput
  eventStartDate: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  link: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  postions: PositionUpdateManyWithoutEventInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  venue: NullableStringFieldUpdateOperationsInput
  votes: VoteUpdateManyWithoutEventInput
}

input EventUpdateWithoutVotesInput {
  clubs: ClubUpdateManyWithoutEventsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deadline: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  eventEndDate: NullableDateTimeFieldUpdateOperationsInput
  eventStartDate: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  link: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  postions: PositionUpdateManyWithoutEventInput
  rsvpEvent: RSVPEventUpdateManyWithoutEventInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  venue: NullableStringFieldUpdateOperationsInput
}

input EventUpsertWithWhereUniqueWithoutClubsInput {
  create: EventCreateWithoutClubsInput!
  update: EventUpdateWithoutClubsInput!
  where: EventWhereUniqueInput!
}

input EventUpsertWithoutPostionsInput {
  create: EventCreateWithoutPostionsInput!
  update: EventUpdateWithoutPostionsInput!
}

input EventUpsertWithoutRsvpEventInput {
  create: EventCreateWithoutRsvpEventInput!
  update: EventUpdateWithoutRsvpEventInput!
}

input EventUpsertWithoutVotesInput {
  create: EventCreateWithoutVotesInput!
  update: EventUpdateWithoutVotesInput!
}

input EventWhereInput {
  AND: [EventWhereInput!]
  NOT: [EventWhereInput!]
  OR: [EventWhereInput!]
  clubs: ClubListRelationFilter
  createdAt: DateTimeFilter
  deadline: DateTimeNullableFilter
  deletedAt: DateTimeNullableFilter
  description: StringFilter
  eventEndDate: DateTimeNullableFilter
  eventStartDate: DateTimeNullableFilter
  id: StringFilter
  link: StringNullableFilter
  name: StringFilter
  postions: PositionListRelationFilter
  rsvpEvent: RSVPEventListRelationFilter
  updatedAt: DateTimeFilter
  venue: StringNullableFilter
  votes: VoteListRelationFilter
}

input EventWhereUniqueInput {
  id: String
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input IntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

input IntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

type Mutation {
  createClub(data: ClubCreateInput!): Club!
  createClubCoordinator(data: ClubCoordinatorCreateInput!): ClubCoordinator!
  createClubMember(data: ClubMemberCreateInput!): ClubMember!
  createClubRank(data: ClubRankCreateInput!): ClubRank!
  createEvent(data: EventCreateInput!): Event!
  createOTP(data: OTPCreateInput!): OTP!
  createPosition(data: PositionCreateInput!): Position!
  createRSVPEvent(data: RSVPEventCreateInput!): RSVPEvent!
  createStudentRank(data: StudentRankCreateInput!): StudentRank!
  createSubscription(data: SubscriptionCreateInput!): Subscription!
  createTag(data: TagCreateInput!): Tag!
  createUser(data: UserCreateInput!): User!
  createVote(data: VoteCreateInput!): Vote!
  deleteClub(where: ClubWhereUniqueInput!): Club
  deleteClubCoordinator(where: ClubCoordinatorWhereUniqueInput!): ClubCoordinator
  deleteClubMember(where: ClubMemberWhereUniqueInput!): ClubMember
  deleteClubRank(where: ClubRankWhereUniqueInput!): ClubRank
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteManyClub(where: ClubWhereInput): AffectedRowsOutput!
  deleteManyClubCoordinator(where: ClubCoordinatorWhereInput): AffectedRowsOutput!
  deleteManyClubMember(where: ClubMemberWhereInput): AffectedRowsOutput!
  deleteManyClubRank(where: ClubRankWhereInput): AffectedRowsOutput!
  deleteManyEvent(where: EventWhereInput): AffectedRowsOutput!
  deleteManyOTP(where: OTPWhereInput): AffectedRowsOutput!
  deleteManyPosition(where: PositionWhereInput): AffectedRowsOutput!
  deleteManyRSVPEvent(where: RSVPEventWhereInput): AffectedRowsOutput!
  deleteManyStudentRank(where: StudentRankWhereInput): AffectedRowsOutput!
  deleteManySubscription(where: SubscriptionWhereInput): AffectedRowsOutput!
  deleteManyTag(where: TagWhereInput): AffectedRowsOutput!
  deleteManyUser(where: UserWhereInput): AffectedRowsOutput!
  deleteManyVote(where: VoteWhereInput): AffectedRowsOutput!
  deleteOTP(where: OTPWhereUniqueInput!): OTP
  deletePosition(where: PositionWhereUniqueInput!): Position
  deleteRSVPEvent(where: RSVPEventWhereUniqueInput!): RSVPEvent
  deleteStudentRank(where: StudentRankWhereUniqueInput!): StudentRank
  deleteSubscription(where: SubscriptionWhereUniqueInput!): Subscription
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteUser(where: UserWhereUniqueInput!): User
  deleteVote(where: VoteWhereUniqueInput!): Vote
  updateClub(data: ClubUpdateInput!, where: ClubWhereUniqueInput!): Club
  updateClubCoordinator(data: ClubCoordinatorUpdateInput!, where: ClubCoordinatorWhereUniqueInput!): ClubCoordinator
  updateClubMember(data: ClubMemberUpdateInput!, where: ClubMemberWhereUniqueInput!): ClubMember
  updateClubRank(data: ClubRankUpdateInput!, where: ClubRankWhereUniqueInput!): ClubRank
  updateEvent(data: EventUpdateInput!, where: EventWhereUniqueInput!): Event
  updateManyClub(data: ClubUpdateManyMutationInput!, where: ClubWhereInput): AffectedRowsOutput!
  updateManyClubCoordinator(data: ClubCoordinatorUpdateManyMutationInput!, where: ClubCoordinatorWhereInput): AffectedRowsOutput!
  updateManyClubMember(data: ClubMemberUpdateManyMutationInput!, where: ClubMemberWhereInput): AffectedRowsOutput!
  updateManyClubRank(data: ClubRankUpdateManyMutationInput!, where: ClubRankWhereInput): AffectedRowsOutput!
  updateManyEvent(data: EventUpdateManyMutationInput!, where: EventWhereInput): AffectedRowsOutput!
  updateManyOTP(data: OTPUpdateManyMutationInput!, where: OTPWhereInput): AffectedRowsOutput!
  updateManyPosition(data: PositionUpdateManyMutationInput!, where: PositionWhereInput): AffectedRowsOutput!
  updateManyRSVPEvent(data: RSVPEventUpdateManyMutationInput!, where: RSVPEventWhereInput): AffectedRowsOutput!
  updateManyStudentRank(data: StudentRankUpdateManyMutationInput!, where: StudentRankWhereInput): AffectedRowsOutput!
  updateManySubscription(data: SubscriptionUpdateManyMutationInput!, where: SubscriptionWhereInput): AffectedRowsOutput!
  updateManyTag(data: TagUpdateManyMutationInput!, where: TagWhereInput): AffectedRowsOutput!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput!
  updateManyVote(data: VoteUpdateManyMutationInput!, where: VoteWhereInput): AffectedRowsOutput!
  updateOTP(data: OTPUpdateInput!, where: OTPWhereUniqueInput!): OTP
  updatePosition(data: PositionUpdateInput!, where: PositionWhereUniqueInput!): Position
  updateRSVPEvent(data: RSVPEventUpdateInput!, where: RSVPEventWhereUniqueInput!): RSVPEvent
  updateStudentRank(data: StudentRankUpdateInput!, where: StudentRankWhereUniqueInput!): StudentRank
  updateSubscription(data: SubscriptionUpdateInput!, where: SubscriptionWhereUniqueInput!): Subscription
  updateTag(data: TagUpdateInput!, where: TagWhereUniqueInput!): Tag
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateVote(data: VoteUpdateInput!, where: VoteWhereUniqueInput!): Vote
  upsertClub(create: ClubCreateInput!, update: ClubUpdateInput!, where: ClubWhereUniqueInput!): Club!
  upsertClubCoordinator(create: ClubCoordinatorCreateInput!, update: ClubCoordinatorUpdateInput!, where: ClubCoordinatorWhereUniqueInput!): ClubCoordinator!
  upsertClubMember(create: ClubMemberCreateInput!, update: ClubMemberUpdateInput!, where: ClubMemberWhereUniqueInput!): ClubMember!
  upsertClubRank(create: ClubRankCreateInput!, update: ClubRankUpdateInput!, where: ClubRankWhereUniqueInput!): ClubRank!
  upsertEvent(create: EventCreateInput!, update: EventUpdateInput!, where: EventWhereUniqueInput!): Event!
  upsertOTP(create: OTPCreateInput!, update: OTPUpdateInput!, where: OTPWhereUniqueInput!): OTP!
  upsertPosition(create: PositionCreateInput!, update: PositionUpdateInput!, where: PositionWhereUniqueInput!): Position!
  upsertRSVPEvent(create: RSVPEventCreateInput!, update: RSVPEventUpdateInput!, where: RSVPEventWhereUniqueInput!): RSVPEvent!
  upsertStudentRank(create: StudentRankCreateInput!, update: StudentRankUpdateInput!, where: StudentRankWhereUniqueInput!): StudentRank!
  upsertSubscription(create: SubscriptionCreateInput!, update: SubscriptionUpdateInput!, where: SubscriptionWhereUniqueInput!): Subscription!
  upsertTag(create: TagCreateInput!, update: TagUpdateInput!, where: TagWhereUniqueInput!): Tag!
  upsertUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  upsertVote(create: VoteCreateInput!, update: VoteUpdateInput!, where: VoteWhereUniqueInput!): Vote!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTime!]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedFloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedIntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

input NestedIntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableIntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type OTP {
  club: Club!
  clubId: String!
  createdAt: DateTime!
  expiredAt: DateTime!
  id: String!
  otp: String!
  updatedAt: DateTime!
}

type OTPCountAggregate {
  _all: Int!
  clubId: Int!
  createdAt: Int!
  expiredAt: Int!
  id: Int!
  otp: Int!
  updatedAt: Int!
}

input OTPCountOrderByAggregateInput {
  clubId: SortOrder
  createdAt: SortOrder
  expiredAt: SortOrder
  id: SortOrder
  otp: SortOrder
  updatedAt: SortOrder
}

input OTPCreateInput {
  club: ClubCreateNestedOneWithoutOtpInput!
  createdAt: DateTime
  expiredAt: DateTime!
  id: String
  otp: String!
  updatedAt: DateTime
}

input OTPCreateNestedOneWithoutClubInput {
  connect: OTPWhereUniqueInput
  connectOrCreate: OTPCreateOrConnectWithoutClubInput
  create: OTPCreateWithoutClubInput
}

input OTPCreateOrConnectWithoutClubInput {
  create: OTPCreateWithoutClubInput!
  where: OTPWhereUniqueInput!
}

input OTPCreateWithoutClubInput {
  createdAt: DateTime
  expiredAt: DateTime!
  id: String
  otp: String!
  updatedAt: DateTime
}

type OTPGroupBy {
  _count: OTPCountAggregate
  _max: OTPMaxAggregate
  _min: OTPMinAggregate
  clubId: String!
  createdAt: DateTime!
  expiredAt: DateTime!
  id: String!
  otp: String!
  updatedAt: DateTime!
}

type OTPMaxAggregate {
  clubId: String
  createdAt: DateTime
  expiredAt: DateTime
  id: String
  otp: String
  updatedAt: DateTime
}

input OTPMaxOrderByAggregateInput {
  clubId: SortOrder
  createdAt: SortOrder
  expiredAt: SortOrder
  id: SortOrder
  otp: SortOrder
  updatedAt: SortOrder
}

type OTPMinAggregate {
  clubId: String
  createdAt: DateTime
  expiredAt: DateTime
  id: String
  otp: String
  updatedAt: DateTime
}

input OTPMinOrderByAggregateInput {
  clubId: SortOrder
  createdAt: SortOrder
  expiredAt: SortOrder
  id: SortOrder
  otp: SortOrder
  updatedAt: SortOrder
}

input OTPOrderByWithAggregationInput {
  _count: OTPCountOrderByAggregateInput
  _max: OTPMaxOrderByAggregateInput
  _min: OTPMinOrderByAggregateInput
  clubId: SortOrder
  createdAt: SortOrder
  expiredAt: SortOrder
  id: SortOrder
  otp: SortOrder
  updatedAt: SortOrder
}

input OTPOrderByWithRelationInput {
  club: ClubOrderByWithRelationInput
  clubId: SortOrder
  createdAt: SortOrder
  expiredAt: SortOrder
  id: SortOrder
  otp: SortOrder
  updatedAt: SortOrder
}

input OTPRelationFilter {
  is: OTPWhereInput
  isNot: OTPWhereInput
}

enum OTPScalarFieldEnum {
  clubId
  createdAt
  expiredAt
  id
  otp
  updatedAt
}

input OTPScalarWhereWithAggregatesInput {
  AND: [OTPScalarWhereWithAggregatesInput!]
  NOT: [OTPScalarWhereWithAggregatesInput!]
  OR: [OTPScalarWhereWithAggregatesInput!]
  clubId: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  expiredAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  otp: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input OTPUpdateInput {
  club: ClubUpdateOneRequiredWithoutOtpInput
  createdAt: DateTimeFieldUpdateOperationsInput
  expiredAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  otp: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input OTPUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  expiredAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  otp: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input OTPUpdateOneWithoutClubInput {
  connect: OTPWhereUniqueInput
  connectOrCreate: OTPCreateOrConnectWithoutClubInput
  create: OTPCreateWithoutClubInput
  delete: Boolean
  disconnect: Boolean
  update: OTPUpdateWithoutClubInput
  upsert: OTPUpsertWithoutClubInput
}

input OTPUpdateWithoutClubInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  expiredAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  otp: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input OTPUpsertWithoutClubInput {
  create: OTPCreateWithoutClubInput!
  update: OTPUpdateWithoutClubInput!
}

input OTPWhereInput {
  AND: [OTPWhereInput!]
  NOT: [OTPWhereInput!]
  OR: [OTPWhereInput!]
  club: ClubRelationFilter
  clubId: StringFilter
  createdAt: DateTimeFilter
  expiredAt: DateTimeFilter
  id: StringFilter
  otp: StringFilter
  updatedAt: DateTimeFilter
}

input OTPWhereUniqueInput {
  clubId: String
  id: String
}

type Position {
  createdAt: DateTime!
  event: Event!
  eventId: String!
  id: String!
  money: Int
  position: String!
  updatedAt: DateTime!
  user: User!
  userEmail: String!
}

type PositionAvgAggregate {
  money: Float
}

input PositionAvgOrderByAggregateInput {
  money: SortOrder
}

type PositionCountAggregate {
  _all: Int!
  createdAt: Int!
  eventId: Int!
  id: Int!
  money: Int!
  position: Int!
  updatedAt: Int!
  userEmail: Int!
}

input PositionCountOrderByAggregateInput {
  createdAt: SortOrder
  eventId: SortOrder
  id: SortOrder
  money: SortOrder
  position: SortOrder
  updatedAt: SortOrder
  userEmail: SortOrder
}

input PositionCreateInput {
  createdAt: DateTime
  event: EventCreateNestedOneWithoutPostionsInput!
  id: String
  money: Int
  position: String!
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutPositionsInput!
}

input PositionCreateNestedManyWithoutEventInput {
  connect: [PositionWhereUniqueInput!]
  connectOrCreate: [PositionCreateOrConnectWithoutEventInput!]
  create: [PositionCreateWithoutEventInput!]
}

input PositionCreateNestedManyWithoutUserInput {
  connect: [PositionWhereUniqueInput!]
  connectOrCreate: [PositionCreateOrConnectWithoutUserInput!]
  create: [PositionCreateWithoutUserInput!]
}

input PositionCreateOrConnectWithoutEventInput {
  create: PositionCreateWithoutEventInput!
  where: PositionWhereUniqueInput!
}

input PositionCreateOrConnectWithoutUserInput {
  create: PositionCreateWithoutUserInput!
  where: PositionWhereUniqueInput!
}

input PositionCreateWithoutEventInput {
  createdAt: DateTime
  id: String
  money: Int
  position: String!
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutPositionsInput!
}

input PositionCreateWithoutUserInput {
  createdAt: DateTime
  event: EventCreateNestedOneWithoutPostionsInput!
  id: String
  money: Int
  position: String!
  updatedAt: DateTime
}

type PositionGroupBy {
  _avg: PositionAvgAggregate
  _count: PositionCountAggregate
  _max: PositionMaxAggregate
  _min: PositionMinAggregate
  _sum: PositionSumAggregate
  createdAt: DateTime!
  eventId: String!
  id: String!
  money: Int
  position: String!
  updatedAt: DateTime!
  userEmail: String!
}

input PositionListRelationFilter {
  every: PositionWhereInput
  none: PositionWhereInput
  some: PositionWhereInput
}

type PositionMaxAggregate {
  createdAt: DateTime
  eventId: String
  id: String
  money: Int
  position: String
  updatedAt: DateTime
  userEmail: String
}

input PositionMaxOrderByAggregateInput {
  createdAt: SortOrder
  eventId: SortOrder
  id: SortOrder
  money: SortOrder
  position: SortOrder
  updatedAt: SortOrder
  userEmail: SortOrder
}

type PositionMinAggregate {
  createdAt: DateTime
  eventId: String
  id: String
  money: Int
  position: String
  updatedAt: DateTime
  userEmail: String
}

input PositionMinOrderByAggregateInput {
  createdAt: SortOrder
  eventId: SortOrder
  id: SortOrder
  money: SortOrder
  position: SortOrder
  updatedAt: SortOrder
  userEmail: SortOrder
}

input PositionOrderByRelationAggregateInput {
  _count: SortOrder
}

input PositionOrderByWithAggregationInput {
  _avg: PositionAvgOrderByAggregateInput
  _count: PositionCountOrderByAggregateInput
  _max: PositionMaxOrderByAggregateInput
  _min: PositionMinOrderByAggregateInput
  _sum: PositionSumOrderByAggregateInput
  createdAt: SortOrder
  eventId: SortOrder
  id: SortOrder
  money: SortOrder
  position: SortOrder
  updatedAt: SortOrder
  userEmail: SortOrder
}

input PositionOrderByWithRelationInput {
  createdAt: SortOrder
  event: EventOrderByWithRelationInput
  eventId: SortOrder
  id: SortOrder
  money: SortOrder
  position: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userEmail: SortOrder
}

enum PositionScalarFieldEnum {
  createdAt
  eventId
  id
  money
  position
  updatedAt
  userEmail
}

input PositionScalarWhereInput {
  AND: [PositionScalarWhereInput!]
  NOT: [PositionScalarWhereInput!]
  OR: [PositionScalarWhereInput!]
  createdAt: DateTimeFilter
  eventId: StringFilter
  id: StringFilter
  money: IntNullableFilter
  position: StringFilter
  updatedAt: DateTimeFilter
  userEmail: StringFilter
}

input PositionScalarWhereWithAggregatesInput {
  AND: [PositionScalarWhereWithAggregatesInput!]
  NOT: [PositionScalarWhereWithAggregatesInput!]
  OR: [PositionScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  eventId: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  money: IntNullableWithAggregatesFilter
  position: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userEmail: StringWithAggregatesFilter
}

type PositionSumAggregate {
  money: Int
}

input PositionSumOrderByAggregateInput {
  money: SortOrder
}

input PositionUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  event: EventUpdateOneRequiredWithoutPostionsInput
  id: StringFieldUpdateOperationsInput
  money: NullableIntFieldUpdateOperationsInput
  position: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutPositionsInput
}

input PositionUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  money: NullableIntFieldUpdateOperationsInput
  position: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PositionUpdateManyWithWhereWithoutEventInput {
  data: PositionUpdateManyMutationInput!
  where: PositionScalarWhereInput!
}

input PositionUpdateManyWithWhereWithoutUserInput {
  data: PositionUpdateManyMutationInput!
  where: PositionScalarWhereInput!
}

input PositionUpdateManyWithoutEventInput {
  connect: [PositionWhereUniqueInput!]
  connectOrCreate: [PositionCreateOrConnectWithoutEventInput!]
  create: [PositionCreateWithoutEventInput!]
  delete: [PositionWhereUniqueInput!]
  deleteMany: [PositionScalarWhereInput!]
  disconnect: [PositionWhereUniqueInput!]
  set: [PositionWhereUniqueInput!]
  update: [PositionUpdateWithWhereUniqueWithoutEventInput!]
  updateMany: [PositionUpdateManyWithWhereWithoutEventInput!]
  upsert: [PositionUpsertWithWhereUniqueWithoutEventInput!]
}

input PositionUpdateManyWithoutUserInput {
  connect: [PositionWhereUniqueInput!]
  connectOrCreate: [PositionCreateOrConnectWithoutUserInput!]
  create: [PositionCreateWithoutUserInput!]
  delete: [PositionWhereUniqueInput!]
  deleteMany: [PositionScalarWhereInput!]
  disconnect: [PositionWhereUniqueInput!]
  set: [PositionWhereUniqueInput!]
  update: [PositionUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [PositionUpdateManyWithWhereWithoutUserInput!]
  upsert: [PositionUpsertWithWhereUniqueWithoutUserInput!]
}

input PositionUpdateWithWhereUniqueWithoutEventInput {
  data: PositionUpdateWithoutEventInput!
  where: PositionWhereUniqueInput!
}

input PositionUpdateWithWhereUniqueWithoutUserInput {
  data: PositionUpdateWithoutUserInput!
  where: PositionWhereUniqueInput!
}

input PositionUpdateWithoutEventInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  money: NullableIntFieldUpdateOperationsInput
  position: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutPositionsInput
}

input PositionUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  event: EventUpdateOneRequiredWithoutPostionsInput
  id: StringFieldUpdateOperationsInput
  money: NullableIntFieldUpdateOperationsInput
  position: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PositionUpsertWithWhereUniqueWithoutEventInput {
  create: PositionCreateWithoutEventInput!
  update: PositionUpdateWithoutEventInput!
  where: PositionWhereUniqueInput!
}

input PositionUpsertWithWhereUniqueWithoutUserInput {
  create: PositionCreateWithoutUserInput!
  update: PositionUpdateWithoutUserInput!
  where: PositionWhereUniqueInput!
}

input PositionWhereInput {
  AND: [PositionWhereInput!]
  NOT: [PositionWhereInput!]
  OR: [PositionWhereInput!]
  createdAt: DateTimeFilter
  event: EventRelationFilter
  eventId: StringFilter
  id: StringFilter
  money: IntNullableFilter
  position: StringFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userEmail: StringFilter
}

input PositionWhereUniqueInput {
  id: String
}

type Query {
  aggregateClub(cursor: ClubWhereUniqueInput, orderBy: [ClubOrderByWithRelationInput!], skip: Int, take: Int, where: ClubWhereInput): AggregateClub!
  aggregateClubCoordinator(cursor: ClubCoordinatorWhereUniqueInput, orderBy: [ClubCoordinatorOrderByWithRelationInput!], skip: Int, take: Int, where: ClubCoordinatorWhereInput): AggregateClubCoordinator!
  aggregateClubMember(cursor: ClubMemberWhereUniqueInput, orderBy: [ClubMemberOrderByWithRelationInput!], skip: Int, take: Int, where: ClubMemberWhereInput): AggregateClubMember!
  aggregateClubRank(cursor: ClubRankWhereUniqueInput, orderBy: [ClubRankOrderByWithRelationInput!], skip: Int, take: Int, where: ClubRankWhereInput): AggregateClubRank!
  aggregateEvent(cursor: EventWhereUniqueInput, orderBy: [EventOrderByWithRelationInput!], skip: Int, take: Int, where: EventWhereInput): AggregateEvent!
  aggregateOTP(cursor: OTPWhereUniqueInput, orderBy: [OTPOrderByWithRelationInput!], skip: Int, take: Int, where: OTPWhereInput): AggregateOTP!
  aggregatePosition(cursor: PositionWhereUniqueInput, orderBy: [PositionOrderByWithRelationInput!], skip: Int, take: Int, where: PositionWhereInput): AggregatePosition!
  aggregateRSVPEvent(cursor: RSVPEventWhereUniqueInput, orderBy: [RSVPEventOrderByWithRelationInput!], skip: Int, take: Int, where: RSVPEventWhereInput): AggregateRSVPEvent!
  aggregateStudentRank(cursor: StudentRankWhereUniqueInput, orderBy: [StudentRankOrderByWithRelationInput!], skip: Int, take: Int, where: StudentRankWhereInput): AggregateStudentRank!
  aggregateSubscription(cursor: SubscriptionWhereUniqueInput, orderBy: [SubscriptionOrderByWithRelationInput!], skip: Int, take: Int, where: SubscriptionWhereInput): AggregateSubscription!
  aggregateTag(cursor: TagWhereUniqueInput, orderBy: [TagOrderByWithRelationInput!], skip: Int, take: Int, where: TagWhereInput): AggregateTag!
  aggregateUser(cursor: UserWhereUniqueInput, orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): AggregateUser!
  aggregateVote(cursor: VoteWhereUniqueInput, orderBy: [VoteOrderByWithRelationInput!], skip: Int, take: Int, where: VoteWhereInput): AggregateVote!
  club(where: ClubWhereUniqueInput!): Club
  clubCoordinator(where: ClubCoordinatorWhereUniqueInput!): ClubCoordinator
  clubCoordinators(cursor: ClubCoordinatorWhereUniqueInput, distinct: [ClubCoordinatorScalarFieldEnum!], orderBy: [ClubCoordinatorOrderByWithRelationInput!], skip: Int, take: Int, where: ClubCoordinatorWhereInput): [ClubCoordinator!]!
  clubMember(where: ClubMemberWhereUniqueInput!): ClubMember
  clubMembers(cursor: ClubMemberWhereUniqueInput, distinct: [ClubMemberScalarFieldEnum!], orderBy: [ClubMemberOrderByWithRelationInput!], skip: Int, take: Int, where: ClubMemberWhereInput): [ClubMember!]!
  clubRank(where: ClubRankWhereUniqueInput!): ClubRank
  clubRanks(cursor: ClubRankWhereUniqueInput, distinct: [ClubRankScalarFieldEnum!], orderBy: [ClubRankOrderByWithRelationInput!], skip: Int, take: Int, where: ClubRankWhereInput): [ClubRank!]!
  clubs(cursor: ClubWhereUniqueInput, distinct: [ClubScalarFieldEnum!], orderBy: [ClubOrderByWithRelationInput!], skip: Int, take: Int, where: ClubWhereInput): [Club!]!
  event(where: EventWhereUniqueInput!): Event
  events(cursor: EventWhereUniqueInput, distinct: [EventScalarFieldEnum!], orderBy: [EventOrderByWithRelationInput!], skip: Int, take: Int, where: EventWhereInput): [Event!]!
  findFirstClub(cursor: ClubWhereUniqueInput, distinct: [ClubScalarFieldEnum!], orderBy: [ClubOrderByWithRelationInput!], skip: Int, take: Int, where: ClubWhereInput): Club
  findFirstClubCoordinator(cursor: ClubCoordinatorWhereUniqueInput, distinct: [ClubCoordinatorScalarFieldEnum!], orderBy: [ClubCoordinatorOrderByWithRelationInput!], skip: Int, take: Int, where: ClubCoordinatorWhereInput): ClubCoordinator
  findFirstClubMember(cursor: ClubMemberWhereUniqueInput, distinct: [ClubMemberScalarFieldEnum!], orderBy: [ClubMemberOrderByWithRelationInput!], skip: Int, take: Int, where: ClubMemberWhereInput): ClubMember
  findFirstClubRank(cursor: ClubRankWhereUniqueInput, distinct: [ClubRankScalarFieldEnum!], orderBy: [ClubRankOrderByWithRelationInput!], skip: Int, take: Int, where: ClubRankWhereInput): ClubRank
  findFirstEvent(cursor: EventWhereUniqueInput, distinct: [EventScalarFieldEnum!], orderBy: [EventOrderByWithRelationInput!], skip: Int, take: Int, where: EventWhereInput): Event
  findFirstOTP(cursor: OTPWhereUniqueInput, distinct: [OTPScalarFieldEnum!], orderBy: [OTPOrderByWithRelationInput!], skip: Int, take: Int, where: OTPWhereInput): OTP
  findFirstPosition(cursor: PositionWhereUniqueInput, distinct: [PositionScalarFieldEnum!], orderBy: [PositionOrderByWithRelationInput!], skip: Int, take: Int, where: PositionWhereInput): Position
  findFirstRSVPEvent(cursor: RSVPEventWhereUniqueInput, distinct: [RSVPEventScalarFieldEnum!], orderBy: [RSVPEventOrderByWithRelationInput!], skip: Int, take: Int, where: RSVPEventWhereInput): RSVPEvent
  findFirstStudentRank(cursor: StudentRankWhereUniqueInput, distinct: [StudentRankScalarFieldEnum!], orderBy: [StudentRankOrderByWithRelationInput!], skip: Int, take: Int, where: StudentRankWhereInput): StudentRank
  findFirstSubscription(cursor: SubscriptionWhereUniqueInput, distinct: [SubscriptionScalarFieldEnum!], orderBy: [SubscriptionOrderByWithRelationInput!], skip: Int, take: Int, where: SubscriptionWhereInput): Subscription
  findFirstTag(cursor: TagWhereUniqueInput, distinct: [TagScalarFieldEnum!], orderBy: [TagOrderByWithRelationInput!], skip: Int, take: Int, where: TagWhereInput): Tag
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User
  findFirstVote(cursor: VoteWhereUniqueInput, distinct: [VoteScalarFieldEnum!], orderBy: [VoteOrderByWithRelationInput!], skip: Int, take: Int, where: VoteWhereInput): Vote
  groupByClub(by: [ClubScalarFieldEnum!]!, having: ClubScalarWhereWithAggregatesInput, orderBy: [ClubOrderByWithAggregationInput!], skip: Int, take: Int, where: ClubWhereInput): [ClubGroupBy!]!
  groupByClubCoordinator(by: [ClubCoordinatorScalarFieldEnum!]!, having: ClubCoordinatorScalarWhereWithAggregatesInput, orderBy: [ClubCoordinatorOrderByWithAggregationInput!], skip: Int, take: Int, where: ClubCoordinatorWhereInput): [ClubCoordinatorGroupBy!]!
  groupByClubMember(by: [ClubMemberScalarFieldEnum!]!, having: ClubMemberScalarWhereWithAggregatesInput, orderBy: [ClubMemberOrderByWithAggregationInput!], skip: Int, take: Int, where: ClubMemberWhereInput): [ClubMemberGroupBy!]!
  groupByClubRank(by: [ClubRankScalarFieldEnum!]!, having: ClubRankScalarWhereWithAggregatesInput, orderBy: [ClubRankOrderByWithAggregationInput!], skip: Int, take: Int, where: ClubRankWhereInput): [ClubRankGroupBy!]!
  groupByEvent(by: [EventScalarFieldEnum!]!, having: EventScalarWhereWithAggregatesInput, orderBy: [EventOrderByWithAggregationInput!], skip: Int, take: Int, where: EventWhereInput): [EventGroupBy!]!
  groupByOTP(by: [OTPScalarFieldEnum!]!, having: OTPScalarWhereWithAggregatesInput, orderBy: [OTPOrderByWithAggregationInput!], skip: Int, take: Int, where: OTPWhereInput): [OTPGroupBy!]!
  groupByPosition(by: [PositionScalarFieldEnum!]!, having: PositionScalarWhereWithAggregatesInput, orderBy: [PositionOrderByWithAggregationInput!], skip: Int, take: Int, where: PositionWhereInput): [PositionGroupBy!]!
  groupByRSVPEvent(by: [RSVPEventScalarFieldEnum!]!, having: RSVPEventScalarWhereWithAggregatesInput, orderBy: [RSVPEventOrderByWithAggregationInput!], skip: Int, take: Int, where: RSVPEventWhereInput): [RSVPEventGroupBy!]!
  groupByStudentRank(by: [StudentRankScalarFieldEnum!]!, having: StudentRankScalarWhereWithAggregatesInput, orderBy: [StudentRankOrderByWithAggregationInput!], skip: Int, take: Int, where: StudentRankWhereInput): [StudentRankGroupBy!]!
  groupBySubscription(by: [SubscriptionScalarFieldEnum!]!, having: SubscriptionScalarWhereWithAggregatesInput, orderBy: [SubscriptionOrderByWithAggregationInput!], skip: Int, take: Int, where: SubscriptionWhereInput): [SubscriptionGroupBy!]!
  groupByTag(by: [TagScalarFieldEnum!]!, having: TagScalarWhereWithAggregatesInput, orderBy: [TagOrderByWithAggregationInput!], skip: Int, take: Int, where: TagWhereInput): [TagGroupBy!]!
  groupByUser(by: [UserScalarFieldEnum!]!, having: UserScalarWhereWithAggregatesInput, orderBy: [UserOrderByWithAggregationInput!], skip: Int, take: Int, where: UserWhereInput): [UserGroupBy!]!
  groupByVote(by: [VoteScalarFieldEnum!]!, having: VoteScalarWhereWithAggregatesInput, orderBy: [VoteOrderByWithAggregationInput!], skip: Int, take: Int, where: VoteWhereInput): [VoteGroupBy!]!
  oTP(where: OTPWhereUniqueInput!): OTP
  oTPS(cursor: OTPWhereUniqueInput, distinct: [OTPScalarFieldEnum!], orderBy: [OTPOrderByWithRelationInput!], skip: Int, take: Int, where: OTPWhereInput): [OTP!]!
  position(where: PositionWhereUniqueInput!): Position
  positions(cursor: PositionWhereUniqueInput, distinct: [PositionScalarFieldEnum!], orderBy: [PositionOrderByWithRelationInput!], skip: Int, take: Int, where: PositionWhereInput): [Position!]!
  rSVPEvent(where: RSVPEventWhereUniqueInput!): RSVPEvent
  rSVPEvents(cursor: RSVPEventWhereUniqueInput, distinct: [RSVPEventScalarFieldEnum!], orderBy: [RSVPEventOrderByWithRelationInput!], skip: Int, take: Int, where: RSVPEventWhereInput): [RSVPEvent!]!
  studentRank(where: StudentRankWhereUniqueInput!): StudentRank
  studentRanks(cursor: StudentRankWhereUniqueInput, distinct: [StudentRankScalarFieldEnum!], orderBy: [StudentRankOrderByWithRelationInput!], skip: Int, take: Int, where: StudentRankWhereInput): [StudentRank!]!
  subscription(where: SubscriptionWhereUniqueInput!): Subscription
  subscriptions(cursor: SubscriptionWhereUniqueInput, distinct: [SubscriptionScalarFieldEnum!], orderBy: [SubscriptionOrderByWithRelationInput!], skip: Int, take: Int, where: SubscriptionWhereInput): [Subscription!]!
  tag(where: TagWhereUniqueInput!): Tag
  tags(cursor: TagWhereUniqueInput, distinct: [TagScalarFieldEnum!], orderBy: [TagOrderByWithRelationInput!], skip: Int, take: Int, where: TagWhereInput): [Tag!]!
  user(where: UserWhereUniqueInput!): User
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
  vote(where: VoteWhereUniqueInput!): Vote
  votes(cursor: VoteWhereUniqueInput, distinct: [VoteScalarFieldEnum!], orderBy: [VoteOrderByWithRelationInput!], skip: Int, take: Int, where: VoteWhereInput): [Vote!]!
}

type RSVPEvent {
  createdAt: DateTime!
  deletedAt: DateTime
  event: Event!
  eventId: String!
  user: User!
  userEmail: String!
}

type RSVPEventCountAggregate {
  _all: Int!
  createdAt: Int!
  deletedAt: Int!
  eventId: Int!
  userEmail: Int!
}

input RSVPEventCountOrderByAggregateInput {
  createdAt: SortOrder
  deletedAt: SortOrder
  eventId: SortOrder
  userEmail: SortOrder
}

input RSVPEventCreateInput {
  createdAt: DateTime
  deletedAt: DateTime
  event: EventCreateNestedOneWithoutRsvpEventInput!
  user: UserCreateNestedOneWithoutRsvpEventInput!
}

input RSVPEventCreateNestedManyWithoutEventInput {
  connect: [RSVPEventWhereUniqueInput!]
  connectOrCreate: [RSVPEventCreateOrConnectWithoutEventInput!]
  create: [RSVPEventCreateWithoutEventInput!]
}

input RSVPEventCreateNestedManyWithoutUserInput {
  connect: [RSVPEventWhereUniqueInput!]
  connectOrCreate: [RSVPEventCreateOrConnectWithoutUserInput!]
  create: [RSVPEventCreateWithoutUserInput!]
}

input RSVPEventCreateOrConnectWithoutEventInput {
  create: RSVPEventCreateWithoutEventInput!
  where: RSVPEventWhereUniqueInput!
}

input RSVPEventCreateOrConnectWithoutUserInput {
  create: RSVPEventCreateWithoutUserInput!
  where: RSVPEventWhereUniqueInput!
}

input RSVPEventCreateWithoutEventInput {
  createdAt: DateTime
  deletedAt: DateTime
  user: UserCreateNestedOneWithoutRsvpEventInput!
}

input RSVPEventCreateWithoutUserInput {
  createdAt: DateTime
  deletedAt: DateTime
  event: EventCreateNestedOneWithoutRsvpEventInput!
}

input RSVPEventEventIdUserEmailCompoundUniqueInput {
  eventId: String!
  userEmail: String!
}

type RSVPEventGroupBy {
  _count: RSVPEventCountAggregate
  _max: RSVPEventMaxAggregate
  _min: RSVPEventMinAggregate
  createdAt: DateTime!
  deletedAt: DateTime
  eventId: String!
  userEmail: String!
}

input RSVPEventListRelationFilter {
  every: RSVPEventWhereInput
  none: RSVPEventWhereInput
  some: RSVPEventWhereInput
}

type RSVPEventMaxAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  eventId: String
  userEmail: String
}

input RSVPEventMaxOrderByAggregateInput {
  createdAt: SortOrder
  deletedAt: SortOrder
  eventId: SortOrder
  userEmail: SortOrder
}

type RSVPEventMinAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  eventId: String
  userEmail: String
}

input RSVPEventMinOrderByAggregateInput {
  createdAt: SortOrder
  deletedAt: SortOrder
  eventId: SortOrder
  userEmail: SortOrder
}

input RSVPEventOrderByRelationAggregateInput {
  _count: SortOrder
}

input RSVPEventOrderByWithAggregationInput {
  _count: RSVPEventCountOrderByAggregateInput
  _max: RSVPEventMaxOrderByAggregateInput
  _min: RSVPEventMinOrderByAggregateInput
  createdAt: SortOrder
  deletedAt: SortOrder
  eventId: SortOrder
  userEmail: SortOrder
}

input RSVPEventOrderByWithRelationInput {
  createdAt: SortOrder
  deletedAt: SortOrder
  event: EventOrderByWithRelationInput
  eventId: SortOrder
  user: UserOrderByWithRelationInput
  userEmail: SortOrder
}

enum RSVPEventScalarFieldEnum {
  createdAt
  deletedAt
  eventId
  userEmail
}

input RSVPEventScalarWhereInput {
  AND: [RSVPEventScalarWhereInput!]
  NOT: [RSVPEventScalarWhereInput!]
  OR: [RSVPEventScalarWhereInput!]
  createdAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  eventId: StringFilter
  userEmail: StringFilter
}

input RSVPEventScalarWhereWithAggregatesInput {
  AND: [RSVPEventScalarWhereWithAggregatesInput!]
  NOT: [RSVPEventScalarWhereWithAggregatesInput!]
  OR: [RSVPEventScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  deletedAt: DateTimeNullableWithAggregatesFilter
  eventId: StringWithAggregatesFilter
  userEmail: StringWithAggregatesFilter
}

input RSVPEventUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  event: EventUpdateOneRequiredWithoutRsvpEventInput
  user: UserUpdateOneRequiredWithoutRsvpEventInput
}

input RSVPEventUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
}

input RSVPEventUpdateManyWithWhereWithoutEventInput {
  data: RSVPEventUpdateManyMutationInput!
  where: RSVPEventScalarWhereInput!
}

input RSVPEventUpdateManyWithWhereWithoutUserInput {
  data: RSVPEventUpdateManyMutationInput!
  where: RSVPEventScalarWhereInput!
}

input RSVPEventUpdateManyWithoutEventInput {
  connect: [RSVPEventWhereUniqueInput!]
  connectOrCreate: [RSVPEventCreateOrConnectWithoutEventInput!]
  create: [RSVPEventCreateWithoutEventInput!]
  delete: [RSVPEventWhereUniqueInput!]
  deleteMany: [RSVPEventScalarWhereInput!]
  disconnect: [RSVPEventWhereUniqueInput!]
  set: [RSVPEventWhereUniqueInput!]
  update: [RSVPEventUpdateWithWhereUniqueWithoutEventInput!]
  updateMany: [RSVPEventUpdateManyWithWhereWithoutEventInput!]
  upsert: [RSVPEventUpsertWithWhereUniqueWithoutEventInput!]
}

input RSVPEventUpdateManyWithoutUserInput {
  connect: [RSVPEventWhereUniqueInput!]
  connectOrCreate: [RSVPEventCreateOrConnectWithoutUserInput!]
  create: [RSVPEventCreateWithoutUserInput!]
  delete: [RSVPEventWhereUniqueInput!]
  deleteMany: [RSVPEventScalarWhereInput!]
  disconnect: [RSVPEventWhereUniqueInput!]
  set: [RSVPEventWhereUniqueInput!]
  update: [RSVPEventUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [RSVPEventUpdateManyWithWhereWithoutUserInput!]
  upsert: [RSVPEventUpsertWithWhereUniqueWithoutUserInput!]
}

input RSVPEventUpdateWithWhereUniqueWithoutEventInput {
  data: RSVPEventUpdateWithoutEventInput!
  where: RSVPEventWhereUniqueInput!
}

input RSVPEventUpdateWithWhereUniqueWithoutUserInput {
  data: RSVPEventUpdateWithoutUserInput!
  where: RSVPEventWhereUniqueInput!
}

input RSVPEventUpdateWithoutEventInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutRsvpEventInput
}

input RSVPEventUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  event: EventUpdateOneRequiredWithoutRsvpEventInput
}

input RSVPEventUpsertWithWhereUniqueWithoutEventInput {
  create: RSVPEventCreateWithoutEventInput!
  update: RSVPEventUpdateWithoutEventInput!
  where: RSVPEventWhereUniqueInput!
}

input RSVPEventUpsertWithWhereUniqueWithoutUserInput {
  create: RSVPEventCreateWithoutUserInput!
  update: RSVPEventUpdateWithoutUserInput!
  where: RSVPEventWhereUniqueInput!
}

input RSVPEventWhereInput {
  AND: [RSVPEventWhereInput!]
  NOT: [RSVPEventWhereInput!]
  OR: [RSVPEventWhereInput!]
  createdAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  event: EventRelationFilter
  eventId: StringFilter
  user: UserRelationFilter
  userEmail: StringFilter
}

input RSVPEventWhereUniqueInput {
  eventId_userEmail: RSVPEventEventIdUserEmailCompoundUniqueInput
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type StudentRank {
  eventCount: Int!
  firstCount: Int!
  id: String!
  moneyEarned: Int!
  rank: Int!
  secondCount: Int!
  thirdCount: Int!
  user: User!
  userEmail: String!
}

type StudentRankAvgAggregate {
  eventCount: Float
  firstCount: Float
  moneyEarned: Float
  rank: Float
  secondCount: Float
  thirdCount: Float
}

input StudentRankAvgOrderByAggregateInput {
  eventCount: SortOrder
  firstCount: SortOrder
  moneyEarned: SortOrder
  rank: SortOrder
  secondCount: SortOrder
  thirdCount: SortOrder
}

type StudentRankCountAggregate {
  _all: Int!
  eventCount: Int!
  firstCount: Int!
  id: Int!
  moneyEarned: Int!
  rank: Int!
  secondCount: Int!
  thirdCount: Int!
  userEmail: Int!
}

input StudentRankCountOrderByAggregateInput {
  eventCount: SortOrder
  firstCount: SortOrder
  id: SortOrder
  moneyEarned: SortOrder
  rank: SortOrder
  secondCount: SortOrder
  thirdCount: SortOrder
  userEmail: SortOrder
}

input StudentRankCreateInput {
  eventCount: Int!
  firstCount: Int!
  id: String
  moneyEarned: Int!
  rank: Int!
  secondCount: Int!
  thirdCount: Int!
  user: UserCreateNestedOneWithoutStudentRankInput!
}

input StudentRankCreateNestedOneWithoutUserInput {
  connect: StudentRankWhereUniqueInput
  connectOrCreate: StudentRankCreateOrConnectWithoutUserInput
  create: StudentRankCreateWithoutUserInput
}

input StudentRankCreateOrConnectWithoutUserInput {
  create: StudentRankCreateWithoutUserInput!
  where: StudentRankWhereUniqueInput!
}

input StudentRankCreateWithoutUserInput {
  eventCount: Int!
  firstCount: Int!
  id: String
  moneyEarned: Int!
  rank: Int!
  secondCount: Int!
  thirdCount: Int!
}

type StudentRankGroupBy {
  _avg: StudentRankAvgAggregate
  _count: StudentRankCountAggregate
  _max: StudentRankMaxAggregate
  _min: StudentRankMinAggregate
  _sum: StudentRankSumAggregate
  eventCount: Int!
  firstCount: Int!
  id: String!
  moneyEarned: Int!
  rank: Int!
  secondCount: Int!
  thirdCount: Int!
  userEmail: String!
}

type StudentRankMaxAggregate {
  eventCount: Int
  firstCount: Int
  id: String
  moneyEarned: Int
  rank: Int
  secondCount: Int
  thirdCount: Int
  userEmail: String
}

input StudentRankMaxOrderByAggregateInput {
  eventCount: SortOrder
  firstCount: SortOrder
  id: SortOrder
  moneyEarned: SortOrder
  rank: SortOrder
  secondCount: SortOrder
  thirdCount: SortOrder
  userEmail: SortOrder
}

type StudentRankMinAggregate {
  eventCount: Int
  firstCount: Int
  id: String
  moneyEarned: Int
  rank: Int
  secondCount: Int
  thirdCount: Int
  userEmail: String
}

input StudentRankMinOrderByAggregateInput {
  eventCount: SortOrder
  firstCount: SortOrder
  id: SortOrder
  moneyEarned: SortOrder
  rank: SortOrder
  secondCount: SortOrder
  thirdCount: SortOrder
  userEmail: SortOrder
}

input StudentRankOrderByWithAggregationInput {
  _avg: StudentRankAvgOrderByAggregateInput
  _count: StudentRankCountOrderByAggregateInput
  _max: StudentRankMaxOrderByAggregateInput
  _min: StudentRankMinOrderByAggregateInput
  _sum: StudentRankSumOrderByAggregateInput
  eventCount: SortOrder
  firstCount: SortOrder
  id: SortOrder
  moneyEarned: SortOrder
  rank: SortOrder
  secondCount: SortOrder
  thirdCount: SortOrder
  userEmail: SortOrder
}

input StudentRankOrderByWithRelationInput {
  eventCount: SortOrder
  firstCount: SortOrder
  id: SortOrder
  moneyEarned: SortOrder
  rank: SortOrder
  secondCount: SortOrder
  thirdCount: SortOrder
  user: UserOrderByWithRelationInput
  userEmail: SortOrder
}

input StudentRankRelationFilter {
  is: StudentRankWhereInput
  isNot: StudentRankWhereInput
}

enum StudentRankScalarFieldEnum {
  eventCount
  firstCount
  id
  moneyEarned
  rank
  secondCount
  thirdCount
  userEmail
}

input StudentRankScalarWhereWithAggregatesInput {
  AND: [StudentRankScalarWhereWithAggregatesInput!]
  NOT: [StudentRankScalarWhereWithAggregatesInput!]
  OR: [StudentRankScalarWhereWithAggregatesInput!]
  eventCount: IntWithAggregatesFilter
  firstCount: IntWithAggregatesFilter
  id: StringWithAggregatesFilter
  moneyEarned: IntWithAggregatesFilter
  rank: IntWithAggregatesFilter
  secondCount: IntWithAggregatesFilter
  thirdCount: IntWithAggregatesFilter
  userEmail: StringWithAggregatesFilter
}

type StudentRankSumAggregate {
  eventCount: Int
  firstCount: Int
  moneyEarned: Int
  rank: Int
  secondCount: Int
  thirdCount: Int
}

input StudentRankSumOrderByAggregateInput {
  eventCount: SortOrder
  firstCount: SortOrder
  moneyEarned: SortOrder
  rank: SortOrder
  secondCount: SortOrder
  thirdCount: SortOrder
}

input StudentRankUpdateInput {
  eventCount: IntFieldUpdateOperationsInput
  firstCount: IntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  moneyEarned: IntFieldUpdateOperationsInput
  rank: IntFieldUpdateOperationsInput
  secondCount: IntFieldUpdateOperationsInput
  thirdCount: IntFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutStudentRankInput
}

input StudentRankUpdateManyMutationInput {
  eventCount: IntFieldUpdateOperationsInput
  firstCount: IntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  moneyEarned: IntFieldUpdateOperationsInput
  rank: IntFieldUpdateOperationsInput
  secondCount: IntFieldUpdateOperationsInput
  thirdCount: IntFieldUpdateOperationsInput
}

input StudentRankUpdateOneWithoutUserInput {
  connect: StudentRankWhereUniqueInput
  connectOrCreate: StudentRankCreateOrConnectWithoutUserInput
  create: StudentRankCreateWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  update: StudentRankUpdateWithoutUserInput
  upsert: StudentRankUpsertWithoutUserInput
}

input StudentRankUpdateWithoutUserInput {
  eventCount: IntFieldUpdateOperationsInput
  firstCount: IntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  moneyEarned: IntFieldUpdateOperationsInput
  rank: IntFieldUpdateOperationsInput
  secondCount: IntFieldUpdateOperationsInput
  thirdCount: IntFieldUpdateOperationsInput
}

input StudentRankUpsertWithoutUserInput {
  create: StudentRankCreateWithoutUserInput!
  update: StudentRankUpdateWithoutUserInput!
}

input StudentRankWhereInput {
  AND: [StudentRankWhereInput!]
  NOT: [StudentRankWhereInput!]
  OR: [StudentRankWhereInput!]
  eventCount: IntFilter
  firstCount: IntFilter
  id: StringFilter
  moneyEarned: IntFilter
  rank: IntFilter
  secondCount: IntFilter
  thirdCount: IntFilter
  user: UserRelationFilter
  userEmail: StringFilter
}

input StudentRankWhereUniqueInput {
  id: String
  userEmail: String
}

type Subscription {
  club: Club!
  clubId: String!
  createdAt: DateTime!
  user: User!
  userEmail: String!
}

input SubscriptionClubIdUserEmailCompoundUniqueInput {
  clubId: String!
  userEmail: String!
}

type SubscriptionCountAggregate {
  _all: Int!
  clubId: Int!
  createdAt: Int!
  userEmail: Int!
}

input SubscriptionCountOrderByAggregateInput {
  clubId: SortOrder
  createdAt: SortOrder
  userEmail: SortOrder
}

input SubscriptionCreateInput {
  club: ClubCreateNestedOneWithoutSubscriptionInput!
  createdAt: DateTime
  user: UserCreateNestedOneWithoutSubscriptionInput!
}

input SubscriptionCreateNestedManyWithoutClubInput {
  connect: [SubscriptionWhereUniqueInput!]
  connectOrCreate: [SubscriptionCreateOrConnectWithoutClubInput!]
  create: [SubscriptionCreateWithoutClubInput!]
}

input SubscriptionCreateNestedManyWithoutUserInput {
  connect: [SubscriptionWhereUniqueInput!]
  connectOrCreate: [SubscriptionCreateOrConnectWithoutUserInput!]
  create: [SubscriptionCreateWithoutUserInput!]
}

input SubscriptionCreateOrConnectWithoutClubInput {
  create: SubscriptionCreateWithoutClubInput!
  where: SubscriptionWhereUniqueInput!
}

input SubscriptionCreateOrConnectWithoutUserInput {
  create: SubscriptionCreateWithoutUserInput!
  where: SubscriptionWhereUniqueInput!
}

input SubscriptionCreateWithoutClubInput {
  createdAt: DateTime
  user: UserCreateNestedOneWithoutSubscriptionInput!
}

input SubscriptionCreateWithoutUserInput {
  club: ClubCreateNestedOneWithoutSubscriptionInput!
  createdAt: DateTime
}

type SubscriptionGroupBy {
  _count: SubscriptionCountAggregate
  _max: SubscriptionMaxAggregate
  _min: SubscriptionMinAggregate
  clubId: String!
  createdAt: DateTime!
  userEmail: String!
}

input SubscriptionListRelationFilter {
  every: SubscriptionWhereInput
  none: SubscriptionWhereInput
  some: SubscriptionWhereInput
}

type SubscriptionMaxAggregate {
  clubId: String
  createdAt: DateTime
  userEmail: String
}

input SubscriptionMaxOrderByAggregateInput {
  clubId: SortOrder
  createdAt: SortOrder
  userEmail: SortOrder
}

type SubscriptionMinAggregate {
  clubId: String
  createdAt: DateTime
  userEmail: String
}

input SubscriptionMinOrderByAggregateInput {
  clubId: SortOrder
  createdAt: SortOrder
  userEmail: SortOrder
}

input SubscriptionOrderByRelationAggregateInput {
  _count: SortOrder
}

input SubscriptionOrderByWithAggregationInput {
  _count: SubscriptionCountOrderByAggregateInput
  _max: SubscriptionMaxOrderByAggregateInput
  _min: SubscriptionMinOrderByAggregateInput
  clubId: SortOrder
  createdAt: SortOrder
  userEmail: SortOrder
}

input SubscriptionOrderByWithRelationInput {
  club: ClubOrderByWithRelationInput
  clubId: SortOrder
  createdAt: SortOrder
  user: UserOrderByWithRelationInput
  userEmail: SortOrder
}

enum SubscriptionScalarFieldEnum {
  clubId
  createdAt
  userEmail
}

input SubscriptionScalarWhereInput {
  AND: [SubscriptionScalarWhereInput!]
  NOT: [SubscriptionScalarWhereInput!]
  OR: [SubscriptionScalarWhereInput!]
  clubId: StringFilter
  createdAt: DateTimeFilter
  userEmail: StringFilter
}

input SubscriptionScalarWhereWithAggregatesInput {
  AND: [SubscriptionScalarWhereWithAggregatesInput!]
  NOT: [SubscriptionScalarWhereWithAggregatesInput!]
  OR: [SubscriptionScalarWhereWithAggregatesInput!]
  clubId: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  userEmail: StringWithAggregatesFilter
}

input SubscriptionUpdateInput {
  club: ClubUpdateOneRequiredWithoutSubscriptionInput
  createdAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutSubscriptionInput
}

input SubscriptionUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
}

input SubscriptionUpdateManyWithWhereWithoutClubInput {
  data: SubscriptionUpdateManyMutationInput!
  where: SubscriptionScalarWhereInput!
}

input SubscriptionUpdateManyWithWhereWithoutUserInput {
  data: SubscriptionUpdateManyMutationInput!
  where: SubscriptionScalarWhereInput!
}

input SubscriptionUpdateManyWithoutClubInput {
  connect: [SubscriptionWhereUniqueInput!]
  connectOrCreate: [SubscriptionCreateOrConnectWithoutClubInput!]
  create: [SubscriptionCreateWithoutClubInput!]
  delete: [SubscriptionWhereUniqueInput!]
  deleteMany: [SubscriptionScalarWhereInput!]
  disconnect: [SubscriptionWhereUniqueInput!]
  set: [SubscriptionWhereUniqueInput!]
  update: [SubscriptionUpdateWithWhereUniqueWithoutClubInput!]
  updateMany: [SubscriptionUpdateManyWithWhereWithoutClubInput!]
  upsert: [SubscriptionUpsertWithWhereUniqueWithoutClubInput!]
}

input SubscriptionUpdateManyWithoutUserInput {
  connect: [SubscriptionWhereUniqueInput!]
  connectOrCreate: [SubscriptionCreateOrConnectWithoutUserInput!]
  create: [SubscriptionCreateWithoutUserInput!]
  delete: [SubscriptionWhereUniqueInput!]
  deleteMany: [SubscriptionScalarWhereInput!]
  disconnect: [SubscriptionWhereUniqueInput!]
  set: [SubscriptionWhereUniqueInput!]
  update: [SubscriptionUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [SubscriptionUpdateManyWithWhereWithoutUserInput!]
  upsert: [SubscriptionUpsertWithWhereUniqueWithoutUserInput!]
}

input SubscriptionUpdateWithWhereUniqueWithoutClubInput {
  data: SubscriptionUpdateWithoutClubInput!
  where: SubscriptionWhereUniqueInput!
}

input SubscriptionUpdateWithWhereUniqueWithoutUserInput {
  data: SubscriptionUpdateWithoutUserInput!
  where: SubscriptionWhereUniqueInput!
}

input SubscriptionUpdateWithoutClubInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutSubscriptionInput
}

input SubscriptionUpdateWithoutUserInput {
  club: ClubUpdateOneRequiredWithoutSubscriptionInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input SubscriptionUpsertWithWhereUniqueWithoutClubInput {
  create: SubscriptionCreateWithoutClubInput!
  update: SubscriptionUpdateWithoutClubInput!
  where: SubscriptionWhereUniqueInput!
}

input SubscriptionUpsertWithWhereUniqueWithoutUserInput {
  create: SubscriptionCreateWithoutUserInput!
  update: SubscriptionUpdateWithoutUserInput!
  where: SubscriptionWhereUniqueInput!
}

input SubscriptionWhereInput {
  AND: [SubscriptionWhereInput!]
  NOT: [SubscriptionWhereInput!]
  OR: [SubscriptionWhereInput!]
  club: ClubRelationFilter
  clubId: StringFilter
  createdAt: DateTimeFilter
  user: UserRelationFilter
  userEmail: StringFilter
}

input SubscriptionWhereUniqueInput {
  clubId_userEmail: SubscriptionClubIdUserEmailCompoundUniqueInput
}

type Tag {
  _count: TagCount
  clubs(cursor: ClubWhereUniqueInput, distinct: [ClubScalarFieldEnum!], orderBy: [ClubOrderByWithRelationInput!], skip: Int, take: Int, where: ClubWhereInput): [Club!]!
  createdAt: DateTime!
  id: String!
  name: String!
  updatedAt: DateTime!
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

type TagCount {
  clubs: Int!
  users: Int!
}

type TagCountAggregate {
  _all: Int!
  createdAt: Int!
  id: Int!
  name: Int!
  updatedAt: Int!
}

input TagCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input TagCreateInput {
  clubs: ClubCreateNestedManyWithoutTagsInput
  createdAt: DateTime
  id: String
  name: String!
  updatedAt: DateTime
  users: UserCreateNestedManyWithoutTagsInput
}

input TagCreateNestedManyWithoutClubsInput {
  connect: [TagWhereUniqueInput!]
  connectOrCreate: [TagCreateOrConnectWithoutClubsInput!]
  create: [TagCreateWithoutClubsInput!]
}

input TagCreateNestedManyWithoutUsersInput {
  connect: [TagWhereUniqueInput!]
  connectOrCreate: [TagCreateOrConnectWithoutUsersInput!]
  create: [TagCreateWithoutUsersInput!]
}

input TagCreateOrConnectWithoutClubsInput {
  create: TagCreateWithoutClubsInput!
  where: TagWhereUniqueInput!
}

input TagCreateOrConnectWithoutUsersInput {
  create: TagCreateWithoutUsersInput!
  where: TagWhereUniqueInput!
}

input TagCreateWithoutClubsInput {
  createdAt: DateTime
  id: String
  name: String!
  updatedAt: DateTime
  users: UserCreateNestedManyWithoutTagsInput
}

input TagCreateWithoutUsersInput {
  clubs: ClubCreateNestedManyWithoutTagsInput
  createdAt: DateTime
  id: String
  name: String!
  updatedAt: DateTime
}

type TagGroupBy {
  _count: TagCountAggregate
  _max: TagMaxAggregate
  _min: TagMinAggregate
  createdAt: DateTime!
  id: String!
  name: String!
  updatedAt: DateTime!
}

input TagListRelationFilter {
  every: TagWhereInput
  none: TagWhereInput
  some: TagWhereInput
}

type TagMaxAggregate {
  createdAt: DateTime
  id: String
  name: String
  updatedAt: DateTime
}

input TagMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

type TagMinAggregate {
  createdAt: DateTime
  id: String
  name: String
  updatedAt: DateTime
}

input TagMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input TagOrderByRelationAggregateInput {
  _count: SortOrder
}

input TagOrderByWithAggregationInput {
  _count: TagCountOrderByAggregateInput
  _max: TagMaxOrderByAggregateInput
  _min: TagMinOrderByAggregateInput
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input TagOrderByWithRelationInput {
  clubs: ClubOrderByRelationAggregateInput
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  users: UserOrderByRelationAggregateInput
}

enum TagScalarFieldEnum {
  createdAt
  id
  name
  updatedAt
}

input TagScalarWhereInput {
  AND: [TagScalarWhereInput!]
  NOT: [TagScalarWhereInput!]
  OR: [TagScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

input TagScalarWhereWithAggregatesInput {
  AND: [TagScalarWhereWithAggregatesInput!]
  NOT: [TagScalarWhereWithAggregatesInput!]
  OR: [TagScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input TagUpdateInput {
  clubs: ClubUpdateManyWithoutTagsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  users: UserUpdateManyWithoutTagsInput
}

input TagUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TagUpdateManyWithWhereWithoutClubsInput {
  data: TagUpdateManyMutationInput!
  where: TagScalarWhereInput!
}

input TagUpdateManyWithWhereWithoutUsersInput {
  data: TagUpdateManyMutationInput!
  where: TagScalarWhereInput!
}

input TagUpdateManyWithoutClubsInput {
  connect: [TagWhereUniqueInput!]
  connectOrCreate: [TagCreateOrConnectWithoutClubsInput!]
  create: [TagCreateWithoutClubsInput!]
  delete: [TagWhereUniqueInput!]
  deleteMany: [TagScalarWhereInput!]
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutClubsInput!]
  updateMany: [TagUpdateManyWithWhereWithoutClubsInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutClubsInput!]
}

input TagUpdateManyWithoutUsersInput {
  connect: [TagWhereUniqueInput!]
  connectOrCreate: [TagCreateOrConnectWithoutUsersInput!]
  create: [TagCreateWithoutUsersInput!]
  delete: [TagWhereUniqueInput!]
  deleteMany: [TagScalarWhereInput!]
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutUsersInput!]
  updateMany: [TagUpdateManyWithWhereWithoutUsersInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutUsersInput!]
}

input TagUpdateWithWhereUniqueWithoutClubsInput {
  data: TagUpdateWithoutClubsInput!
  where: TagWhereUniqueInput!
}

input TagUpdateWithWhereUniqueWithoutUsersInput {
  data: TagUpdateWithoutUsersInput!
  where: TagWhereUniqueInput!
}

input TagUpdateWithoutClubsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  users: UserUpdateManyWithoutTagsInput
}

input TagUpdateWithoutUsersInput {
  clubs: ClubUpdateManyWithoutTagsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TagUpsertWithWhereUniqueWithoutClubsInput {
  create: TagCreateWithoutClubsInput!
  update: TagUpdateWithoutClubsInput!
  where: TagWhereUniqueInput!
}

input TagUpsertWithWhereUniqueWithoutUsersInput {
  create: TagCreateWithoutUsersInput!
  update: TagUpdateWithoutUsersInput!
  where: TagWhereUniqueInput!
}

input TagWhereInput {
  AND: [TagWhereInput!]
  NOT: [TagWhereInput!]
  OR: [TagWhereInput!]
  clubs: ClubListRelationFilter
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilter
  updatedAt: DateTimeFilter
  users: UserListRelationFilter
}

input TagWhereUniqueInput {
  id: String
}

type User {
  _count: UserCount
  clubCoordinator(cursor: ClubCoordinatorWhereUniqueInput, distinct: [ClubCoordinatorScalarFieldEnum!], orderBy: [ClubCoordinatorOrderByWithRelationInput!], skip: Int, take: Int, where: ClubCoordinatorWhereInput): [ClubCoordinator!]!
  clubMember(cursor: ClubMemberWhereUniqueInput, distinct: [ClubMemberScalarFieldEnum!], orderBy: [ClubMemberOrderByWithRelationInput!], skip: Int, take: Int, where: ClubMemberWhereInput): [ClubMember!]!
  createdAt: DateTime!
  deletedAt: DateTime
  email: String!
  isOnBoarded: Boolean!
  name: String!
  positions(cursor: PositionWhereUniqueInput, distinct: [PositionScalarFieldEnum!], orderBy: [PositionOrderByWithRelationInput!], skip: Int, take: Int, where: PositionWhereInput): [Position!]!
  rsvpEvent(cursor: RSVPEventWhereUniqueInput, distinct: [RSVPEventScalarFieldEnum!], orderBy: [RSVPEventOrderByWithRelationInput!], skip: Int, take: Int, where: RSVPEventWhereInput): [RSVPEvent!]!
  studentRank: StudentRank
  subscription(cursor: SubscriptionWhereUniqueInput, distinct: [SubscriptionScalarFieldEnum!], orderBy: [SubscriptionOrderByWithRelationInput!], skip: Int, take: Int, where: SubscriptionWhereInput): [Subscription!]!
  tags(cursor: TagWhereUniqueInput, distinct: [TagScalarFieldEnum!], orderBy: [TagOrderByWithRelationInput!], skip: Int, take: Int, where: TagWhereInput): [Tag!]!
  updatedAt: DateTime!
  votes(cursor: VoteWhereUniqueInput, distinct: [VoteScalarFieldEnum!], orderBy: [VoteOrderByWithRelationInput!], skip: Int, take: Int, where: VoteWhereInput): [Vote!]!
}

type UserCount {
  clubCoordinator: Int!
  clubMember: Int!
  positions: Int!
  rsvpEvent: Int!
  subscription: Int!
  tags: Int!
  votes: Int!
}

type UserCountAggregate {
  _all: Int!
  createdAt: Int!
  deletedAt: Int!
  email: Int!
  isOnBoarded: Int!
  name: Int!
  updatedAt: Int!
}

input UserCountOrderByAggregateInput {
  createdAt: SortOrder
  deletedAt: SortOrder
  email: SortOrder
  isOnBoarded: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input UserCreateInput {
  clubCoordinator: ClubCoordinatorCreateNestedManyWithoutUserInput
  clubMember: ClubMemberCreateNestedManyWithoutUserInput
  createdAt: DateTime
  deletedAt: DateTime
  email: String!
  isOnBoarded: Boolean!
  name: String!
  positions: PositionCreateNestedManyWithoutUserInput
  rsvpEvent: RSVPEventCreateNestedManyWithoutUserInput
  studentRank: StudentRankCreateNestedOneWithoutUserInput
  subscription: SubscriptionCreateNestedManyWithoutUserInput
  tags: TagCreateNestedManyWithoutUsersInput
  updatedAt: DateTime
  votes: VoteCreateNestedManyWithoutUserInput
}

input UserCreateNestedManyWithoutTagsInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutTagsInput!]
  create: [UserCreateWithoutTagsInput!]
}

input UserCreateNestedOneWithoutClubCoordinatorInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutClubCoordinatorInput
  create: UserCreateWithoutClubCoordinatorInput
}

input UserCreateNestedOneWithoutClubMemberInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutClubMemberInput
  create: UserCreateWithoutClubMemberInput
}

input UserCreateNestedOneWithoutPositionsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPositionsInput
  create: UserCreateWithoutPositionsInput
}

input UserCreateNestedOneWithoutRsvpEventInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutRsvpEventInput
  create: UserCreateWithoutRsvpEventInput
}

input UserCreateNestedOneWithoutStudentRankInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutStudentRankInput
  create: UserCreateWithoutStudentRankInput
}

input UserCreateNestedOneWithoutSubscriptionInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutSubscriptionInput
  create: UserCreateWithoutSubscriptionInput
}

input UserCreateNestedOneWithoutVotesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutVotesInput
  create: UserCreateWithoutVotesInput
}

input UserCreateOrConnectWithoutClubCoordinatorInput {
  create: UserCreateWithoutClubCoordinatorInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutClubMemberInput {
  create: UserCreateWithoutClubMemberInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutPositionsInput {
  create: UserCreateWithoutPositionsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutRsvpEventInput {
  create: UserCreateWithoutRsvpEventInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutStudentRankInput {
  create: UserCreateWithoutStudentRankInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutSubscriptionInput {
  create: UserCreateWithoutSubscriptionInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutTagsInput {
  create: UserCreateWithoutTagsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutVotesInput {
  create: UserCreateWithoutVotesInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutClubCoordinatorInput {
  clubMember: ClubMemberCreateNestedManyWithoutUserInput
  createdAt: DateTime
  deletedAt: DateTime
  email: String!
  isOnBoarded: Boolean!
  name: String!
  positions: PositionCreateNestedManyWithoutUserInput
  rsvpEvent: RSVPEventCreateNestedManyWithoutUserInput
  studentRank: StudentRankCreateNestedOneWithoutUserInput
  subscription: SubscriptionCreateNestedManyWithoutUserInput
  tags: TagCreateNestedManyWithoutUsersInput
  updatedAt: DateTime
  votes: VoteCreateNestedManyWithoutUserInput
}

input UserCreateWithoutClubMemberInput {
  clubCoordinator: ClubCoordinatorCreateNestedManyWithoutUserInput
  createdAt: DateTime
  deletedAt: DateTime
  email: String!
  isOnBoarded: Boolean!
  name: String!
  positions: PositionCreateNestedManyWithoutUserInput
  rsvpEvent: RSVPEventCreateNestedManyWithoutUserInput
  studentRank: StudentRankCreateNestedOneWithoutUserInput
  subscription: SubscriptionCreateNestedManyWithoutUserInput
  tags: TagCreateNestedManyWithoutUsersInput
  updatedAt: DateTime
  votes: VoteCreateNestedManyWithoutUserInput
}

input UserCreateWithoutPositionsInput {
  clubCoordinator: ClubCoordinatorCreateNestedManyWithoutUserInput
  clubMember: ClubMemberCreateNestedManyWithoutUserInput
  createdAt: DateTime
  deletedAt: DateTime
  email: String!
  isOnBoarded: Boolean!
  name: String!
  rsvpEvent: RSVPEventCreateNestedManyWithoutUserInput
  studentRank: StudentRankCreateNestedOneWithoutUserInput
  subscription: SubscriptionCreateNestedManyWithoutUserInput
  tags: TagCreateNestedManyWithoutUsersInput
  updatedAt: DateTime
  votes: VoteCreateNestedManyWithoutUserInput
}

input UserCreateWithoutRsvpEventInput {
  clubCoordinator: ClubCoordinatorCreateNestedManyWithoutUserInput
  clubMember: ClubMemberCreateNestedManyWithoutUserInput
  createdAt: DateTime
  deletedAt: DateTime
  email: String!
  isOnBoarded: Boolean!
  name: String!
  positions: PositionCreateNestedManyWithoutUserInput
  studentRank: StudentRankCreateNestedOneWithoutUserInput
  subscription: SubscriptionCreateNestedManyWithoutUserInput
  tags: TagCreateNestedManyWithoutUsersInput
  updatedAt: DateTime
  votes: VoteCreateNestedManyWithoutUserInput
}

input UserCreateWithoutStudentRankInput {
  clubCoordinator: ClubCoordinatorCreateNestedManyWithoutUserInput
  clubMember: ClubMemberCreateNestedManyWithoutUserInput
  createdAt: DateTime
  deletedAt: DateTime
  email: String!
  isOnBoarded: Boolean!
  name: String!
  positions: PositionCreateNestedManyWithoutUserInput
  rsvpEvent: RSVPEventCreateNestedManyWithoutUserInput
  subscription: SubscriptionCreateNestedManyWithoutUserInput
  tags: TagCreateNestedManyWithoutUsersInput
  updatedAt: DateTime
  votes: VoteCreateNestedManyWithoutUserInput
}

input UserCreateWithoutSubscriptionInput {
  clubCoordinator: ClubCoordinatorCreateNestedManyWithoutUserInput
  clubMember: ClubMemberCreateNestedManyWithoutUserInput
  createdAt: DateTime
  deletedAt: DateTime
  email: String!
  isOnBoarded: Boolean!
  name: String!
  positions: PositionCreateNestedManyWithoutUserInput
  rsvpEvent: RSVPEventCreateNestedManyWithoutUserInput
  studentRank: StudentRankCreateNestedOneWithoutUserInput
  tags: TagCreateNestedManyWithoutUsersInput
  updatedAt: DateTime
  votes: VoteCreateNestedManyWithoutUserInput
}

input UserCreateWithoutTagsInput {
  clubCoordinator: ClubCoordinatorCreateNestedManyWithoutUserInput
  clubMember: ClubMemberCreateNestedManyWithoutUserInput
  createdAt: DateTime
  deletedAt: DateTime
  email: String!
  isOnBoarded: Boolean!
  name: String!
  positions: PositionCreateNestedManyWithoutUserInput
  rsvpEvent: RSVPEventCreateNestedManyWithoutUserInput
  studentRank: StudentRankCreateNestedOneWithoutUserInput
  subscription: SubscriptionCreateNestedManyWithoutUserInput
  updatedAt: DateTime
  votes: VoteCreateNestedManyWithoutUserInput
}

input UserCreateWithoutVotesInput {
  clubCoordinator: ClubCoordinatorCreateNestedManyWithoutUserInput
  clubMember: ClubMemberCreateNestedManyWithoutUserInput
  createdAt: DateTime
  deletedAt: DateTime
  email: String!
  isOnBoarded: Boolean!
  name: String!
  positions: PositionCreateNestedManyWithoutUserInput
  rsvpEvent: RSVPEventCreateNestedManyWithoutUserInput
  studentRank: StudentRankCreateNestedOneWithoutUserInput
  subscription: SubscriptionCreateNestedManyWithoutUserInput
  tags: TagCreateNestedManyWithoutUsersInput
  updatedAt: DateTime
}

type UserGroupBy {
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  createdAt: DateTime!
  deletedAt: DateTime
  email: String!
  isOnBoarded: Boolean!
  name: String!
  updatedAt: DateTime!
}

input UserListRelationFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

type UserMaxAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  email: String
  isOnBoarded: Boolean
  name: String
  updatedAt: DateTime
}

input UserMaxOrderByAggregateInput {
  createdAt: SortOrder
  deletedAt: SortOrder
  email: SortOrder
  isOnBoarded: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

type UserMinAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  email: String
  isOnBoarded: Boolean
  name: String
  updatedAt: DateTime
}

input UserMinOrderByAggregateInput {
  createdAt: SortOrder
  deletedAt: SortOrder
  email: SortOrder
  isOnBoarded: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input UserOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserOrderByWithAggregationInput {
  _count: UserCountOrderByAggregateInput
  _max: UserMaxOrderByAggregateInput
  _min: UserMinOrderByAggregateInput
  createdAt: SortOrder
  deletedAt: SortOrder
  email: SortOrder
  isOnBoarded: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input UserOrderByWithRelationInput {
  clubCoordinator: ClubCoordinatorOrderByRelationAggregateInput
  clubMember: ClubMemberOrderByRelationAggregateInput
  createdAt: SortOrder
  deletedAt: SortOrder
  email: SortOrder
  isOnBoarded: SortOrder
  name: SortOrder
  positions: PositionOrderByRelationAggregateInput
  rsvpEvent: RSVPEventOrderByRelationAggregateInput
  studentRank: StudentRankOrderByWithRelationInput
  subscription: SubscriptionOrderByRelationAggregateInput
  tags: TagOrderByRelationAggregateInput
  updatedAt: SortOrder
  votes: VoteOrderByRelationAggregateInput
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  createdAt
  deletedAt
  email
  isOnBoarded
  name
  updatedAt
}

input UserScalarWhereInput {
  AND: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  createdAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  email: StringFilter
  isOnBoarded: BoolFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput!]
  NOT: [UserScalarWhereWithAggregatesInput!]
  OR: [UserScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  deletedAt: DateTimeNullableWithAggregatesFilter
  email: StringWithAggregatesFilter
  isOnBoarded: BoolWithAggregatesFilter
  name: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input UserUpdateInput {
  clubCoordinator: ClubCoordinatorUpdateManyWithoutUserInput
  clubMember: ClubMemberUpdateManyWithoutUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  isOnBoarded: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  positions: PositionUpdateManyWithoutUserInput
  rsvpEvent: RSVPEventUpdateManyWithoutUserInput
  studentRank: StudentRankUpdateOneWithoutUserInput
  subscription: SubscriptionUpdateManyWithoutUserInput
  tags: TagUpdateManyWithoutUsersInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  votes: VoteUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  isOnBoarded: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateManyWithWhereWithoutTagsInput {
  data: UserUpdateManyMutationInput!
  where: UserScalarWhereInput!
}

input UserUpdateManyWithoutTagsInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutTagsInput!]
  create: [UserCreateWithoutTagsInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutTagsInput!]
  updateMany: [UserUpdateManyWithWhereWithoutTagsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutTagsInput!]
}

input UserUpdateOneRequiredWithoutClubCoordinatorInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutClubCoordinatorInput
  create: UserCreateWithoutClubCoordinatorInput
  update: UserUpdateWithoutClubCoordinatorInput
  upsert: UserUpsertWithoutClubCoordinatorInput
}

input UserUpdateOneRequiredWithoutClubMemberInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutClubMemberInput
  create: UserCreateWithoutClubMemberInput
  update: UserUpdateWithoutClubMemberInput
  upsert: UserUpsertWithoutClubMemberInput
}

input UserUpdateOneRequiredWithoutPositionsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPositionsInput
  create: UserCreateWithoutPositionsInput
  update: UserUpdateWithoutPositionsInput
  upsert: UserUpsertWithoutPositionsInput
}

input UserUpdateOneRequiredWithoutRsvpEventInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutRsvpEventInput
  create: UserCreateWithoutRsvpEventInput
  update: UserUpdateWithoutRsvpEventInput
  upsert: UserUpsertWithoutRsvpEventInput
}

input UserUpdateOneRequiredWithoutStudentRankInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutStudentRankInput
  create: UserCreateWithoutStudentRankInput
  update: UserUpdateWithoutStudentRankInput
  upsert: UserUpsertWithoutStudentRankInput
}

input UserUpdateOneRequiredWithoutSubscriptionInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutSubscriptionInput
  create: UserCreateWithoutSubscriptionInput
  update: UserUpdateWithoutSubscriptionInput
  upsert: UserUpsertWithoutSubscriptionInput
}

input UserUpdateOneRequiredWithoutVotesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutVotesInput
  create: UserCreateWithoutVotesInput
  update: UserUpdateWithoutVotesInput
  upsert: UserUpsertWithoutVotesInput
}

input UserUpdateWithWhereUniqueWithoutTagsInput {
  data: UserUpdateWithoutTagsInput!
  where: UserWhereUniqueInput!
}

input UserUpdateWithoutClubCoordinatorInput {
  clubMember: ClubMemberUpdateManyWithoutUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  isOnBoarded: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  positions: PositionUpdateManyWithoutUserInput
  rsvpEvent: RSVPEventUpdateManyWithoutUserInput
  studentRank: StudentRankUpdateOneWithoutUserInput
  subscription: SubscriptionUpdateManyWithoutUserInput
  tags: TagUpdateManyWithoutUsersInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  votes: VoteUpdateManyWithoutUserInput
}

input UserUpdateWithoutClubMemberInput {
  clubCoordinator: ClubCoordinatorUpdateManyWithoutUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  isOnBoarded: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  positions: PositionUpdateManyWithoutUserInput
  rsvpEvent: RSVPEventUpdateManyWithoutUserInput
  studentRank: StudentRankUpdateOneWithoutUserInput
  subscription: SubscriptionUpdateManyWithoutUserInput
  tags: TagUpdateManyWithoutUsersInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  votes: VoteUpdateManyWithoutUserInput
}

input UserUpdateWithoutPositionsInput {
  clubCoordinator: ClubCoordinatorUpdateManyWithoutUserInput
  clubMember: ClubMemberUpdateManyWithoutUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  isOnBoarded: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  rsvpEvent: RSVPEventUpdateManyWithoutUserInput
  studentRank: StudentRankUpdateOneWithoutUserInput
  subscription: SubscriptionUpdateManyWithoutUserInput
  tags: TagUpdateManyWithoutUsersInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  votes: VoteUpdateManyWithoutUserInput
}

input UserUpdateWithoutRsvpEventInput {
  clubCoordinator: ClubCoordinatorUpdateManyWithoutUserInput
  clubMember: ClubMemberUpdateManyWithoutUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  isOnBoarded: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  positions: PositionUpdateManyWithoutUserInput
  studentRank: StudentRankUpdateOneWithoutUserInput
  subscription: SubscriptionUpdateManyWithoutUserInput
  tags: TagUpdateManyWithoutUsersInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  votes: VoteUpdateManyWithoutUserInput
}

input UserUpdateWithoutStudentRankInput {
  clubCoordinator: ClubCoordinatorUpdateManyWithoutUserInput
  clubMember: ClubMemberUpdateManyWithoutUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  isOnBoarded: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  positions: PositionUpdateManyWithoutUserInput
  rsvpEvent: RSVPEventUpdateManyWithoutUserInput
  subscription: SubscriptionUpdateManyWithoutUserInput
  tags: TagUpdateManyWithoutUsersInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  votes: VoteUpdateManyWithoutUserInput
}

input UserUpdateWithoutSubscriptionInput {
  clubCoordinator: ClubCoordinatorUpdateManyWithoutUserInput
  clubMember: ClubMemberUpdateManyWithoutUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  isOnBoarded: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  positions: PositionUpdateManyWithoutUserInput
  rsvpEvent: RSVPEventUpdateManyWithoutUserInput
  studentRank: StudentRankUpdateOneWithoutUserInput
  tags: TagUpdateManyWithoutUsersInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  votes: VoteUpdateManyWithoutUserInput
}

input UserUpdateWithoutTagsInput {
  clubCoordinator: ClubCoordinatorUpdateManyWithoutUserInput
  clubMember: ClubMemberUpdateManyWithoutUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  isOnBoarded: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  positions: PositionUpdateManyWithoutUserInput
  rsvpEvent: RSVPEventUpdateManyWithoutUserInput
  studentRank: StudentRankUpdateOneWithoutUserInput
  subscription: SubscriptionUpdateManyWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  votes: VoteUpdateManyWithoutUserInput
}

input UserUpdateWithoutVotesInput {
  clubCoordinator: ClubCoordinatorUpdateManyWithoutUserInput
  clubMember: ClubMemberUpdateManyWithoutUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  isOnBoarded: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  positions: PositionUpdateManyWithoutUserInput
  rsvpEvent: RSVPEventUpdateManyWithoutUserInput
  studentRank: StudentRankUpdateOneWithoutUserInput
  subscription: SubscriptionUpdateManyWithoutUserInput
  tags: TagUpdateManyWithoutUsersInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpsertWithWhereUniqueWithoutTagsInput {
  create: UserCreateWithoutTagsInput!
  update: UserUpdateWithoutTagsInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithoutClubCoordinatorInput {
  create: UserCreateWithoutClubCoordinatorInput!
  update: UserUpdateWithoutClubCoordinatorInput!
}

input UserUpsertWithoutClubMemberInput {
  create: UserCreateWithoutClubMemberInput!
  update: UserUpdateWithoutClubMemberInput!
}

input UserUpsertWithoutPositionsInput {
  create: UserCreateWithoutPositionsInput!
  update: UserUpdateWithoutPositionsInput!
}

input UserUpsertWithoutRsvpEventInput {
  create: UserCreateWithoutRsvpEventInput!
  update: UserUpdateWithoutRsvpEventInput!
}

input UserUpsertWithoutStudentRankInput {
  create: UserCreateWithoutStudentRankInput!
  update: UserUpdateWithoutStudentRankInput!
}

input UserUpsertWithoutSubscriptionInput {
  create: UserCreateWithoutSubscriptionInput!
  update: UserUpdateWithoutSubscriptionInput!
}

input UserUpsertWithoutVotesInput {
  create: UserCreateWithoutVotesInput!
  update: UserUpdateWithoutVotesInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  clubCoordinator: ClubCoordinatorListRelationFilter
  clubMember: ClubMemberListRelationFilter
  createdAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  email: StringFilter
  isOnBoarded: BoolFilter
  name: StringFilter
  positions: PositionListRelationFilter
  rsvpEvent: RSVPEventListRelationFilter
  studentRank: StudentRankRelationFilter
  subscription: SubscriptionListRelationFilter
  tags: TagListRelationFilter
  updatedAt: DateTimeFilter
  votes: VoteListRelationFilter
}

input UserWhereUniqueInput {
  email: String
}

type Vote {
  event: Event!
  eventId: String!
  user: User!
  userEmail: String!
  vote: Boolean!
}

type VoteCountAggregate {
  _all: Int!
  eventId: Int!
  userEmail: Int!
  vote: Int!
}

input VoteCountOrderByAggregateInput {
  eventId: SortOrder
  userEmail: SortOrder
  vote: SortOrder
}

input VoteCreateInput {
  event: EventCreateNestedOneWithoutVotesInput!
  user: UserCreateNestedOneWithoutVotesInput!
  vote: Boolean!
}

input VoteCreateNestedManyWithoutEventInput {
  connect: [VoteWhereUniqueInput!]
  connectOrCreate: [VoteCreateOrConnectWithoutEventInput!]
  create: [VoteCreateWithoutEventInput!]
}

input VoteCreateNestedManyWithoutUserInput {
  connect: [VoteWhereUniqueInput!]
  connectOrCreate: [VoteCreateOrConnectWithoutUserInput!]
  create: [VoteCreateWithoutUserInput!]
}

input VoteCreateOrConnectWithoutEventInput {
  create: VoteCreateWithoutEventInput!
  where: VoteWhereUniqueInput!
}

input VoteCreateOrConnectWithoutUserInput {
  create: VoteCreateWithoutUserInput!
  where: VoteWhereUniqueInput!
}

input VoteCreateWithoutEventInput {
  user: UserCreateNestedOneWithoutVotesInput!
  vote: Boolean!
}

input VoteCreateWithoutUserInput {
  event: EventCreateNestedOneWithoutVotesInput!
  vote: Boolean!
}

input VoteEventIdUserEmailCompoundUniqueInput {
  eventId: String!
  userEmail: String!
}

type VoteGroupBy {
  _count: VoteCountAggregate
  _max: VoteMaxAggregate
  _min: VoteMinAggregate
  eventId: String!
  userEmail: String!
  vote: Boolean!
}

input VoteListRelationFilter {
  every: VoteWhereInput
  none: VoteWhereInput
  some: VoteWhereInput
}

type VoteMaxAggregate {
  eventId: String
  userEmail: String
  vote: Boolean
}

input VoteMaxOrderByAggregateInput {
  eventId: SortOrder
  userEmail: SortOrder
  vote: SortOrder
}

type VoteMinAggregate {
  eventId: String
  userEmail: String
  vote: Boolean
}

input VoteMinOrderByAggregateInput {
  eventId: SortOrder
  userEmail: SortOrder
  vote: SortOrder
}

input VoteOrderByRelationAggregateInput {
  _count: SortOrder
}

input VoteOrderByWithAggregationInput {
  _count: VoteCountOrderByAggregateInput
  _max: VoteMaxOrderByAggregateInput
  _min: VoteMinOrderByAggregateInput
  eventId: SortOrder
  userEmail: SortOrder
  vote: SortOrder
}

input VoteOrderByWithRelationInput {
  event: EventOrderByWithRelationInput
  eventId: SortOrder
  user: UserOrderByWithRelationInput
  userEmail: SortOrder
  vote: SortOrder
}

enum VoteScalarFieldEnum {
  eventId
  userEmail
  vote
}

input VoteScalarWhereInput {
  AND: [VoteScalarWhereInput!]
  NOT: [VoteScalarWhereInput!]
  OR: [VoteScalarWhereInput!]
  eventId: StringFilter
  userEmail: StringFilter
  vote: BoolFilter
}

input VoteScalarWhereWithAggregatesInput {
  AND: [VoteScalarWhereWithAggregatesInput!]
  NOT: [VoteScalarWhereWithAggregatesInput!]
  OR: [VoteScalarWhereWithAggregatesInput!]
  eventId: StringWithAggregatesFilter
  userEmail: StringWithAggregatesFilter
  vote: BoolWithAggregatesFilter
}

input VoteUpdateInput {
  event: EventUpdateOneRequiredWithoutVotesInput
  user: UserUpdateOneRequiredWithoutVotesInput
  vote: BoolFieldUpdateOperationsInput
}

input VoteUpdateManyMutationInput {
  vote: BoolFieldUpdateOperationsInput
}

input VoteUpdateManyWithWhereWithoutEventInput {
  data: VoteUpdateManyMutationInput!
  where: VoteScalarWhereInput!
}

input VoteUpdateManyWithWhereWithoutUserInput {
  data: VoteUpdateManyMutationInput!
  where: VoteScalarWhereInput!
}

input VoteUpdateManyWithoutEventInput {
  connect: [VoteWhereUniqueInput!]
  connectOrCreate: [VoteCreateOrConnectWithoutEventInput!]
  create: [VoteCreateWithoutEventInput!]
  delete: [VoteWhereUniqueInput!]
  deleteMany: [VoteScalarWhereInput!]
  disconnect: [VoteWhereUniqueInput!]
  set: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithWhereUniqueWithoutEventInput!]
  updateMany: [VoteUpdateManyWithWhereWithoutEventInput!]
  upsert: [VoteUpsertWithWhereUniqueWithoutEventInput!]
}

input VoteUpdateManyWithoutUserInput {
  connect: [VoteWhereUniqueInput!]
  connectOrCreate: [VoteCreateOrConnectWithoutUserInput!]
  create: [VoteCreateWithoutUserInput!]
  delete: [VoteWhereUniqueInput!]
  deleteMany: [VoteScalarWhereInput!]
  disconnect: [VoteWhereUniqueInput!]
  set: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [VoteUpdateManyWithWhereWithoutUserInput!]
  upsert: [VoteUpsertWithWhereUniqueWithoutUserInput!]
}

input VoteUpdateWithWhereUniqueWithoutEventInput {
  data: VoteUpdateWithoutEventInput!
  where: VoteWhereUniqueInput!
}

input VoteUpdateWithWhereUniqueWithoutUserInput {
  data: VoteUpdateWithoutUserInput!
  where: VoteWhereUniqueInput!
}

input VoteUpdateWithoutEventInput {
  user: UserUpdateOneRequiredWithoutVotesInput
  vote: BoolFieldUpdateOperationsInput
}

input VoteUpdateWithoutUserInput {
  event: EventUpdateOneRequiredWithoutVotesInput
  vote: BoolFieldUpdateOperationsInput
}

input VoteUpsertWithWhereUniqueWithoutEventInput {
  create: VoteCreateWithoutEventInput!
  update: VoteUpdateWithoutEventInput!
  where: VoteWhereUniqueInput!
}

input VoteUpsertWithWhereUniqueWithoutUserInput {
  create: VoteCreateWithoutUserInput!
  update: VoteUpdateWithoutUserInput!
  where: VoteWhereUniqueInput!
}

input VoteWhereInput {
  AND: [VoteWhereInput!]
  NOT: [VoteWhereInput!]
  OR: [VoteWhereInput!]
  event: EventRelationFilter
  eventId: StringFilter
  user: UserRelationFilter
  userEmail: StringFilter
  vote: BoolFilter
}

input VoteWhereUniqueInput {
  eventId_userEmail: VoteEventIdUserEmailCompoundUniqueInput
}
