# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AffectedRowsOutput {
  count: Int!
}

type AggregateClub {
  _avg: ClubAvgAggregate
  _count: ClubCountAggregate
  _max: ClubMaxAggregate
  _min: ClubMinAggregate
  _sum: ClubSumAggregate
}

type AggregateClubCoordinator {
  _avg: ClubCoordinatorAvgAggregate
  _count: ClubCoordinatorCountAggregate
  _max: ClubCoordinatorMaxAggregate
  _min: ClubCoordinatorMinAggregate
  _sum: ClubCoordinatorSumAggregate
}

type AggregateClubEvent {
  _avg: ClubEventAvgAggregate
  _count: ClubEventCountAggregate
  _max: ClubEventMaxAggregate
  _min: ClubEventMinAggregate
  _sum: ClubEventSumAggregate
}

type AggregateClubMember {
  _avg: ClubMemberAvgAggregate
  _count: ClubMemberCountAggregate
  _max: ClubMemberMaxAggregate
  _min: ClubMemberMinAggregate
  _sum: ClubMemberSumAggregate
}

type AggregateClubNotification {
  _avg: ClubNotificationAvgAggregate
  _count: ClubNotificationCountAggregate
  _max: ClubNotificationMaxAggregate
  _min: ClubNotificationMinAggregate
  _sum: ClubNotificationSumAggregate
}

type AggregateClubRank {
  _avg: ClubRankAvgAggregate
  _count: ClubRankCountAggregate
  _max: ClubRankMaxAggregate
  _min: ClubRankMinAggregate
  _sum: ClubRankSumAggregate
}

type AggregateClubTag {
  _avg: ClubTagAvgAggregate
  _count: ClubTagCountAggregate
  _max: ClubTagMaxAggregate
  _min: ClubTagMinAggregate
  _sum: ClubTagSumAggregate
}

type AggregateEvent {
  _avg: EventAvgAggregate
  _count: EventCountAggregate
  _max: EventMaxAggregate
  _min: EventMinAggregate
  _sum: EventSumAggregate
}

type AggregateNotification {
  _avg: NotificationAvgAggregate
  _count: NotificationCountAggregate
  _max: NotificationMaxAggregate
  _min: NotificationMinAggregate
  _sum: NotificationSumAggregate
}

type AggregateOTP {
  _avg: OTPAvgAggregate
  _count: OTPCountAggregate
  _max: OTPMaxAggregate
  _min: OTPMinAggregate
  _sum: OTPSumAggregate
}

type AggregatePosition {
  _avg: PositionAvgAggregate
  _count: PositionCountAggregate
  _max: PositionMaxAggregate
  _min: PositionMinAggregate
  _sum: PositionSumAggregate
}

type AggregateRSVPEvent {
  _avg: RSVPEventAvgAggregate
  _count: RSVPEventCountAggregate
  _max: RSVPEventMaxAggregate
  _min: RSVPEventMinAggregate
  _sum: RSVPEventSumAggregate
}

type AggregateStudentRank {
  _avg: StudentRankAvgAggregate
  _count: StudentRankCountAggregate
  _max: StudentRankMaxAggregate
  _min: StudentRankMinAggregate
  _sum: StudentRankSumAggregate
}

type AggregateSubscription {
  _avg: SubscriptionAvgAggregate
  _count: SubscriptionCountAggregate
  _max: SubscriptionMaxAggregate
  _min: SubscriptionMinAggregate
  _sum: SubscriptionSumAggregate
}

type AggregateTag {
  _avg: TagAvgAggregate
  _count: TagCountAggregate
  _max: TagMaxAggregate
  _min: TagMinAggregate
  _sum: TagSumAggregate
}

type AggregateUser {
  _avg: UserAvgAggregate
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  _sum: UserSumAggregate
}

type AggregateUserNotification {
  _avg: UserNotificationAvgAggregate
  _count: UserNotificationCountAggregate
  _max: UserNotificationMaxAggregate
  _min: UserNotificationMinAggregate
  _sum: UserNotificationSumAggregate
}

type AggregateUserTag {
  _avg: UserTagAvgAggregate
  _count: UserTagCountAggregate
  _max: UserTagMaxAggregate
  _min: UserTagMinAggregate
  _sum: UserTagSumAggregate
}

type AggregateVote {
  _avg: VoteAvgAggregate
  _count: VoteCountAggregate
  _max: VoteMaxAggregate
  _min: VoteMinAggregate
  _sum: VoteSumAggregate
}

type Auth {
  token: String!
  user: User!
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

type Club {
  _count: ClubCount
  clubCoordinator(cursor: ClubCoordinatorWhereUniqueInput, distinct: [ClubCoordinatorScalarFieldEnum!], orderBy: [ClubCoordinatorOrderByWithRelationInput!], skip: Int, take: Int, where: ClubCoordinatorWhereInput): [ClubCoordinator!]!
  clubEvents(cursor: ClubEventWhereUniqueInput, distinct: [ClubEventScalarFieldEnum!], orderBy: [ClubEventOrderByWithRelationInput!], skip: Int, take: Int, where: ClubEventWhereInput): [ClubEvent!]!
  clubMember(cursor: ClubMemberWhereUniqueInput, distinct: [ClubMemberScalarFieldEnum!], orderBy: [ClubMemberOrderByWithRelationInput!], skip: Int, take: Int, where: ClubMemberWhereInput): [ClubMember!]!
  clubNotifications(cursor: ClubNotificationWhereUniqueInput, distinct: [ClubNotificationScalarFieldEnum!], orderBy: [ClubNotificationOrderByWithRelationInput!], skip: Int, take: Int, where: ClubNotificationWhereInput): [ClubNotification!]!
  clubRank: ClubRank
  clubtags(cursor: ClubTagWhereUniqueInput, distinct: [ClubTagScalarFieldEnum!], orderBy: [ClubTagOrderByWithRelationInput!], skip: Int, take: Int, where: ClubTagWhereInput): [ClubTag!]!
  createdAt: DateTime!
  deletedAt: DateTime
  description: String!
  id: Int!
  image: String!
  links: String!
  name: String!
  otp: OTP
  subscription(cursor: SubscriptionWhereUniqueInput, distinct: [SubscriptionScalarFieldEnum!], orderBy: [SubscriptionOrderByWithRelationInput!], skip: Int, take: Int, where: SubscriptionWhereInput): [Subscription!]!
  updatedAt: DateTime!
}

type ClubAvgAggregate {
  id: Float
}

input ClubAvgOrderByAggregateInput {
  id: SortOrder
}

type ClubCoordinator {
  club: Club!
  clubId: Int!
  createdAt: DateTime!
  deletedAt: DateTime
  id: Int!
  updatedAt: DateTime!
  user: User!
  userId: Int!
}

type ClubCoordinatorAvgAggregate {
  clubId: Float
  id: Float
  userId: Float
}

input ClubCoordinatorAvgOrderByAggregateInput {
  clubId: SortOrder
  id: SortOrder
  userId: SortOrder
}

input ClubCoordinatorClubIdUserIdCompoundUniqueInput {
  clubId: Int!
  userId: Int!
}

type ClubCoordinatorCountAggregate {
  _all: Int!
  clubId: Int!
  createdAt: Int!
  deletedAt: Int!
  id: Int!
  updatedAt: Int!
  userId: Int!
}

input ClubCoordinatorCountOrderByAggregateInput {
  clubId: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input ClubCoordinatorCreateInput {
  club: ClubCreateNestedOneWithoutClubCoordinatorInput!
  createdAt: DateTime
  deletedAt: DateTime
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutClubCoordinatorInput!
}

input ClubCoordinatorCreateManyClubInput {
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  updatedAt: DateTime
  userId: Int!
}

input ClubCoordinatorCreateManyClubInputEnvelope {
  data: [ClubCoordinatorCreateManyClubInput!]!
  skipDuplicates: Boolean
}

input ClubCoordinatorCreateManyInput {
  clubId: Int!
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  updatedAt: DateTime
  userId: Int!
}

input ClubCoordinatorCreateManyUserInput {
  clubId: Int!
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  updatedAt: DateTime
}

input ClubCoordinatorCreateManyUserInputEnvelope {
  data: [ClubCoordinatorCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input ClubCoordinatorCreateNestedManyWithoutClubInput {
  connect: [ClubCoordinatorWhereUniqueInput!]
  connectOrCreate: [ClubCoordinatorCreateOrConnectWithoutClubInput!]
  create: [ClubCoordinatorCreateWithoutClubInput!]
  createMany: ClubCoordinatorCreateManyClubInputEnvelope
}

input ClubCoordinatorCreateNestedManyWithoutUserInput {
  connect: [ClubCoordinatorWhereUniqueInput!]
  connectOrCreate: [ClubCoordinatorCreateOrConnectWithoutUserInput!]
  create: [ClubCoordinatorCreateWithoutUserInput!]
  createMany: ClubCoordinatorCreateManyUserInputEnvelope
}

input ClubCoordinatorCreateOrConnectWithoutClubInput {
  create: ClubCoordinatorCreateWithoutClubInput!
  where: ClubCoordinatorWhereUniqueInput!
}

input ClubCoordinatorCreateOrConnectWithoutUserInput {
  create: ClubCoordinatorCreateWithoutUserInput!
  where: ClubCoordinatorWhereUniqueInput!
}

input ClubCoordinatorCreateWithoutClubInput {
  createdAt: DateTime
  deletedAt: DateTime
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutClubCoordinatorInput!
}

input ClubCoordinatorCreateWithoutUserInput {
  club: ClubCreateNestedOneWithoutClubCoordinatorInput!
  createdAt: DateTime
  deletedAt: DateTime
  updatedAt: DateTime
}

type ClubCoordinatorGroupBy {
  _avg: ClubCoordinatorAvgAggregate
  _count: ClubCoordinatorCountAggregate
  _max: ClubCoordinatorMaxAggregate
  _min: ClubCoordinatorMinAggregate
  _sum: ClubCoordinatorSumAggregate
  clubId: Int!
  createdAt: DateTime!
  deletedAt: DateTime
  id: Int!
  updatedAt: DateTime!
  userId: Int!
}

input ClubCoordinatorListRelationFilter {
  every: ClubCoordinatorWhereInput
  none: ClubCoordinatorWhereInput
  some: ClubCoordinatorWhereInput
}

type ClubCoordinatorMaxAggregate {
  clubId: Int
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  updatedAt: DateTime
  userId: Int
}

input ClubCoordinatorMaxOrderByAggregateInput {
  clubId: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

type ClubCoordinatorMinAggregate {
  clubId: Int
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  updatedAt: DateTime
  userId: Int
}

input ClubCoordinatorMinOrderByAggregateInput {
  clubId: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input ClubCoordinatorOrderByRelationAggregateInput {
  _count: SortOrder
}

input ClubCoordinatorOrderByWithAggregationInput {
  _avg: ClubCoordinatorAvgOrderByAggregateInput
  _count: ClubCoordinatorCountOrderByAggregateInput
  _max: ClubCoordinatorMaxOrderByAggregateInput
  _min: ClubCoordinatorMinOrderByAggregateInput
  _sum: ClubCoordinatorSumOrderByAggregateInput
  clubId: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input ClubCoordinatorOrderByWithRelationInput {
  club: ClubOrderByWithRelationInput
  clubId: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum ClubCoordinatorScalarFieldEnum {
  clubId
  createdAt
  deletedAt
  id
  updatedAt
  userId
}

input ClubCoordinatorScalarWhereInput {
  AND: [ClubCoordinatorScalarWhereInput!]
  NOT: [ClubCoordinatorScalarWhereInput!]
  OR: [ClubCoordinatorScalarWhereInput!]
  clubId: IntFilter
  createdAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  id: IntFilter
  updatedAt: DateTimeFilter
  userId: IntFilter
}

input ClubCoordinatorScalarWhereWithAggregatesInput {
  AND: [ClubCoordinatorScalarWhereWithAggregatesInput!]
  NOT: [ClubCoordinatorScalarWhereWithAggregatesInput!]
  OR: [ClubCoordinatorScalarWhereWithAggregatesInput!]
  clubId: IntWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  deletedAt: DateTimeNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userId: IntWithAggregatesFilter
}

type ClubCoordinatorSumAggregate {
  clubId: Int
  id: Int
  userId: Int
}

input ClubCoordinatorSumOrderByAggregateInput {
  clubId: SortOrder
  id: SortOrder
  userId: SortOrder
}

input ClubCoordinatorUpdateInput {
  club: ClubUpdateOneRequiredWithoutClubCoordinatorInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutClubCoordinatorInput
}

input ClubCoordinatorUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClubCoordinatorUpdateManyWithWhereWithoutClubInput {
  data: ClubCoordinatorUpdateManyMutationInput!
  where: ClubCoordinatorScalarWhereInput!
}

input ClubCoordinatorUpdateManyWithWhereWithoutUserInput {
  data: ClubCoordinatorUpdateManyMutationInput!
  where: ClubCoordinatorScalarWhereInput!
}

input ClubCoordinatorUpdateManyWithoutClubInput {
  connect: [ClubCoordinatorWhereUniqueInput!]
  connectOrCreate: [ClubCoordinatorCreateOrConnectWithoutClubInput!]
  create: [ClubCoordinatorCreateWithoutClubInput!]
  createMany: ClubCoordinatorCreateManyClubInputEnvelope
  delete: [ClubCoordinatorWhereUniqueInput!]
  deleteMany: [ClubCoordinatorScalarWhereInput!]
  disconnect: [ClubCoordinatorWhereUniqueInput!]
  set: [ClubCoordinatorWhereUniqueInput!]
  update: [ClubCoordinatorUpdateWithWhereUniqueWithoutClubInput!]
  updateMany: [ClubCoordinatorUpdateManyWithWhereWithoutClubInput!]
  upsert: [ClubCoordinatorUpsertWithWhereUniqueWithoutClubInput!]
}

input ClubCoordinatorUpdateManyWithoutUserInput {
  connect: [ClubCoordinatorWhereUniqueInput!]
  connectOrCreate: [ClubCoordinatorCreateOrConnectWithoutUserInput!]
  create: [ClubCoordinatorCreateWithoutUserInput!]
  createMany: ClubCoordinatorCreateManyUserInputEnvelope
  delete: [ClubCoordinatorWhereUniqueInput!]
  deleteMany: [ClubCoordinatorScalarWhereInput!]
  disconnect: [ClubCoordinatorWhereUniqueInput!]
  set: [ClubCoordinatorWhereUniqueInput!]
  update: [ClubCoordinatorUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ClubCoordinatorUpdateManyWithWhereWithoutUserInput!]
  upsert: [ClubCoordinatorUpsertWithWhereUniqueWithoutUserInput!]
}

input ClubCoordinatorUpdateWithWhereUniqueWithoutClubInput {
  data: ClubCoordinatorUpdateWithoutClubInput!
  where: ClubCoordinatorWhereUniqueInput!
}

input ClubCoordinatorUpdateWithWhereUniqueWithoutUserInput {
  data: ClubCoordinatorUpdateWithoutUserInput!
  where: ClubCoordinatorWhereUniqueInput!
}

input ClubCoordinatorUpdateWithoutClubInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutClubCoordinatorInput
}

input ClubCoordinatorUpdateWithoutUserInput {
  club: ClubUpdateOneRequiredWithoutClubCoordinatorInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClubCoordinatorUpsertWithWhereUniqueWithoutClubInput {
  create: ClubCoordinatorCreateWithoutClubInput!
  update: ClubCoordinatorUpdateWithoutClubInput!
  where: ClubCoordinatorWhereUniqueInput!
}

input ClubCoordinatorUpsertWithWhereUniqueWithoutUserInput {
  create: ClubCoordinatorCreateWithoutUserInput!
  update: ClubCoordinatorUpdateWithoutUserInput!
  where: ClubCoordinatorWhereUniqueInput!
}

input ClubCoordinatorWhereInput {
  AND: [ClubCoordinatorWhereInput!]
  NOT: [ClubCoordinatorWhereInput!]
  OR: [ClubCoordinatorWhereInput!]
  club: ClubRelationFilter
  clubId: IntFilter
  createdAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  id: IntFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: IntFilter
}

input ClubCoordinatorWhereUniqueInput {
  clubId_userId: ClubCoordinatorClubIdUserIdCompoundUniqueInput
  id: Int
}

type ClubCount {
  clubCoordinator: Int!
  clubEvents: Int!
  clubMember: Int!
  clubNotifications: Int!
  clubtags: Int!
  subscription: Int!
}

type ClubCountAggregate {
  _all: Int!
  createdAt: Int!
  deletedAt: Int!
  description: Int!
  id: Int!
  image: Int!
  links: Int!
  name: Int!
  updatedAt: Int!
}

input ClubCountOrderByAggregateInput {
  createdAt: SortOrder
  deletedAt: SortOrder
  description: SortOrder
  id: SortOrder
  image: SortOrder
  links: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input ClubCreateInput {
  clubCoordinator: ClubCoordinatorCreateNestedManyWithoutClubInput
  clubEvents: ClubEventCreateNestedManyWithoutClubInput
  clubMember: ClubMemberCreateNestedManyWithoutClubInput
  clubNotifications: ClubNotificationCreateNestedManyWithoutClubInput
  clubRank: ClubRankCreateNestedOneWithoutClubInput
  clubtags: ClubTagCreateNestedManyWithoutClubInput
  createdAt: DateTime
  deletedAt: DateTime
  description: String!
  image: String
  links: String!
  name: String!
  otp: OTPCreateNestedOneWithoutClubInput
  subscription: SubscriptionCreateNestedManyWithoutClubInput
  updatedAt: DateTime
}

input ClubCreateManyInput {
  createdAt: DateTime
  deletedAt: DateTime
  description: String!
  id: Int
  image: String
  links: String!
  name: String!
  updatedAt: DateTime
}

input ClubCreateNestedOneWithoutClubCoordinatorInput {
  connect: ClubWhereUniqueInput
  connectOrCreate: ClubCreateOrConnectWithoutClubCoordinatorInput
  create: ClubCreateWithoutClubCoordinatorInput
}

input ClubCreateNestedOneWithoutClubEventsInput {
  connect: ClubWhereUniqueInput
  connectOrCreate: ClubCreateOrConnectWithoutClubEventsInput
  create: ClubCreateWithoutClubEventsInput
}

input ClubCreateNestedOneWithoutClubMemberInput {
  connect: ClubWhereUniqueInput
  connectOrCreate: ClubCreateOrConnectWithoutClubMemberInput
  create: ClubCreateWithoutClubMemberInput
}

input ClubCreateNestedOneWithoutClubNotificationsInput {
  connect: ClubWhereUniqueInput
  connectOrCreate: ClubCreateOrConnectWithoutClubNotificationsInput
  create: ClubCreateWithoutClubNotificationsInput
}

input ClubCreateNestedOneWithoutClubRankInput {
  connect: ClubWhereUniqueInput
  connectOrCreate: ClubCreateOrConnectWithoutClubRankInput
  create: ClubCreateWithoutClubRankInput
}

input ClubCreateNestedOneWithoutClubtagsInput {
  connect: ClubWhereUniqueInput
  connectOrCreate: ClubCreateOrConnectWithoutClubtagsInput
  create: ClubCreateWithoutClubtagsInput
}

input ClubCreateNestedOneWithoutOtpInput {
  connect: ClubWhereUniqueInput
  connectOrCreate: ClubCreateOrConnectWithoutOtpInput
  create: ClubCreateWithoutOtpInput
}

input ClubCreateNestedOneWithoutSubscriptionInput {
  connect: ClubWhereUniqueInput
  connectOrCreate: ClubCreateOrConnectWithoutSubscriptionInput
  create: ClubCreateWithoutSubscriptionInput
}

input ClubCreateOrConnectWithoutClubCoordinatorInput {
  create: ClubCreateWithoutClubCoordinatorInput!
  where: ClubWhereUniqueInput!
}

input ClubCreateOrConnectWithoutClubEventsInput {
  create: ClubCreateWithoutClubEventsInput!
  where: ClubWhereUniqueInput!
}

input ClubCreateOrConnectWithoutClubMemberInput {
  create: ClubCreateWithoutClubMemberInput!
  where: ClubWhereUniqueInput!
}

input ClubCreateOrConnectWithoutClubNotificationsInput {
  create: ClubCreateWithoutClubNotificationsInput!
  where: ClubWhereUniqueInput!
}

input ClubCreateOrConnectWithoutClubRankInput {
  create: ClubCreateWithoutClubRankInput!
  where: ClubWhereUniqueInput!
}

input ClubCreateOrConnectWithoutClubtagsInput {
  create: ClubCreateWithoutClubtagsInput!
  where: ClubWhereUniqueInput!
}

input ClubCreateOrConnectWithoutOtpInput {
  create: ClubCreateWithoutOtpInput!
  where: ClubWhereUniqueInput!
}

input ClubCreateOrConnectWithoutSubscriptionInput {
  create: ClubCreateWithoutSubscriptionInput!
  where: ClubWhereUniqueInput!
}

input ClubCreateWithoutClubCoordinatorInput {
  clubEvents: ClubEventCreateNestedManyWithoutClubInput
  clubMember: ClubMemberCreateNestedManyWithoutClubInput
  clubNotifications: ClubNotificationCreateNestedManyWithoutClubInput
  clubRank: ClubRankCreateNestedOneWithoutClubInput
  clubtags: ClubTagCreateNestedManyWithoutClubInput
  createdAt: DateTime
  deletedAt: DateTime
  description: String!
  image: String
  links: String!
  name: String!
  otp: OTPCreateNestedOneWithoutClubInput
  subscription: SubscriptionCreateNestedManyWithoutClubInput
  updatedAt: DateTime
}

input ClubCreateWithoutClubEventsInput {
  clubCoordinator: ClubCoordinatorCreateNestedManyWithoutClubInput
  clubMember: ClubMemberCreateNestedManyWithoutClubInput
  clubNotifications: ClubNotificationCreateNestedManyWithoutClubInput
  clubRank: ClubRankCreateNestedOneWithoutClubInput
  clubtags: ClubTagCreateNestedManyWithoutClubInput
  createdAt: DateTime
  deletedAt: DateTime
  description: String!
  image: String
  links: String!
  name: String!
  otp: OTPCreateNestedOneWithoutClubInput
  subscription: SubscriptionCreateNestedManyWithoutClubInput
  updatedAt: DateTime
}

input ClubCreateWithoutClubMemberInput {
  clubCoordinator: ClubCoordinatorCreateNestedManyWithoutClubInput
  clubEvents: ClubEventCreateNestedManyWithoutClubInput
  clubNotifications: ClubNotificationCreateNestedManyWithoutClubInput
  clubRank: ClubRankCreateNestedOneWithoutClubInput
  clubtags: ClubTagCreateNestedManyWithoutClubInput
  createdAt: DateTime
  deletedAt: DateTime
  description: String!
  image: String
  links: String!
  name: String!
  otp: OTPCreateNestedOneWithoutClubInput
  subscription: SubscriptionCreateNestedManyWithoutClubInput
  updatedAt: DateTime
}

input ClubCreateWithoutClubNotificationsInput {
  clubCoordinator: ClubCoordinatorCreateNestedManyWithoutClubInput
  clubEvents: ClubEventCreateNestedManyWithoutClubInput
  clubMember: ClubMemberCreateNestedManyWithoutClubInput
  clubRank: ClubRankCreateNestedOneWithoutClubInput
  clubtags: ClubTagCreateNestedManyWithoutClubInput
  createdAt: DateTime
  deletedAt: DateTime
  description: String!
  image: String
  links: String!
  name: String!
  otp: OTPCreateNestedOneWithoutClubInput
  subscription: SubscriptionCreateNestedManyWithoutClubInput
  updatedAt: DateTime
}

input ClubCreateWithoutClubRankInput {
  clubCoordinator: ClubCoordinatorCreateNestedManyWithoutClubInput
  clubEvents: ClubEventCreateNestedManyWithoutClubInput
  clubMember: ClubMemberCreateNestedManyWithoutClubInput
  clubNotifications: ClubNotificationCreateNestedManyWithoutClubInput
  clubtags: ClubTagCreateNestedManyWithoutClubInput
  createdAt: DateTime
  deletedAt: DateTime
  description: String!
  image: String
  links: String!
  name: String!
  otp: OTPCreateNestedOneWithoutClubInput
  subscription: SubscriptionCreateNestedManyWithoutClubInput
  updatedAt: DateTime
}

input ClubCreateWithoutClubtagsInput {
  clubCoordinator: ClubCoordinatorCreateNestedManyWithoutClubInput
  clubEvents: ClubEventCreateNestedManyWithoutClubInput
  clubMember: ClubMemberCreateNestedManyWithoutClubInput
  clubNotifications: ClubNotificationCreateNestedManyWithoutClubInput
  clubRank: ClubRankCreateNestedOneWithoutClubInput
  createdAt: DateTime
  deletedAt: DateTime
  description: String!
  image: String
  links: String!
  name: String!
  otp: OTPCreateNestedOneWithoutClubInput
  subscription: SubscriptionCreateNestedManyWithoutClubInput
  updatedAt: DateTime
}

input ClubCreateWithoutOtpInput {
  clubCoordinator: ClubCoordinatorCreateNestedManyWithoutClubInput
  clubEvents: ClubEventCreateNestedManyWithoutClubInput
  clubMember: ClubMemberCreateNestedManyWithoutClubInput
  clubNotifications: ClubNotificationCreateNestedManyWithoutClubInput
  clubRank: ClubRankCreateNestedOneWithoutClubInput
  clubtags: ClubTagCreateNestedManyWithoutClubInput
  createdAt: DateTime
  deletedAt: DateTime
  description: String!
  image: String
  links: String!
  name: String!
  subscription: SubscriptionCreateNestedManyWithoutClubInput
  updatedAt: DateTime
}

input ClubCreateWithoutSubscriptionInput {
  clubCoordinator: ClubCoordinatorCreateNestedManyWithoutClubInput
  clubEvents: ClubEventCreateNestedManyWithoutClubInput
  clubMember: ClubMemberCreateNestedManyWithoutClubInput
  clubNotifications: ClubNotificationCreateNestedManyWithoutClubInput
  clubRank: ClubRankCreateNestedOneWithoutClubInput
  clubtags: ClubTagCreateNestedManyWithoutClubInput
  createdAt: DateTime
  deletedAt: DateTime
  description: String!
  image: String
  links: String!
  name: String!
  otp: OTPCreateNestedOneWithoutClubInput
  updatedAt: DateTime
}

type ClubEvent {
  club: Club!
  clubId: Int!
  createdAt: DateTime!
  deletedAt: DateTime
  event: Event!
  eventId: Int!
  id: Int!
  updatedAt: DateTime!
}

type ClubEventAvgAggregate {
  clubId: Float
  eventId: Float
  id: Float
}

input ClubEventAvgOrderByAggregateInput {
  clubId: SortOrder
  eventId: SortOrder
  id: SortOrder
}

input ClubEventClubIdEventIdCompoundUniqueInput {
  clubId: Int!
  eventId: Int!
}

type ClubEventCountAggregate {
  _all: Int!
  clubId: Int!
  createdAt: Int!
  deletedAt: Int!
  eventId: Int!
  id: Int!
  updatedAt: Int!
}

input ClubEventCountOrderByAggregateInput {
  clubId: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  eventId: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input ClubEventCreateInput {
  club: ClubCreateNestedOneWithoutClubEventsInput!
  createdAt: DateTime
  deletedAt: DateTime
  event: EventCreateNestedOneWithoutClubEventsInput!
  updatedAt: DateTime
}

input ClubEventCreateManyClubInput {
  createdAt: DateTime
  deletedAt: DateTime
  eventId: Int!
  id: Int
  updatedAt: DateTime
}

input ClubEventCreateManyClubInputEnvelope {
  data: [ClubEventCreateManyClubInput!]!
  skipDuplicates: Boolean
}

input ClubEventCreateManyEventInput {
  clubId: Int!
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  updatedAt: DateTime
}

input ClubEventCreateManyEventInputEnvelope {
  data: [ClubEventCreateManyEventInput!]!
  skipDuplicates: Boolean
}

input ClubEventCreateManyInput {
  clubId: Int!
  createdAt: DateTime
  deletedAt: DateTime
  eventId: Int!
  id: Int
  updatedAt: DateTime
}

input ClubEventCreateNestedManyWithoutClubInput {
  connect: [ClubEventWhereUniqueInput!]
  connectOrCreate: [ClubEventCreateOrConnectWithoutClubInput!]
  create: [ClubEventCreateWithoutClubInput!]
  createMany: ClubEventCreateManyClubInputEnvelope
}

input ClubEventCreateNestedManyWithoutEventInput {
  connect: [ClubEventWhereUniqueInput!]
  connectOrCreate: [ClubEventCreateOrConnectWithoutEventInput!]
  create: [ClubEventCreateWithoutEventInput!]
  createMany: ClubEventCreateManyEventInputEnvelope
}

input ClubEventCreateOrConnectWithoutClubInput {
  create: ClubEventCreateWithoutClubInput!
  where: ClubEventWhereUniqueInput!
}

input ClubEventCreateOrConnectWithoutEventInput {
  create: ClubEventCreateWithoutEventInput!
  where: ClubEventWhereUniqueInput!
}

input ClubEventCreateWithoutClubInput {
  createdAt: DateTime
  deletedAt: DateTime
  event: EventCreateNestedOneWithoutClubEventsInput!
  updatedAt: DateTime
}

input ClubEventCreateWithoutEventInput {
  club: ClubCreateNestedOneWithoutClubEventsInput!
  createdAt: DateTime
  deletedAt: DateTime
  updatedAt: DateTime
}

type ClubEventGroupBy {
  _avg: ClubEventAvgAggregate
  _count: ClubEventCountAggregate
  _max: ClubEventMaxAggregate
  _min: ClubEventMinAggregate
  _sum: ClubEventSumAggregate
  clubId: Int!
  createdAt: DateTime!
  deletedAt: DateTime
  eventId: Int!
  id: Int!
  updatedAt: DateTime!
}

input ClubEventListRelationFilter {
  every: ClubEventWhereInput
  none: ClubEventWhereInput
  some: ClubEventWhereInput
}

type ClubEventMaxAggregate {
  clubId: Int
  createdAt: DateTime
  deletedAt: DateTime
  eventId: Int
  id: Int
  updatedAt: DateTime
}

input ClubEventMaxOrderByAggregateInput {
  clubId: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  eventId: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

type ClubEventMinAggregate {
  clubId: Int
  createdAt: DateTime
  deletedAt: DateTime
  eventId: Int
  id: Int
  updatedAt: DateTime
}

input ClubEventMinOrderByAggregateInput {
  clubId: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  eventId: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input ClubEventOrderByRelationAggregateInput {
  _count: SortOrder
}

input ClubEventOrderByWithAggregationInput {
  _avg: ClubEventAvgOrderByAggregateInput
  _count: ClubEventCountOrderByAggregateInput
  _max: ClubEventMaxOrderByAggregateInput
  _min: ClubEventMinOrderByAggregateInput
  _sum: ClubEventSumOrderByAggregateInput
  clubId: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  eventId: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input ClubEventOrderByWithRelationInput {
  club: ClubOrderByWithRelationInput
  clubId: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  event: EventOrderByWithRelationInput
  eventId: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

enum ClubEventScalarFieldEnum {
  clubId
  createdAt
  deletedAt
  eventId
  id
  updatedAt
}

input ClubEventScalarWhereInput {
  AND: [ClubEventScalarWhereInput!]
  NOT: [ClubEventScalarWhereInput!]
  OR: [ClubEventScalarWhereInput!]
  clubId: IntFilter
  createdAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  eventId: IntFilter
  id: IntFilter
  updatedAt: DateTimeFilter
}

input ClubEventScalarWhereWithAggregatesInput {
  AND: [ClubEventScalarWhereWithAggregatesInput!]
  NOT: [ClubEventScalarWhereWithAggregatesInput!]
  OR: [ClubEventScalarWhereWithAggregatesInput!]
  clubId: IntWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  deletedAt: DateTimeNullableWithAggregatesFilter
  eventId: IntWithAggregatesFilter
  id: IntWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type ClubEventSumAggregate {
  clubId: Int
  eventId: Int
  id: Int
}

input ClubEventSumOrderByAggregateInput {
  clubId: SortOrder
  eventId: SortOrder
  id: SortOrder
}

input ClubEventUpdateInput {
  club: ClubUpdateOneRequiredWithoutClubEventsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  event: EventUpdateOneRequiredWithoutClubEventsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClubEventUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClubEventUpdateManyWithWhereWithoutClubInput {
  data: ClubEventUpdateManyMutationInput!
  where: ClubEventScalarWhereInput!
}

input ClubEventUpdateManyWithWhereWithoutEventInput {
  data: ClubEventUpdateManyMutationInput!
  where: ClubEventScalarWhereInput!
}

input ClubEventUpdateManyWithoutClubInput {
  connect: [ClubEventWhereUniqueInput!]
  connectOrCreate: [ClubEventCreateOrConnectWithoutClubInput!]
  create: [ClubEventCreateWithoutClubInput!]
  createMany: ClubEventCreateManyClubInputEnvelope
  delete: [ClubEventWhereUniqueInput!]
  deleteMany: [ClubEventScalarWhereInput!]
  disconnect: [ClubEventWhereUniqueInput!]
  set: [ClubEventWhereUniqueInput!]
  update: [ClubEventUpdateWithWhereUniqueWithoutClubInput!]
  updateMany: [ClubEventUpdateManyWithWhereWithoutClubInput!]
  upsert: [ClubEventUpsertWithWhereUniqueWithoutClubInput!]
}

input ClubEventUpdateManyWithoutEventInput {
  connect: [ClubEventWhereUniqueInput!]
  connectOrCreate: [ClubEventCreateOrConnectWithoutEventInput!]
  create: [ClubEventCreateWithoutEventInput!]
  createMany: ClubEventCreateManyEventInputEnvelope
  delete: [ClubEventWhereUniqueInput!]
  deleteMany: [ClubEventScalarWhereInput!]
  disconnect: [ClubEventWhereUniqueInput!]
  set: [ClubEventWhereUniqueInput!]
  update: [ClubEventUpdateWithWhereUniqueWithoutEventInput!]
  updateMany: [ClubEventUpdateManyWithWhereWithoutEventInput!]
  upsert: [ClubEventUpsertWithWhereUniqueWithoutEventInput!]
}

input ClubEventUpdateWithWhereUniqueWithoutClubInput {
  data: ClubEventUpdateWithoutClubInput!
  where: ClubEventWhereUniqueInput!
}

input ClubEventUpdateWithWhereUniqueWithoutEventInput {
  data: ClubEventUpdateWithoutEventInput!
  where: ClubEventWhereUniqueInput!
}

input ClubEventUpdateWithoutClubInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  event: EventUpdateOneRequiredWithoutClubEventsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClubEventUpdateWithoutEventInput {
  club: ClubUpdateOneRequiredWithoutClubEventsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClubEventUpsertWithWhereUniqueWithoutClubInput {
  create: ClubEventCreateWithoutClubInput!
  update: ClubEventUpdateWithoutClubInput!
  where: ClubEventWhereUniqueInput!
}

input ClubEventUpsertWithWhereUniqueWithoutEventInput {
  create: ClubEventCreateWithoutEventInput!
  update: ClubEventUpdateWithoutEventInput!
  where: ClubEventWhereUniqueInput!
}

input ClubEventWhereInput {
  AND: [ClubEventWhereInput!]
  NOT: [ClubEventWhereInput!]
  OR: [ClubEventWhereInput!]
  club: ClubRelationFilter
  clubId: IntFilter
  createdAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  event: EventRelationFilter
  eventId: IntFilter
  id: IntFilter
  updatedAt: DateTimeFilter
}

input ClubEventWhereUniqueInput {
  clubId_eventId: ClubEventClubIdEventIdCompoundUniqueInput
  id: Int
}

type ClubGroupBy {
  _avg: ClubAvgAggregate
  _count: ClubCountAggregate
  _max: ClubMaxAggregate
  _min: ClubMinAggregate
  _sum: ClubSumAggregate
  createdAt: DateTime!
  deletedAt: DateTime
  description: String!
  id: Int!
  image: String!
  links: String!
  name: String!
  updatedAt: DateTime!
}

type ClubMaxAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  id: Int
  image: String
  links: String
  name: String
  updatedAt: DateTime
}

input ClubMaxOrderByAggregateInput {
  createdAt: SortOrder
  deletedAt: SortOrder
  description: SortOrder
  id: SortOrder
  image: SortOrder
  links: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

type ClubMember {
  club: Club!
  clubId: Int!
  createdAt: DateTime!
  deletedAt: DateTime
  id: Int!
  level: Int!
  updatedAt: DateTime!
  user: User!
  userId: Int!
}

type ClubMemberAvgAggregate {
  clubId: Float
  id: Float
  level: Float
  userId: Float
}

input ClubMemberAvgOrderByAggregateInput {
  clubId: SortOrder
  id: SortOrder
  level: SortOrder
  userId: SortOrder
}

input ClubMemberClubIdUserIdCompoundUniqueInput {
  clubId: Int!
  userId: Int!
}

type ClubMemberCountAggregate {
  _all: Int!
  clubId: Int!
  createdAt: Int!
  deletedAt: Int!
  id: Int!
  level: Int!
  updatedAt: Int!
  userId: Int!
}

input ClubMemberCountOrderByAggregateInput {
  clubId: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  level: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input ClubMemberCreateInput {
  club: ClubCreateNestedOneWithoutClubMemberInput!
  createdAt: DateTime
  deletedAt: DateTime
  level: Int
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutClubMemberInput!
}

input ClubMemberCreateManyClubInput {
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  level: Int
  updatedAt: DateTime
  userId: Int!
}

input ClubMemberCreateManyClubInputEnvelope {
  data: [ClubMemberCreateManyClubInput!]!
  skipDuplicates: Boolean
}

input ClubMemberCreateManyInput {
  clubId: Int!
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  level: Int
  updatedAt: DateTime
  userId: Int!
}

input ClubMemberCreateManyUserInput {
  clubId: Int!
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  level: Int
  updatedAt: DateTime
}

input ClubMemberCreateManyUserInputEnvelope {
  data: [ClubMemberCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input ClubMemberCreateNestedManyWithoutClubInput {
  connect: [ClubMemberWhereUniqueInput!]
  connectOrCreate: [ClubMemberCreateOrConnectWithoutClubInput!]
  create: [ClubMemberCreateWithoutClubInput!]
  createMany: ClubMemberCreateManyClubInputEnvelope
}

input ClubMemberCreateNestedManyWithoutUserInput {
  connect: [ClubMemberWhereUniqueInput!]
  connectOrCreate: [ClubMemberCreateOrConnectWithoutUserInput!]
  create: [ClubMemberCreateWithoutUserInput!]
  createMany: ClubMemberCreateManyUserInputEnvelope
}

input ClubMemberCreateOrConnectWithoutClubInput {
  create: ClubMemberCreateWithoutClubInput!
  where: ClubMemberWhereUniqueInput!
}

input ClubMemberCreateOrConnectWithoutUserInput {
  create: ClubMemberCreateWithoutUserInput!
  where: ClubMemberWhereUniqueInput!
}

input ClubMemberCreateWithoutClubInput {
  createdAt: DateTime
  deletedAt: DateTime
  level: Int
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutClubMemberInput!
}

input ClubMemberCreateWithoutUserInput {
  club: ClubCreateNestedOneWithoutClubMemberInput!
  createdAt: DateTime
  deletedAt: DateTime
  level: Int
  updatedAt: DateTime
}

type ClubMemberGroupBy {
  _avg: ClubMemberAvgAggregate
  _count: ClubMemberCountAggregate
  _max: ClubMemberMaxAggregate
  _min: ClubMemberMinAggregate
  _sum: ClubMemberSumAggregate
  clubId: Int!
  createdAt: DateTime!
  deletedAt: DateTime
  id: Int!
  level: Int!
  updatedAt: DateTime!
  userId: Int!
}

input ClubMemberListRelationFilter {
  every: ClubMemberWhereInput
  none: ClubMemberWhereInput
  some: ClubMemberWhereInput
}

type ClubMemberMaxAggregate {
  clubId: Int
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  level: Int
  updatedAt: DateTime
  userId: Int
}

input ClubMemberMaxOrderByAggregateInput {
  clubId: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  level: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

type ClubMemberMinAggregate {
  clubId: Int
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  level: Int
  updatedAt: DateTime
  userId: Int
}

input ClubMemberMinOrderByAggregateInput {
  clubId: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  level: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input ClubMemberOrderByRelationAggregateInput {
  _count: SortOrder
}

input ClubMemberOrderByWithAggregationInput {
  _avg: ClubMemberAvgOrderByAggregateInput
  _count: ClubMemberCountOrderByAggregateInput
  _max: ClubMemberMaxOrderByAggregateInput
  _min: ClubMemberMinOrderByAggregateInput
  _sum: ClubMemberSumOrderByAggregateInput
  clubId: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  level: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input ClubMemberOrderByWithRelationInput {
  club: ClubOrderByWithRelationInput
  clubId: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  level: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum ClubMemberScalarFieldEnum {
  clubId
  createdAt
  deletedAt
  id
  level
  updatedAt
  userId
}

input ClubMemberScalarWhereInput {
  AND: [ClubMemberScalarWhereInput!]
  NOT: [ClubMemberScalarWhereInput!]
  OR: [ClubMemberScalarWhereInput!]
  clubId: IntFilter
  createdAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  id: IntFilter
  level: IntFilter
  updatedAt: DateTimeFilter
  userId: IntFilter
}

input ClubMemberScalarWhereWithAggregatesInput {
  AND: [ClubMemberScalarWhereWithAggregatesInput!]
  NOT: [ClubMemberScalarWhereWithAggregatesInput!]
  OR: [ClubMemberScalarWhereWithAggregatesInput!]
  clubId: IntWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  deletedAt: DateTimeNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  level: IntWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userId: IntWithAggregatesFilter
}

type ClubMemberSumAggregate {
  clubId: Int
  id: Int
  level: Int
  userId: Int
}

input ClubMemberSumOrderByAggregateInput {
  clubId: SortOrder
  id: SortOrder
  level: SortOrder
  userId: SortOrder
}

input ClubMemberUpdateInput {
  club: ClubUpdateOneRequiredWithoutClubMemberInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  level: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutClubMemberInput
}

input ClubMemberUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  level: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClubMemberUpdateManyWithWhereWithoutClubInput {
  data: ClubMemberUpdateManyMutationInput!
  where: ClubMemberScalarWhereInput!
}

input ClubMemberUpdateManyWithWhereWithoutUserInput {
  data: ClubMemberUpdateManyMutationInput!
  where: ClubMemberScalarWhereInput!
}

input ClubMemberUpdateManyWithoutClubInput {
  connect: [ClubMemberWhereUniqueInput!]
  connectOrCreate: [ClubMemberCreateOrConnectWithoutClubInput!]
  create: [ClubMemberCreateWithoutClubInput!]
  createMany: ClubMemberCreateManyClubInputEnvelope
  delete: [ClubMemberWhereUniqueInput!]
  deleteMany: [ClubMemberScalarWhereInput!]
  disconnect: [ClubMemberWhereUniqueInput!]
  set: [ClubMemberWhereUniqueInput!]
  update: [ClubMemberUpdateWithWhereUniqueWithoutClubInput!]
  updateMany: [ClubMemberUpdateManyWithWhereWithoutClubInput!]
  upsert: [ClubMemberUpsertWithWhereUniqueWithoutClubInput!]
}

input ClubMemberUpdateManyWithoutUserInput {
  connect: [ClubMemberWhereUniqueInput!]
  connectOrCreate: [ClubMemberCreateOrConnectWithoutUserInput!]
  create: [ClubMemberCreateWithoutUserInput!]
  createMany: ClubMemberCreateManyUserInputEnvelope
  delete: [ClubMemberWhereUniqueInput!]
  deleteMany: [ClubMemberScalarWhereInput!]
  disconnect: [ClubMemberWhereUniqueInput!]
  set: [ClubMemberWhereUniqueInput!]
  update: [ClubMemberUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ClubMemberUpdateManyWithWhereWithoutUserInput!]
  upsert: [ClubMemberUpsertWithWhereUniqueWithoutUserInput!]
}

input ClubMemberUpdateWithWhereUniqueWithoutClubInput {
  data: ClubMemberUpdateWithoutClubInput!
  where: ClubMemberWhereUniqueInput!
}

input ClubMemberUpdateWithWhereUniqueWithoutUserInput {
  data: ClubMemberUpdateWithoutUserInput!
  where: ClubMemberWhereUniqueInput!
}

input ClubMemberUpdateWithoutClubInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  level: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutClubMemberInput
}

input ClubMemberUpdateWithoutUserInput {
  club: ClubUpdateOneRequiredWithoutClubMemberInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  level: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClubMemberUpsertWithWhereUniqueWithoutClubInput {
  create: ClubMemberCreateWithoutClubInput!
  update: ClubMemberUpdateWithoutClubInput!
  where: ClubMemberWhereUniqueInput!
}

input ClubMemberUpsertWithWhereUniqueWithoutUserInput {
  create: ClubMemberCreateWithoutUserInput!
  update: ClubMemberUpdateWithoutUserInput!
  where: ClubMemberWhereUniqueInput!
}

input ClubMemberWhereInput {
  AND: [ClubMemberWhereInput!]
  NOT: [ClubMemberWhereInput!]
  OR: [ClubMemberWhereInput!]
  club: ClubRelationFilter
  clubId: IntFilter
  createdAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  id: IntFilter
  level: IntFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: IntFilter
}

input ClubMemberWhereUniqueInput {
  clubId_userId: ClubMemberClubIdUserIdCompoundUniqueInput
  id: Int
}

type ClubMinAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  id: Int
  image: String
  links: String
  name: String
  updatedAt: DateTime
}

input ClubMinOrderByAggregateInput {
  createdAt: SortOrder
  deletedAt: SortOrder
  description: SortOrder
  id: SortOrder
  image: SortOrder
  links: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

type ClubNotification {
  club: Club!
  clubId: Int!
  createdAt: DateTime!
  deletedAt: DateTime
  id: Int!
  notification: Notification!
  notificationId: Int!
  updatedAt: DateTime!
}

type ClubNotificationAvgAggregate {
  clubId: Float
  id: Float
  notificationId: Float
}

input ClubNotificationAvgOrderByAggregateInput {
  clubId: SortOrder
  id: SortOrder
  notificationId: SortOrder
}

input ClubNotificationClubIdNotificationIdCompoundUniqueInput {
  clubId: Int!
  notificationId: Int!
}

type ClubNotificationCountAggregate {
  _all: Int!
  clubId: Int!
  createdAt: Int!
  deletedAt: Int!
  id: Int!
  notificationId: Int!
  updatedAt: Int!
}

input ClubNotificationCountOrderByAggregateInput {
  clubId: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  notificationId: SortOrder
  updatedAt: SortOrder
}

input ClubNotificationCreateInput {
  club: ClubCreateNestedOneWithoutClubNotificationsInput!
  createdAt: DateTime
  deletedAt: DateTime
  notification: NotificationCreateNestedOneWithoutCreatedByInput!
  updatedAt: DateTime
}

input ClubNotificationCreateManyClubInput {
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  notificationId: Int!
  updatedAt: DateTime
}

input ClubNotificationCreateManyClubInputEnvelope {
  data: [ClubNotificationCreateManyClubInput!]!
  skipDuplicates: Boolean
}

input ClubNotificationCreateManyInput {
  clubId: Int!
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  notificationId: Int!
  updatedAt: DateTime
}

input ClubNotificationCreateManyNotificationInput {
  clubId: Int!
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  updatedAt: DateTime
}

input ClubNotificationCreateManyNotificationInputEnvelope {
  data: [ClubNotificationCreateManyNotificationInput!]!
  skipDuplicates: Boolean
}

input ClubNotificationCreateNestedManyWithoutClubInput {
  connect: [ClubNotificationWhereUniqueInput!]
  connectOrCreate: [ClubNotificationCreateOrConnectWithoutClubInput!]
  create: [ClubNotificationCreateWithoutClubInput!]
  createMany: ClubNotificationCreateManyClubInputEnvelope
}

input ClubNotificationCreateNestedManyWithoutNotificationInput {
  connect: [ClubNotificationWhereUniqueInput!]
  connectOrCreate: [ClubNotificationCreateOrConnectWithoutNotificationInput!]
  create: [ClubNotificationCreateWithoutNotificationInput!]
  createMany: ClubNotificationCreateManyNotificationInputEnvelope
}

input ClubNotificationCreateOrConnectWithoutClubInput {
  create: ClubNotificationCreateWithoutClubInput!
  where: ClubNotificationWhereUniqueInput!
}

input ClubNotificationCreateOrConnectWithoutNotificationInput {
  create: ClubNotificationCreateWithoutNotificationInput!
  where: ClubNotificationWhereUniqueInput!
}

input ClubNotificationCreateWithoutClubInput {
  createdAt: DateTime
  deletedAt: DateTime
  notification: NotificationCreateNestedOneWithoutCreatedByInput!
  updatedAt: DateTime
}

input ClubNotificationCreateWithoutNotificationInput {
  club: ClubCreateNestedOneWithoutClubNotificationsInput!
  createdAt: DateTime
  deletedAt: DateTime
  updatedAt: DateTime
}

type ClubNotificationGroupBy {
  _avg: ClubNotificationAvgAggregate
  _count: ClubNotificationCountAggregate
  _max: ClubNotificationMaxAggregate
  _min: ClubNotificationMinAggregate
  _sum: ClubNotificationSumAggregate
  clubId: Int!
  createdAt: DateTime!
  deletedAt: DateTime
  id: Int!
  notificationId: Int!
  updatedAt: DateTime!
}

input ClubNotificationListRelationFilter {
  every: ClubNotificationWhereInput
  none: ClubNotificationWhereInput
  some: ClubNotificationWhereInput
}

type ClubNotificationMaxAggregate {
  clubId: Int
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  notificationId: Int
  updatedAt: DateTime
}

input ClubNotificationMaxOrderByAggregateInput {
  clubId: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  notificationId: SortOrder
  updatedAt: SortOrder
}

type ClubNotificationMinAggregate {
  clubId: Int
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  notificationId: Int
  updatedAt: DateTime
}

input ClubNotificationMinOrderByAggregateInput {
  clubId: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  notificationId: SortOrder
  updatedAt: SortOrder
}

input ClubNotificationOrderByRelationAggregateInput {
  _count: SortOrder
}

input ClubNotificationOrderByWithAggregationInput {
  _avg: ClubNotificationAvgOrderByAggregateInput
  _count: ClubNotificationCountOrderByAggregateInput
  _max: ClubNotificationMaxOrderByAggregateInput
  _min: ClubNotificationMinOrderByAggregateInput
  _sum: ClubNotificationSumOrderByAggregateInput
  clubId: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  notificationId: SortOrder
  updatedAt: SortOrder
}

input ClubNotificationOrderByWithRelationInput {
  club: ClubOrderByWithRelationInput
  clubId: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  notification: NotificationOrderByWithRelationInput
  notificationId: SortOrder
  updatedAt: SortOrder
}

enum ClubNotificationScalarFieldEnum {
  clubId
  createdAt
  deletedAt
  id
  notificationId
  updatedAt
}

input ClubNotificationScalarWhereInput {
  AND: [ClubNotificationScalarWhereInput!]
  NOT: [ClubNotificationScalarWhereInput!]
  OR: [ClubNotificationScalarWhereInput!]
  clubId: IntFilter
  createdAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  id: IntFilter
  notificationId: IntFilter
  updatedAt: DateTimeFilter
}

input ClubNotificationScalarWhereWithAggregatesInput {
  AND: [ClubNotificationScalarWhereWithAggregatesInput!]
  NOT: [ClubNotificationScalarWhereWithAggregatesInput!]
  OR: [ClubNotificationScalarWhereWithAggregatesInput!]
  clubId: IntWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  deletedAt: DateTimeNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  notificationId: IntWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type ClubNotificationSumAggregate {
  clubId: Int
  id: Int
  notificationId: Int
}

input ClubNotificationSumOrderByAggregateInput {
  clubId: SortOrder
  id: SortOrder
  notificationId: SortOrder
}

input ClubNotificationUpdateInput {
  club: ClubUpdateOneRequiredWithoutClubNotificationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  notification: NotificationUpdateOneRequiredWithoutCreatedByInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClubNotificationUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClubNotificationUpdateManyWithWhereWithoutClubInput {
  data: ClubNotificationUpdateManyMutationInput!
  where: ClubNotificationScalarWhereInput!
}

input ClubNotificationUpdateManyWithWhereWithoutNotificationInput {
  data: ClubNotificationUpdateManyMutationInput!
  where: ClubNotificationScalarWhereInput!
}

input ClubNotificationUpdateManyWithoutClubInput {
  connect: [ClubNotificationWhereUniqueInput!]
  connectOrCreate: [ClubNotificationCreateOrConnectWithoutClubInput!]
  create: [ClubNotificationCreateWithoutClubInput!]
  createMany: ClubNotificationCreateManyClubInputEnvelope
  delete: [ClubNotificationWhereUniqueInput!]
  deleteMany: [ClubNotificationScalarWhereInput!]
  disconnect: [ClubNotificationWhereUniqueInput!]
  set: [ClubNotificationWhereUniqueInput!]
  update: [ClubNotificationUpdateWithWhereUniqueWithoutClubInput!]
  updateMany: [ClubNotificationUpdateManyWithWhereWithoutClubInput!]
  upsert: [ClubNotificationUpsertWithWhereUniqueWithoutClubInput!]
}

input ClubNotificationUpdateManyWithoutNotificationInput {
  connect: [ClubNotificationWhereUniqueInput!]
  connectOrCreate: [ClubNotificationCreateOrConnectWithoutNotificationInput!]
  create: [ClubNotificationCreateWithoutNotificationInput!]
  createMany: ClubNotificationCreateManyNotificationInputEnvelope
  delete: [ClubNotificationWhereUniqueInput!]
  deleteMany: [ClubNotificationScalarWhereInput!]
  disconnect: [ClubNotificationWhereUniqueInput!]
  set: [ClubNotificationWhereUniqueInput!]
  update: [ClubNotificationUpdateWithWhereUniqueWithoutNotificationInput!]
  updateMany: [ClubNotificationUpdateManyWithWhereWithoutNotificationInput!]
  upsert: [ClubNotificationUpsertWithWhereUniqueWithoutNotificationInput!]
}

input ClubNotificationUpdateWithWhereUniqueWithoutClubInput {
  data: ClubNotificationUpdateWithoutClubInput!
  where: ClubNotificationWhereUniqueInput!
}

input ClubNotificationUpdateWithWhereUniqueWithoutNotificationInput {
  data: ClubNotificationUpdateWithoutNotificationInput!
  where: ClubNotificationWhereUniqueInput!
}

input ClubNotificationUpdateWithoutClubInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  notification: NotificationUpdateOneRequiredWithoutCreatedByInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClubNotificationUpdateWithoutNotificationInput {
  club: ClubUpdateOneRequiredWithoutClubNotificationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClubNotificationUpsertWithWhereUniqueWithoutClubInput {
  create: ClubNotificationCreateWithoutClubInput!
  update: ClubNotificationUpdateWithoutClubInput!
  where: ClubNotificationWhereUniqueInput!
}

input ClubNotificationUpsertWithWhereUniqueWithoutNotificationInput {
  create: ClubNotificationCreateWithoutNotificationInput!
  update: ClubNotificationUpdateWithoutNotificationInput!
  where: ClubNotificationWhereUniqueInput!
}

input ClubNotificationWhereInput {
  AND: [ClubNotificationWhereInput!]
  NOT: [ClubNotificationWhereInput!]
  OR: [ClubNotificationWhereInput!]
  club: ClubRelationFilter
  clubId: IntFilter
  createdAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  id: IntFilter
  notification: NotificationRelationFilter
  notificationId: IntFilter
  updatedAt: DateTimeFilter
}

input ClubNotificationWhereUniqueInput {
  clubId_notificationId: ClubNotificationClubIdNotificationIdCompoundUniqueInput
  id: Int
}

input ClubOrderByWithAggregationInput {
  _avg: ClubAvgOrderByAggregateInput
  _count: ClubCountOrderByAggregateInput
  _max: ClubMaxOrderByAggregateInput
  _min: ClubMinOrderByAggregateInput
  _sum: ClubSumOrderByAggregateInput
  createdAt: SortOrder
  deletedAt: SortOrder
  description: SortOrder
  id: SortOrder
  image: SortOrder
  links: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input ClubOrderByWithRelationInput {
  clubCoordinator: ClubCoordinatorOrderByRelationAggregateInput
  clubEvents: ClubEventOrderByRelationAggregateInput
  clubMember: ClubMemberOrderByRelationAggregateInput
  clubNotifications: ClubNotificationOrderByRelationAggregateInput
  clubRank: ClubRankOrderByWithRelationInput
  clubtags: ClubTagOrderByRelationAggregateInput
  createdAt: SortOrder
  deletedAt: SortOrder
  description: SortOrder
  id: SortOrder
  image: SortOrder
  links: SortOrder
  name: SortOrder
  otp: OTPOrderByWithRelationInput
  subscription: SubscriptionOrderByRelationAggregateInput
  updatedAt: SortOrder
}

type ClubRank {
  club: Club!
  clubId: Int!
  createdAt: DateTime!
  deletedAt: DateTime
  eventCount: Int!
  id: Int!
  moneyAwarded: Int!
  rank: Int!
  rsvpCount: Int!
  upVoteCount: Int!
  updatedAt: DateTime!
}

type ClubRankAvgAggregate {
  clubId: Float
  eventCount: Float
  id: Float
  moneyAwarded: Float
  rank: Float
  rsvpCount: Float
  upVoteCount: Float
}

input ClubRankAvgOrderByAggregateInput {
  clubId: SortOrder
  eventCount: SortOrder
  id: SortOrder
  moneyAwarded: SortOrder
  rank: SortOrder
  rsvpCount: SortOrder
  upVoteCount: SortOrder
}

type ClubRankCountAggregate {
  _all: Int!
  clubId: Int!
  createdAt: Int!
  deletedAt: Int!
  eventCount: Int!
  id: Int!
  moneyAwarded: Int!
  rank: Int!
  rsvpCount: Int!
  upVoteCount: Int!
  updatedAt: Int!
}

input ClubRankCountOrderByAggregateInput {
  clubId: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  eventCount: SortOrder
  id: SortOrder
  moneyAwarded: SortOrder
  rank: SortOrder
  rsvpCount: SortOrder
  upVoteCount: SortOrder
  updatedAt: SortOrder
}

input ClubRankCreateInput {
  club: ClubCreateNestedOneWithoutClubRankInput!
  createdAt: DateTime
  deletedAt: DateTime
  eventCount: Int!
  moneyAwarded: Int!
  rank: Int!
  rsvpCount: Int!
  upVoteCount: Int!
  updatedAt: DateTime
}

input ClubRankCreateManyInput {
  clubId: Int!
  createdAt: DateTime
  deletedAt: DateTime
  eventCount: Int!
  id: Int
  moneyAwarded: Int!
  rank: Int!
  rsvpCount: Int!
  upVoteCount: Int!
  updatedAt: DateTime
}

input ClubRankCreateNestedOneWithoutClubInput {
  connect: ClubRankWhereUniqueInput
  connectOrCreate: ClubRankCreateOrConnectWithoutClubInput
  create: ClubRankCreateWithoutClubInput
}

input ClubRankCreateOrConnectWithoutClubInput {
  create: ClubRankCreateWithoutClubInput!
  where: ClubRankWhereUniqueInput!
}

input ClubRankCreateWithoutClubInput {
  createdAt: DateTime
  deletedAt: DateTime
  eventCount: Int!
  moneyAwarded: Int!
  rank: Int!
  rsvpCount: Int!
  upVoteCount: Int!
  updatedAt: DateTime
}

type ClubRankGroupBy {
  _avg: ClubRankAvgAggregate
  _count: ClubRankCountAggregate
  _max: ClubRankMaxAggregate
  _min: ClubRankMinAggregate
  _sum: ClubRankSumAggregate
  clubId: Int!
  createdAt: DateTime!
  deletedAt: DateTime
  eventCount: Int!
  id: Int!
  moneyAwarded: Int!
  rank: Int!
  rsvpCount: Int!
  upVoteCount: Int!
  updatedAt: DateTime!
}

type ClubRankMaxAggregate {
  clubId: Int
  createdAt: DateTime
  deletedAt: DateTime
  eventCount: Int
  id: Int
  moneyAwarded: Int
  rank: Int
  rsvpCount: Int
  upVoteCount: Int
  updatedAt: DateTime
}

input ClubRankMaxOrderByAggregateInput {
  clubId: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  eventCount: SortOrder
  id: SortOrder
  moneyAwarded: SortOrder
  rank: SortOrder
  rsvpCount: SortOrder
  upVoteCount: SortOrder
  updatedAt: SortOrder
}

type ClubRankMinAggregate {
  clubId: Int
  createdAt: DateTime
  deletedAt: DateTime
  eventCount: Int
  id: Int
  moneyAwarded: Int
  rank: Int
  rsvpCount: Int
  upVoteCount: Int
  updatedAt: DateTime
}

input ClubRankMinOrderByAggregateInput {
  clubId: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  eventCount: SortOrder
  id: SortOrder
  moneyAwarded: SortOrder
  rank: SortOrder
  rsvpCount: SortOrder
  upVoteCount: SortOrder
  updatedAt: SortOrder
}

input ClubRankOrderByWithAggregationInput {
  _avg: ClubRankAvgOrderByAggregateInput
  _count: ClubRankCountOrderByAggregateInput
  _max: ClubRankMaxOrderByAggregateInput
  _min: ClubRankMinOrderByAggregateInput
  _sum: ClubRankSumOrderByAggregateInput
  clubId: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  eventCount: SortOrder
  id: SortOrder
  moneyAwarded: SortOrder
  rank: SortOrder
  rsvpCount: SortOrder
  upVoteCount: SortOrder
  updatedAt: SortOrder
}

input ClubRankOrderByWithRelationInput {
  club: ClubOrderByWithRelationInput
  clubId: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  eventCount: SortOrder
  id: SortOrder
  moneyAwarded: SortOrder
  rank: SortOrder
  rsvpCount: SortOrder
  upVoteCount: SortOrder
  updatedAt: SortOrder
}

input ClubRankRelationFilter {
  is: ClubRankWhereInput
  isNot: ClubRankWhereInput
}

enum ClubRankScalarFieldEnum {
  clubId
  createdAt
  deletedAt
  eventCount
  id
  moneyAwarded
  rank
  rsvpCount
  upVoteCount
  updatedAt
}

input ClubRankScalarWhereWithAggregatesInput {
  AND: [ClubRankScalarWhereWithAggregatesInput!]
  NOT: [ClubRankScalarWhereWithAggregatesInput!]
  OR: [ClubRankScalarWhereWithAggregatesInput!]
  clubId: IntWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  deletedAt: DateTimeNullableWithAggregatesFilter
  eventCount: IntWithAggregatesFilter
  id: IntWithAggregatesFilter
  moneyAwarded: IntWithAggregatesFilter
  rank: IntWithAggregatesFilter
  rsvpCount: IntWithAggregatesFilter
  upVoteCount: IntWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type ClubRankSumAggregate {
  clubId: Int
  eventCount: Int
  id: Int
  moneyAwarded: Int
  rank: Int
  rsvpCount: Int
  upVoteCount: Int
}

input ClubRankSumOrderByAggregateInput {
  clubId: SortOrder
  eventCount: SortOrder
  id: SortOrder
  moneyAwarded: SortOrder
  rank: SortOrder
  rsvpCount: SortOrder
  upVoteCount: SortOrder
}

input ClubRankUpdateInput {
  club: ClubUpdateOneRequiredWithoutClubRankInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  eventCount: IntFieldUpdateOperationsInput
  moneyAwarded: IntFieldUpdateOperationsInput
  rank: IntFieldUpdateOperationsInput
  rsvpCount: IntFieldUpdateOperationsInput
  upVoteCount: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClubRankUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  eventCount: IntFieldUpdateOperationsInput
  moneyAwarded: IntFieldUpdateOperationsInput
  rank: IntFieldUpdateOperationsInput
  rsvpCount: IntFieldUpdateOperationsInput
  upVoteCount: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClubRankUpdateOneWithoutClubInput {
  connect: ClubRankWhereUniqueInput
  connectOrCreate: ClubRankCreateOrConnectWithoutClubInput
  create: ClubRankCreateWithoutClubInput
  delete: Boolean
  disconnect: Boolean
  update: ClubRankUpdateWithoutClubInput
  upsert: ClubRankUpsertWithoutClubInput
}

input ClubRankUpdateWithoutClubInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  eventCount: IntFieldUpdateOperationsInput
  moneyAwarded: IntFieldUpdateOperationsInput
  rank: IntFieldUpdateOperationsInput
  rsvpCount: IntFieldUpdateOperationsInput
  upVoteCount: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClubRankUpsertWithoutClubInput {
  create: ClubRankCreateWithoutClubInput!
  update: ClubRankUpdateWithoutClubInput!
}

input ClubRankWhereInput {
  AND: [ClubRankWhereInput!]
  NOT: [ClubRankWhereInput!]
  OR: [ClubRankWhereInput!]
  club: ClubRelationFilter
  clubId: IntFilter
  createdAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  eventCount: IntFilter
  id: IntFilter
  moneyAwarded: IntFilter
  rank: IntFilter
  rsvpCount: IntFilter
  upVoteCount: IntFilter
  updatedAt: DateTimeFilter
}

input ClubRankWhereUniqueInput {
  clubId: Int
  id: Int
}

input ClubRelationFilter {
  is: ClubWhereInput
  isNot: ClubWhereInput
}

enum ClubScalarFieldEnum {
  createdAt
  deletedAt
  description
  id
  image
  links
  name
  updatedAt
}

input ClubScalarWhereWithAggregatesInput {
  AND: [ClubScalarWhereWithAggregatesInput!]
  NOT: [ClubScalarWhereWithAggregatesInput!]
  OR: [ClubScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  deletedAt: DateTimeNullableWithAggregatesFilter
  description: StringWithAggregatesFilter
  id: IntWithAggregatesFilter
  image: StringWithAggregatesFilter
  links: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type ClubSumAggregate {
  id: Int
}

input ClubSumOrderByAggregateInput {
  id: SortOrder
}

type ClubTag {
  club: Club!
  clubId: Int!
  createdAt: DateTime!
  deletedAt: DateTime
  id: Int!
  tag: Tag!
  tagId: Int!
  updatedAt: DateTime!
}

type ClubTagAvgAggregate {
  clubId: Float
  id: Float
  tagId: Float
}

input ClubTagAvgOrderByAggregateInput {
  clubId: SortOrder
  id: SortOrder
  tagId: SortOrder
}

input ClubTagClubIdTagIdCompoundUniqueInput {
  clubId: Int!
  tagId: Int!
}

type ClubTagCountAggregate {
  _all: Int!
  clubId: Int!
  createdAt: Int!
  deletedAt: Int!
  id: Int!
  tagId: Int!
  updatedAt: Int!
}

input ClubTagCountOrderByAggregateInput {
  clubId: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  tagId: SortOrder
  updatedAt: SortOrder
}

input ClubTagCreateInput {
  club: ClubCreateNestedOneWithoutClubtagsInput!
  createdAt: DateTime
  deletedAt: DateTime
  tag: TagCreateNestedOneWithoutClubTagsInput!
  updatedAt: DateTime
}

input ClubTagCreateManyClubInput {
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  tagId: Int!
  updatedAt: DateTime
}

input ClubTagCreateManyClubInputEnvelope {
  data: [ClubTagCreateManyClubInput!]!
  skipDuplicates: Boolean
}

input ClubTagCreateManyInput {
  clubId: Int!
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  tagId: Int!
  updatedAt: DateTime
}

input ClubTagCreateManyTagInput {
  clubId: Int!
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  updatedAt: DateTime
}

input ClubTagCreateManyTagInputEnvelope {
  data: [ClubTagCreateManyTagInput!]!
  skipDuplicates: Boolean
}

input ClubTagCreateNestedManyWithoutClubInput {
  connect: [ClubTagWhereUniqueInput!]
  connectOrCreate: [ClubTagCreateOrConnectWithoutClubInput!]
  create: [ClubTagCreateWithoutClubInput!]
  createMany: ClubTagCreateManyClubInputEnvelope
}

input ClubTagCreateNestedManyWithoutTagInput {
  connect: [ClubTagWhereUniqueInput!]
  connectOrCreate: [ClubTagCreateOrConnectWithoutTagInput!]
  create: [ClubTagCreateWithoutTagInput!]
  createMany: ClubTagCreateManyTagInputEnvelope
}

input ClubTagCreateOrConnectWithoutClubInput {
  create: ClubTagCreateWithoutClubInput!
  where: ClubTagWhereUniqueInput!
}

input ClubTagCreateOrConnectWithoutTagInput {
  create: ClubTagCreateWithoutTagInput!
  where: ClubTagWhereUniqueInput!
}

input ClubTagCreateWithoutClubInput {
  createdAt: DateTime
  deletedAt: DateTime
  tag: TagCreateNestedOneWithoutClubTagsInput!
  updatedAt: DateTime
}

input ClubTagCreateWithoutTagInput {
  club: ClubCreateNestedOneWithoutClubtagsInput!
  createdAt: DateTime
  deletedAt: DateTime
  updatedAt: DateTime
}

type ClubTagGroupBy {
  _avg: ClubTagAvgAggregate
  _count: ClubTagCountAggregate
  _max: ClubTagMaxAggregate
  _min: ClubTagMinAggregate
  _sum: ClubTagSumAggregate
  clubId: Int!
  createdAt: DateTime!
  deletedAt: DateTime
  id: Int!
  tagId: Int!
  updatedAt: DateTime!
}

input ClubTagListRelationFilter {
  every: ClubTagWhereInput
  none: ClubTagWhereInput
  some: ClubTagWhereInput
}

type ClubTagMaxAggregate {
  clubId: Int
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  tagId: Int
  updatedAt: DateTime
}

input ClubTagMaxOrderByAggregateInput {
  clubId: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  tagId: SortOrder
  updatedAt: SortOrder
}

type ClubTagMinAggregate {
  clubId: Int
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  tagId: Int
  updatedAt: DateTime
}

input ClubTagMinOrderByAggregateInput {
  clubId: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  tagId: SortOrder
  updatedAt: SortOrder
}

input ClubTagOrderByRelationAggregateInput {
  _count: SortOrder
}

input ClubTagOrderByWithAggregationInput {
  _avg: ClubTagAvgOrderByAggregateInput
  _count: ClubTagCountOrderByAggregateInput
  _max: ClubTagMaxOrderByAggregateInput
  _min: ClubTagMinOrderByAggregateInput
  _sum: ClubTagSumOrderByAggregateInput
  clubId: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  tagId: SortOrder
  updatedAt: SortOrder
}

input ClubTagOrderByWithRelationInput {
  club: ClubOrderByWithRelationInput
  clubId: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  tag: TagOrderByWithRelationInput
  tagId: SortOrder
  updatedAt: SortOrder
}

enum ClubTagScalarFieldEnum {
  clubId
  createdAt
  deletedAt
  id
  tagId
  updatedAt
}

input ClubTagScalarWhereInput {
  AND: [ClubTagScalarWhereInput!]
  NOT: [ClubTagScalarWhereInput!]
  OR: [ClubTagScalarWhereInput!]
  clubId: IntFilter
  createdAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  id: IntFilter
  tagId: IntFilter
  updatedAt: DateTimeFilter
}

input ClubTagScalarWhereWithAggregatesInput {
  AND: [ClubTagScalarWhereWithAggregatesInput!]
  NOT: [ClubTagScalarWhereWithAggregatesInput!]
  OR: [ClubTagScalarWhereWithAggregatesInput!]
  clubId: IntWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  deletedAt: DateTimeNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  tagId: IntWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type ClubTagSumAggregate {
  clubId: Int
  id: Int
  tagId: Int
}

input ClubTagSumOrderByAggregateInput {
  clubId: SortOrder
  id: SortOrder
  tagId: SortOrder
}

input ClubTagUpdateInput {
  club: ClubUpdateOneRequiredWithoutClubtagsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  tag: TagUpdateOneRequiredWithoutClubTagsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClubTagUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClubTagUpdateManyWithWhereWithoutClubInput {
  data: ClubTagUpdateManyMutationInput!
  where: ClubTagScalarWhereInput!
}

input ClubTagUpdateManyWithWhereWithoutTagInput {
  data: ClubTagUpdateManyMutationInput!
  where: ClubTagScalarWhereInput!
}

input ClubTagUpdateManyWithoutClubInput {
  connect: [ClubTagWhereUniqueInput!]
  connectOrCreate: [ClubTagCreateOrConnectWithoutClubInput!]
  create: [ClubTagCreateWithoutClubInput!]
  createMany: ClubTagCreateManyClubInputEnvelope
  delete: [ClubTagWhereUniqueInput!]
  deleteMany: [ClubTagScalarWhereInput!]
  disconnect: [ClubTagWhereUniqueInput!]
  set: [ClubTagWhereUniqueInput!]
  update: [ClubTagUpdateWithWhereUniqueWithoutClubInput!]
  updateMany: [ClubTagUpdateManyWithWhereWithoutClubInput!]
  upsert: [ClubTagUpsertWithWhereUniqueWithoutClubInput!]
}

input ClubTagUpdateManyWithoutTagInput {
  connect: [ClubTagWhereUniqueInput!]
  connectOrCreate: [ClubTagCreateOrConnectWithoutTagInput!]
  create: [ClubTagCreateWithoutTagInput!]
  createMany: ClubTagCreateManyTagInputEnvelope
  delete: [ClubTagWhereUniqueInput!]
  deleteMany: [ClubTagScalarWhereInput!]
  disconnect: [ClubTagWhereUniqueInput!]
  set: [ClubTagWhereUniqueInput!]
  update: [ClubTagUpdateWithWhereUniqueWithoutTagInput!]
  updateMany: [ClubTagUpdateManyWithWhereWithoutTagInput!]
  upsert: [ClubTagUpsertWithWhereUniqueWithoutTagInput!]
}

input ClubTagUpdateWithWhereUniqueWithoutClubInput {
  data: ClubTagUpdateWithoutClubInput!
  where: ClubTagWhereUniqueInput!
}

input ClubTagUpdateWithWhereUniqueWithoutTagInput {
  data: ClubTagUpdateWithoutTagInput!
  where: ClubTagWhereUniqueInput!
}

input ClubTagUpdateWithoutClubInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  tag: TagUpdateOneRequiredWithoutClubTagsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClubTagUpdateWithoutTagInput {
  club: ClubUpdateOneRequiredWithoutClubtagsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClubTagUpsertWithWhereUniqueWithoutClubInput {
  create: ClubTagCreateWithoutClubInput!
  update: ClubTagUpdateWithoutClubInput!
  where: ClubTagWhereUniqueInput!
}

input ClubTagUpsertWithWhereUniqueWithoutTagInput {
  create: ClubTagCreateWithoutTagInput!
  update: ClubTagUpdateWithoutTagInput!
  where: ClubTagWhereUniqueInput!
}

input ClubTagWhereInput {
  AND: [ClubTagWhereInput!]
  NOT: [ClubTagWhereInput!]
  OR: [ClubTagWhereInput!]
  club: ClubRelationFilter
  clubId: IntFilter
  createdAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  id: IntFilter
  tag: TagRelationFilter
  tagId: IntFilter
  updatedAt: DateTimeFilter
}

input ClubTagWhereUniqueInput {
  clubId_tagId: ClubTagClubIdTagIdCompoundUniqueInput
  id: Int
}

input ClubUpdateInput {
  clubCoordinator: ClubCoordinatorUpdateManyWithoutClubInput
  clubEvents: ClubEventUpdateManyWithoutClubInput
  clubMember: ClubMemberUpdateManyWithoutClubInput
  clubNotifications: ClubNotificationUpdateManyWithoutClubInput
  clubRank: ClubRankUpdateOneWithoutClubInput
  clubtags: ClubTagUpdateManyWithoutClubInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  image: StringFieldUpdateOperationsInput
  links: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  otp: OTPUpdateOneWithoutClubInput
  subscription: SubscriptionUpdateManyWithoutClubInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClubUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  image: StringFieldUpdateOperationsInput
  links: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClubUpdateOneRequiredWithoutClubCoordinatorInput {
  connect: ClubWhereUniqueInput
  connectOrCreate: ClubCreateOrConnectWithoutClubCoordinatorInput
  create: ClubCreateWithoutClubCoordinatorInput
  update: ClubUpdateWithoutClubCoordinatorInput
  upsert: ClubUpsertWithoutClubCoordinatorInput
}

input ClubUpdateOneRequiredWithoutClubEventsInput {
  connect: ClubWhereUniqueInput
  connectOrCreate: ClubCreateOrConnectWithoutClubEventsInput
  create: ClubCreateWithoutClubEventsInput
  update: ClubUpdateWithoutClubEventsInput
  upsert: ClubUpsertWithoutClubEventsInput
}

input ClubUpdateOneRequiredWithoutClubMemberInput {
  connect: ClubWhereUniqueInput
  connectOrCreate: ClubCreateOrConnectWithoutClubMemberInput
  create: ClubCreateWithoutClubMemberInput
  update: ClubUpdateWithoutClubMemberInput
  upsert: ClubUpsertWithoutClubMemberInput
}

input ClubUpdateOneRequiredWithoutClubNotificationsInput {
  connect: ClubWhereUniqueInput
  connectOrCreate: ClubCreateOrConnectWithoutClubNotificationsInput
  create: ClubCreateWithoutClubNotificationsInput
  update: ClubUpdateWithoutClubNotificationsInput
  upsert: ClubUpsertWithoutClubNotificationsInput
}

input ClubUpdateOneRequiredWithoutClubRankInput {
  connect: ClubWhereUniqueInput
  connectOrCreate: ClubCreateOrConnectWithoutClubRankInput
  create: ClubCreateWithoutClubRankInput
  update: ClubUpdateWithoutClubRankInput
  upsert: ClubUpsertWithoutClubRankInput
}

input ClubUpdateOneRequiredWithoutClubtagsInput {
  connect: ClubWhereUniqueInput
  connectOrCreate: ClubCreateOrConnectWithoutClubtagsInput
  create: ClubCreateWithoutClubtagsInput
  update: ClubUpdateWithoutClubtagsInput
  upsert: ClubUpsertWithoutClubtagsInput
}

input ClubUpdateOneRequiredWithoutOtpInput {
  connect: ClubWhereUniqueInput
  connectOrCreate: ClubCreateOrConnectWithoutOtpInput
  create: ClubCreateWithoutOtpInput
  update: ClubUpdateWithoutOtpInput
  upsert: ClubUpsertWithoutOtpInput
}

input ClubUpdateOneRequiredWithoutSubscriptionInput {
  connect: ClubWhereUniqueInput
  connectOrCreate: ClubCreateOrConnectWithoutSubscriptionInput
  create: ClubCreateWithoutSubscriptionInput
  update: ClubUpdateWithoutSubscriptionInput
  upsert: ClubUpsertWithoutSubscriptionInput
}

input ClubUpdateWithoutClubCoordinatorInput {
  clubEvents: ClubEventUpdateManyWithoutClubInput
  clubMember: ClubMemberUpdateManyWithoutClubInput
  clubNotifications: ClubNotificationUpdateManyWithoutClubInput
  clubRank: ClubRankUpdateOneWithoutClubInput
  clubtags: ClubTagUpdateManyWithoutClubInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  image: StringFieldUpdateOperationsInput
  links: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  otp: OTPUpdateOneWithoutClubInput
  subscription: SubscriptionUpdateManyWithoutClubInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClubUpdateWithoutClubEventsInput {
  clubCoordinator: ClubCoordinatorUpdateManyWithoutClubInput
  clubMember: ClubMemberUpdateManyWithoutClubInput
  clubNotifications: ClubNotificationUpdateManyWithoutClubInput
  clubRank: ClubRankUpdateOneWithoutClubInput
  clubtags: ClubTagUpdateManyWithoutClubInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  image: StringFieldUpdateOperationsInput
  links: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  otp: OTPUpdateOneWithoutClubInput
  subscription: SubscriptionUpdateManyWithoutClubInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClubUpdateWithoutClubMemberInput {
  clubCoordinator: ClubCoordinatorUpdateManyWithoutClubInput
  clubEvents: ClubEventUpdateManyWithoutClubInput
  clubNotifications: ClubNotificationUpdateManyWithoutClubInput
  clubRank: ClubRankUpdateOneWithoutClubInput
  clubtags: ClubTagUpdateManyWithoutClubInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  image: StringFieldUpdateOperationsInput
  links: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  otp: OTPUpdateOneWithoutClubInput
  subscription: SubscriptionUpdateManyWithoutClubInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClubUpdateWithoutClubNotificationsInput {
  clubCoordinator: ClubCoordinatorUpdateManyWithoutClubInput
  clubEvents: ClubEventUpdateManyWithoutClubInput
  clubMember: ClubMemberUpdateManyWithoutClubInput
  clubRank: ClubRankUpdateOneWithoutClubInput
  clubtags: ClubTagUpdateManyWithoutClubInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  image: StringFieldUpdateOperationsInput
  links: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  otp: OTPUpdateOneWithoutClubInput
  subscription: SubscriptionUpdateManyWithoutClubInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClubUpdateWithoutClubRankInput {
  clubCoordinator: ClubCoordinatorUpdateManyWithoutClubInput
  clubEvents: ClubEventUpdateManyWithoutClubInput
  clubMember: ClubMemberUpdateManyWithoutClubInput
  clubNotifications: ClubNotificationUpdateManyWithoutClubInput
  clubtags: ClubTagUpdateManyWithoutClubInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  image: StringFieldUpdateOperationsInput
  links: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  otp: OTPUpdateOneWithoutClubInput
  subscription: SubscriptionUpdateManyWithoutClubInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClubUpdateWithoutClubtagsInput {
  clubCoordinator: ClubCoordinatorUpdateManyWithoutClubInput
  clubEvents: ClubEventUpdateManyWithoutClubInput
  clubMember: ClubMemberUpdateManyWithoutClubInput
  clubNotifications: ClubNotificationUpdateManyWithoutClubInput
  clubRank: ClubRankUpdateOneWithoutClubInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  image: StringFieldUpdateOperationsInput
  links: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  otp: OTPUpdateOneWithoutClubInput
  subscription: SubscriptionUpdateManyWithoutClubInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClubUpdateWithoutOtpInput {
  clubCoordinator: ClubCoordinatorUpdateManyWithoutClubInput
  clubEvents: ClubEventUpdateManyWithoutClubInput
  clubMember: ClubMemberUpdateManyWithoutClubInput
  clubNotifications: ClubNotificationUpdateManyWithoutClubInput
  clubRank: ClubRankUpdateOneWithoutClubInput
  clubtags: ClubTagUpdateManyWithoutClubInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  image: StringFieldUpdateOperationsInput
  links: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  subscription: SubscriptionUpdateManyWithoutClubInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClubUpdateWithoutSubscriptionInput {
  clubCoordinator: ClubCoordinatorUpdateManyWithoutClubInput
  clubEvents: ClubEventUpdateManyWithoutClubInput
  clubMember: ClubMemberUpdateManyWithoutClubInput
  clubNotifications: ClubNotificationUpdateManyWithoutClubInput
  clubRank: ClubRankUpdateOneWithoutClubInput
  clubtags: ClubTagUpdateManyWithoutClubInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  image: StringFieldUpdateOperationsInput
  links: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  otp: OTPUpdateOneWithoutClubInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClubUpsertWithoutClubCoordinatorInput {
  create: ClubCreateWithoutClubCoordinatorInput!
  update: ClubUpdateWithoutClubCoordinatorInput!
}

input ClubUpsertWithoutClubEventsInput {
  create: ClubCreateWithoutClubEventsInput!
  update: ClubUpdateWithoutClubEventsInput!
}

input ClubUpsertWithoutClubMemberInput {
  create: ClubCreateWithoutClubMemberInput!
  update: ClubUpdateWithoutClubMemberInput!
}

input ClubUpsertWithoutClubNotificationsInput {
  create: ClubCreateWithoutClubNotificationsInput!
  update: ClubUpdateWithoutClubNotificationsInput!
}

input ClubUpsertWithoutClubRankInput {
  create: ClubCreateWithoutClubRankInput!
  update: ClubUpdateWithoutClubRankInput!
}

input ClubUpsertWithoutClubtagsInput {
  create: ClubCreateWithoutClubtagsInput!
  update: ClubUpdateWithoutClubtagsInput!
}

input ClubUpsertWithoutOtpInput {
  create: ClubCreateWithoutOtpInput!
  update: ClubUpdateWithoutOtpInput!
}

input ClubUpsertWithoutSubscriptionInput {
  create: ClubCreateWithoutSubscriptionInput!
  update: ClubUpdateWithoutSubscriptionInput!
}

input ClubWhereInput {
  AND: [ClubWhereInput!]
  NOT: [ClubWhereInput!]
  OR: [ClubWhereInput!]
  clubCoordinator: ClubCoordinatorListRelationFilter
  clubEvents: ClubEventListRelationFilter
  clubMember: ClubMemberListRelationFilter
  clubNotifications: ClubNotificationListRelationFilter
  clubRank: ClubRankRelationFilter
  clubtags: ClubTagListRelationFilter
  createdAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  description: StringFilter
  id: IntFilter
  image: StringFilter
  links: StringFilter
  name: StringFilter
  otp: OTPRelationFilter
  subscription: SubscriptionListRelationFilter
  updatedAt: DateTimeFilter
}

input ClubWhereUniqueInput {
  id: Int
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input DateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTime!]
}

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

type Event {
  _count: EventCount
  clubEvents(cursor: ClubEventWhereUniqueInput, distinct: [ClubEventScalarFieldEnum!], orderBy: [ClubEventOrderByWithRelationInput!], skip: Int, take: Int, where: ClubEventWhereInput): [ClubEvent!]!
  createdAt: DateTime!
  deadline: DateTime
  deletedAt: DateTime
  description: String!
  eventEndDate: DateTime
  eventStartDate: DateTime
  id: Int!
  image: String!
  link: String
  name: String!
  postions(cursor: PositionWhereUniqueInput, distinct: [PositionScalarFieldEnum!], orderBy: [PositionOrderByWithRelationInput!], skip: Int, take: Int, where: PositionWhereInput): [Position!]!
  rsvpEvent(cursor: RSVPEventWhereUniqueInput, distinct: [RSVPEventScalarFieldEnum!], orderBy: [RSVPEventOrderByWithRelationInput!], skip: Int, take: Int, where: RSVPEventWhereInput): [RSVPEvent!]!
  updatedAt: DateTime!
  venue: String
  votes(cursor: VoteWhereUniqueInput, distinct: [VoteScalarFieldEnum!], orderBy: [VoteOrderByWithRelationInput!], skip: Int, take: Int, where: VoteWhereInput): [Vote!]!
}

type EventAvgAggregate {
  id: Float
}

input EventAvgOrderByAggregateInput {
  id: SortOrder
}

type EventCount {
  clubEvents: Int!
  postions: Int!
  rsvpEvent: Int!
  votes: Int!
}

type EventCountAggregate {
  _all: Int!
  createdAt: Int!
  deadline: Int!
  deletedAt: Int!
  description: Int!
  eventEndDate: Int!
  eventStartDate: Int!
  id: Int!
  image: Int!
  link: Int!
  name: Int!
  updatedAt: Int!
  venue: Int!
}

input EventCountOrderByAggregateInput {
  createdAt: SortOrder
  deadline: SortOrder
  deletedAt: SortOrder
  description: SortOrder
  eventEndDate: SortOrder
  eventStartDate: SortOrder
  id: SortOrder
  image: SortOrder
  link: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  venue: SortOrder
}

input EventCreateInput {
  clubEvents: ClubEventCreateNestedManyWithoutEventInput
  createdAt: DateTime
  deadline: DateTime
  deletedAt: DateTime
  description: String!
  eventEndDate: DateTime
  eventStartDate: DateTime
  image: String
  link: String
  name: String!
  postions: PositionCreateNestedManyWithoutEventInput
  rsvpEvent: RSVPEventCreateNestedManyWithoutEventInput
  updatedAt: DateTime
  venue: String
  votes: VoteCreateNestedManyWithoutEventInput
}

input EventCreateManyInput {
  createdAt: DateTime
  deadline: DateTime
  deletedAt: DateTime
  description: String!
  eventEndDate: DateTime
  eventStartDate: DateTime
  id: Int
  image: String
  link: String
  name: String!
  updatedAt: DateTime
  venue: String
}

input EventCreateNestedOneWithoutClubEventsInput {
  connect: EventWhereUniqueInput
  connectOrCreate: EventCreateOrConnectWithoutClubEventsInput
  create: EventCreateWithoutClubEventsInput
}

input EventCreateNestedOneWithoutPostionsInput {
  connect: EventWhereUniqueInput
  connectOrCreate: EventCreateOrConnectWithoutPostionsInput
  create: EventCreateWithoutPostionsInput
}

input EventCreateNestedOneWithoutRsvpEventInput {
  connect: EventWhereUniqueInput
  connectOrCreate: EventCreateOrConnectWithoutRsvpEventInput
  create: EventCreateWithoutRsvpEventInput
}

input EventCreateNestedOneWithoutVotesInput {
  connect: EventWhereUniqueInput
  connectOrCreate: EventCreateOrConnectWithoutVotesInput
  create: EventCreateWithoutVotesInput
}

input EventCreateOrConnectWithoutClubEventsInput {
  create: EventCreateWithoutClubEventsInput!
  where: EventWhereUniqueInput!
}

input EventCreateOrConnectWithoutPostionsInput {
  create: EventCreateWithoutPostionsInput!
  where: EventWhereUniqueInput!
}

input EventCreateOrConnectWithoutRsvpEventInput {
  create: EventCreateWithoutRsvpEventInput!
  where: EventWhereUniqueInput!
}

input EventCreateOrConnectWithoutVotesInput {
  create: EventCreateWithoutVotesInput!
  where: EventWhereUniqueInput!
}

input EventCreateWithoutClubEventsInput {
  createdAt: DateTime
  deadline: DateTime
  deletedAt: DateTime
  description: String!
  eventEndDate: DateTime
  eventStartDate: DateTime
  image: String
  link: String
  name: String!
  postions: PositionCreateNestedManyWithoutEventInput
  rsvpEvent: RSVPEventCreateNestedManyWithoutEventInput
  updatedAt: DateTime
  venue: String
  votes: VoteCreateNestedManyWithoutEventInput
}

input EventCreateWithoutPostionsInput {
  clubEvents: ClubEventCreateNestedManyWithoutEventInput
  createdAt: DateTime
  deadline: DateTime
  deletedAt: DateTime
  description: String!
  eventEndDate: DateTime
  eventStartDate: DateTime
  image: String
  link: String
  name: String!
  rsvpEvent: RSVPEventCreateNestedManyWithoutEventInput
  updatedAt: DateTime
  venue: String
  votes: VoteCreateNestedManyWithoutEventInput
}

input EventCreateWithoutRsvpEventInput {
  clubEvents: ClubEventCreateNestedManyWithoutEventInput
  createdAt: DateTime
  deadline: DateTime
  deletedAt: DateTime
  description: String!
  eventEndDate: DateTime
  eventStartDate: DateTime
  image: String
  link: String
  name: String!
  postions: PositionCreateNestedManyWithoutEventInput
  updatedAt: DateTime
  venue: String
  votes: VoteCreateNestedManyWithoutEventInput
}

input EventCreateWithoutVotesInput {
  clubEvents: ClubEventCreateNestedManyWithoutEventInput
  createdAt: DateTime
  deadline: DateTime
  deletedAt: DateTime
  description: String!
  eventEndDate: DateTime
  eventStartDate: DateTime
  image: String
  link: String
  name: String!
  postions: PositionCreateNestedManyWithoutEventInput
  rsvpEvent: RSVPEventCreateNestedManyWithoutEventInput
  updatedAt: DateTime
  venue: String
}

type EventGroupBy {
  _avg: EventAvgAggregate
  _count: EventCountAggregate
  _max: EventMaxAggregate
  _min: EventMinAggregate
  _sum: EventSumAggregate
  createdAt: DateTime!
  deadline: DateTime
  deletedAt: DateTime
  description: String!
  eventEndDate: DateTime
  eventStartDate: DateTime
  id: Int!
  image: String!
  link: String
  name: String!
  updatedAt: DateTime!
  venue: String
}

type EventMaxAggregate {
  createdAt: DateTime
  deadline: DateTime
  deletedAt: DateTime
  description: String
  eventEndDate: DateTime
  eventStartDate: DateTime
  id: Int
  image: String
  link: String
  name: String
  updatedAt: DateTime
  venue: String
}

input EventMaxOrderByAggregateInput {
  createdAt: SortOrder
  deadline: SortOrder
  deletedAt: SortOrder
  description: SortOrder
  eventEndDate: SortOrder
  eventStartDate: SortOrder
  id: SortOrder
  image: SortOrder
  link: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  venue: SortOrder
}

type EventMinAggregate {
  createdAt: DateTime
  deadline: DateTime
  deletedAt: DateTime
  description: String
  eventEndDate: DateTime
  eventStartDate: DateTime
  id: Int
  image: String
  link: String
  name: String
  updatedAt: DateTime
  venue: String
}

input EventMinOrderByAggregateInput {
  createdAt: SortOrder
  deadline: SortOrder
  deletedAt: SortOrder
  description: SortOrder
  eventEndDate: SortOrder
  eventStartDate: SortOrder
  id: SortOrder
  image: SortOrder
  link: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  venue: SortOrder
}

input EventOrderByWithAggregationInput {
  _avg: EventAvgOrderByAggregateInput
  _count: EventCountOrderByAggregateInput
  _max: EventMaxOrderByAggregateInput
  _min: EventMinOrderByAggregateInput
  _sum: EventSumOrderByAggregateInput
  createdAt: SortOrder
  deadline: SortOrder
  deletedAt: SortOrder
  description: SortOrder
  eventEndDate: SortOrder
  eventStartDate: SortOrder
  id: SortOrder
  image: SortOrder
  link: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  venue: SortOrder
}

input EventOrderByWithRelationInput {
  clubEvents: ClubEventOrderByRelationAggregateInput
  createdAt: SortOrder
  deadline: SortOrder
  deletedAt: SortOrder
  description: SortOrder
  eventEndDate: SortOrder
  eventStartDate: SortOrder
  id: SortOrder
  image: SortOrder
  link: SortOrder
  name: SortOrder
  postions: PositionOrderByRelationAggregateInput
  rsvpEvent: RSVPEventOrderByRelationAggregateInput
  updatedAt: SortOrder
  venue: SortOrder
  votes: VoteOrderByRelationAggregateInput
}

input EventRelationFilter {
  is: EventWhereInput
  isNot: EventWhereInput
}

enum EventScalarFieldEnum {
  createdAt
  deadline
  deletedAt
  description
  eventEndDate
  eventStartDate
  id
  image
  link
  name
  updatedAt
  venue
}

input EventScalarWhereWithAggregatesInput {
  AND: [EventScalarWhereWithAggregatesInput!]
  NOT: [EventScalarWhereWithAggregatesInput!]
  OR: [EventScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  deadline: DateTimeNullableWithAggregatesFilter
  deletedAt: DateTimeNullableWithAggregatesFilter
  description: StringWithAggregatesFilter
  eventEndDate: DateTimeNullableWithAggregatesFilter
  eventStartDate: DateTimeNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  image: StringWithAggregatesFilter
  link: StringNullableWithAggregatesFilter
  name: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  venue: StringNullableWithAggregatesFilter
}

type EventSumAggregate {
  id: Int
}

input EventSumOrderByAggregateInput {
  id: SortOrder
}

input EventUpdateInput {
  clubEvents: ClubEventUpdateManyWithoutEventInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deadline: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  eventEndDate: NullableDateTimeFieldUpdateOperationsInput
  eventStartDate: NullableDateTimeFieldUpdateOperationsInput
  image: StringFieldUpdateOperationsInput
  link: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  postions: PositionUpdateManyWithoutEventInput
  rsvpEvent: RSVPEventUpdateManyWithoutEventInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  venue: NullableStringFieldUpdateOperationsInput
  votes: VoteUpdateManyWithoutEventInput
}

input EventUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deadline: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  eventEndDate: NullableDateTimeFieldUpdateOperationsInput
  eventStartDate: NullableDateTimeFieldUpdateOperationsInput
  image: StringFieldUpdateOperationsInput
  link: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  venue: NullableStringFieldUpdateOperationsInput
}

input EventUpdateOneRequiredWithoutClubEventsInput {
  connect: EventWhereUniqueInput
  connectOrCreate: EventCreateOrConnectWithoutClubEventsInput
  create: EventCreateWithoutClubEventsInput
  update: EventUpdateWithoutClubEventsInput
  upsert: EventUpsertWithoutClubEventsInput
}

input EventUpdateOneRequiredWithoutPostionsInput {
  connect: EventWhereUniqueInput
  connectOrCreate: EventCreateOrConnectWithoutPostionsInput
  create: EventCreateWithoutPostionsInput
  update: EventUpdateWithoutPostionsInput
  upsert: EventUpsertWithoutPostionsInput
}

input EventUpdateOneRequiredWithoutRsvpEventInput {
  connect: EventWhereUniqueInput
  connectOrCreate: EventCreateOrConnectWithoutRsvpEventInput
  create: EventCreateWithoutRsvpEventInput
  update: EventUpdateWithoutRsvpEventInput
  upsert: EventUpsertWithoutRsvpEventInput
}

input EventUpdateOneRequiredWithoutVotesInput {
  connect: EventWhereUniqueInput
  connectOrCreate: EventCreateOrConnectWithoutVotesInput
  create: EventCreateWithoutVotesInput
  update: EventUpdateWithoutVotesInput
  upsert: EventUpsertWithoutVotesInput
}

input EventUpdateWithoutClubEventsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deadline: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  eventEndDate: NullableDateTimeFieldUpdateOperationsInput
  eventStartDate: NullableDateTimeFieldUpdateOperationsInput
  image: StringFieldUpdateOperationsInput
  link: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  postions: PositionUpdateManyWithoutEventInput
  rsvpEvent: RSVPEventUpdateManyWithoutEventInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  venue: NullableStringFieldUpdateOperationsInput
  votes: VoteUpdateManyWithoutEventInput
}

input EventUpdateWithoutPostionsInput {
  clubEvents: ClubEventUpdateManyWithoutEventInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deadline: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  eventEndDate: NullableDateTimeFieldUpdateOperationsInput
  eventStartDate: NullableDateTimeFieldUpdateOperationsInput
  image: StringFieldUpdateOperationsInput
  link: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  rsvpEvent: RSVPEventUpdateManyWithoutEventInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  venue: NullableStringFieldUpdateOperationsInput
  votes: VoteUpdateManyWithoutEventInput
}

input EventUpdateWithoutRsvpEventInput {
  clubEvents: ClubEventUpdateManyWithoutEventInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deadline: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  eventEndDate: NullableDateTimeFieldUpdateOperationsInput
  eventStartDate: NullableDateTimeFieldUpdateOperationsInput
  image: StringFieldUpdateOperationsInput
  link: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  postions: PositionUpdateManyWithoutEventInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  venue: NullableStringFieldUpdateOperationsInput
  votes: VoteUpdateManyWithoutEventInput
}

input EventUpdateWithoutVotesInput {
  clubEvents: ClubEventUpdateManyWithoutEventInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deadline: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  eventEndDate: NullableDateTimeFieldUpdateOperationsInput
  eventStartDate: NullableDateTimeFieldUpdateOperationsInput
  image: StringFieldUpdateOperationsInput
  link: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  postions: PositionUpdateManyWithoutEventInput
  rsvpEvent: RSVPEventUpdateManyWithoutEventInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  venue: NullableStringFieldUpdateOperationsInput
}

input EventUpsertWithoutClubEventsInput {
  create: EventCreateWithoutClubEventsInput!
  update: EventUpdateWithoutClubEventsInput!
}

input EventUpsertWithoutPostionsInput {
  create: EventCreateWithoutPostionsInput!
  update: EventUpdateWithoutPostionsInput!
}

input EventUpsertWithoutRsvpEventInput {
  create: EventCreateWithoutRsvpEventInput!
  update: EventUpdateWithoutRsvpEventInput!
}

input EventUpsertWithoutVotesInput {
  create: EventCreateWithoutVotesInput!
  update: EventUpdateWithoutVotesInput!
}

input EventWhereInput {
  AND: [EventWhereInput!]
  NOT: [EventWhereInput!]
  OR: [EventWhereInput!]
  clubEvents: ClubEventListRelationFilter
  createdAt: DateTimeFilter
  deadline: DateTimeNullableFilter
  deletedAt: DateTimeNullableFilter
  description: StringFilter
  eventEndDate: DateTimeNullableFilter
  eventStartDate: DateTimeNullableFilter
  id: IntFilter
  image: StringFilter
  link: StringNullableFilter
  name: StringFilter
  postions: PositionListRelationFilter
  rsvpEvent: RSVPEventListRelationFilter
  updatedAt: DateTimeFilter
  venue: StringNullableFilter
  votes: VoteListRelationFilter
}

input EventWhereUniqueInput {
  id: Int
}

type Image {
  data: String!
  url: String!
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input IntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

input IntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

type Mutation {
  createClub(data: ClubCreateInput!): Club!
  createClubCoordinator(data: ClubCoordinatorCreateInput!): ClubCoordinator!
  createClubEvent(data: ClubEventCreateInput!): ClubEvent!
  createClubMember(data: ClubMemberCreateInput!): ClubMember!
  createClubNotification(data: ClubNotificationCreateInput!): ClubNotification!
  createClubRank(data: ClubRankCreateInput!): ClubRank!
  createClubTag(data: ClubTagCreateInput!): ClubTag!
  createEvent(data: EventCreateInput!): Event!
  createManyClub(data: [ClubCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyClubCoordinator(data: [ClubCoordinatorCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyClubEvent(data: [ClubEventCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyClubMember(data: [ClubMemberCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyClubNotification(data: [ClubNotificationCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyClubRank(data: [ClubRankCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyClubTag(data: [ClubTagCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyEvent(data: [EventCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyNotification(data: [NotificationCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyOTP(data: [OTPCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyPosition(data: [PositionCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyRSVPEvent(data: [RSVPEventCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyStudentRank(data: [StudentRankCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManySubscription(data: [SubscriptionCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyTag(data: [TagCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyUser(data: [UserCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyUserNotification(data: [UserNotificationCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyUserTag(data: [UserTagCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyVote(data: [VoteCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createNotification(data: NotificationCreateInput!): Notification!
  createOTP(data: OTPCreateInput!): OTP!
  createPosition(data: PositionCreateInput!): Position!
  createRSVPEvent(data: RSVPEventCreateInput!): RSVPEvent!
  createStudentRank(data: StudentRankCreateInput!): StudentRank!
  createSubscription(data: SubscriptionCreateInput!): Subscription!
  createTag(data: TagCreateInput!): Tag!
  createUser(data: UserCreateInput!): User!
  createUserNotification(data: UserNotificationCreateInput!): UserNotification!
  createUserTag(data: UserTagCreateInput!): UserTag!
  createVote(data: VoteCreateInput!): Vote!
  deleteClub(where: ClubWhereUniqueInput!): Club
  deleteClubCoordinator(where: ClubCoordinatorWhereUniqueInput!): ClubCoordinator
  deleteClubEvent(where: ClubEventWhereUniqueInput!): ClubEvent
  deleteClubMember(where: ClubMemberWhereUniqueInput!): ClubMember
  deleteClubNotification(where: ClubNotificationWhereUniqueInput!): ClubNotification
  deleteClubRank(where: ClubRankWhereUniqueInput!): ClubRank
  deleteClubTag(where: ClubTagWhereUniqueInput!): ClubTag
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteManyClub(where: ClubWhereInput): AffectedRowsOutput!
  deleteManyClubCoordinator(where: ClubCoordinatorWhereInput): AffectedRowsOutput!
  deleteManyClubEvent(where: ClubEventWhereInput): AffectedRowsOutput!
  deleteManyClubMember(where: ClubMemberWhereInput): AffectedRowsOutput!
  deleteManyClubNotification(where: ClubNotificationWhereInput): AffectedRowsOutput!
  deleteManyClubRank(where: ClubRankWhereInput): AffectedRowsOutput!
  deleteManyClubTag(where: ClubTagWhereInput): AffectedRowsOutput!
  deleteManyEvent(where: EventWhereInput): AffectedRowsOutput!
  deleteManyNotification(where: NotificationWhereInput): AffectedRowsOutput!
  deleteManyOTP(where: OTPWhereInput): AffectedRowsOutput!
  deleteManyPosition(where: PositionWhereInput): AffectedRowsOutput!
  deleteManyRSVPEvent(where: RSVPEventWhereInput): AffectedRowsOutput!
  deleteManyStudentRank(where: StudentRankWhereInput): AffectedRowsOutput!
  deleteManySubscription(where: SubscriptionWhereInput): AffectedRowsOutput!
  deleteManyTag(where: TagWhereInput): AffectedRowsOutput!
  deleteManyUser(where: UserWhereInput): AffectedRowsOutput!
  deleteManyUserNotification(where: UserNotificationWhereInput): AffectedRowsOutput!
  deleteManyUserTag(where: UserTagWhereInput): AffectedRowsOutput!
  deleteManyVote(where: VoteWhereInput): AffectedRowsOutput!
  deleteNotification(where: NotificationWhereUniqueInput!): Notification
  deleteOTP(where: OTPWhereUniqueInput!): OTP
  deletePosition(where: PositionWhereUniqueInput!): Position
  deleteRSVPEvent(where: RSVPEventWhereUniqueInput!): RSVPEvent
  deleteStudentRank(where: StudentRankWhereUniqueInput!): StudentRank
  deleteSubscription(where: SubscriptionWhereUniqueInput!): Subscription
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUserNotification(where: UserNotificationWhereUniqueInput!): UserNotification
  deleteUserTag(where: UserTagWhereUniqueInput!): UserTag
  deleteVote(where: VoteWhereUniqueInput!): Vote
  login(token: String!): Auth!
  updateClub(data: ClubUpdateInput!, where: ClubWhereUniqueInput!): Club
  updateClubCoordinator(data: ClubCoordinatorUpdateInput!, where: ClubCoordinatorWhereUniqueInput!): ClubCoordinator
  updateClubEvent(data: ClubEventUpdateInput!, where: ClubEventWhereUniqueInput!): ClubEvent
  updateClubMember(data: ClubMemberUpdateInput!, where: ClubMemberWhereUniqueInput!): ClubMember
  updateClubNotification(data: ClubNotificationUpdateInput!, where: ClubNotificationWhereUniqueInput!): ClubNotification
  updateClubRank(data: ClubRankUpdateInput!, where: ClubRankWhereUniqueInput!): ClubRank
  updateClubTag(data: ClubTagUpdateInput!, where: ClubTagWhereUniqueInput!): ClubTag
  updateEvent(data: EventUpdateInput!, where: EventWhereUniqueInput!): Event
  updateManyClub(data: ClubUpdateManyMutationInput!, where: ClubWhereInput): AffectedRowsOutput!
  updateManyClubCoordinator(data: ClubCoordinatorUpdateManyMutationInput!, where: ClubCoordinatorWhereInput): AffectedRowsOutput!
  updateManyClubEvent(data: ClubEventUpdateManyMutationInput!, where: ClubEventWhereInput): AffectedRowsOutput!
  updateManyClubMember(data: ClubMemberUpdateManyMutationInput!, where: ClubMemberWhereInput): AffectedRowsOutput!
  updateManyClubNotification(data: ClubNotificationUpdateManyMutationInput!, where: ClubNotificationWhereInput): AffectedRowsOutput!
  updateManyClubRank(data: ClubRankUpdateManyMutationInput!, where: ClubRankWhereInput): AffectedRowsOutput!
  updateManyClubTag(data: ClubTagUpdateManyMutationInput!, where: ClubTagWhereInput): AffectedRowsOutput!
  updateManyEvent(data: EventUpdateManyMutationInput!, where: EventWhereInput): AffectedRowsOutput!
  updateManyNotification(data: NotificationUpdateManyMutationInput!, where: NotificationWhereInput): AffectedRowsOutput!
  updateManyOTP(data: OTPUpdateManyMutationInput!, where: OTPWhereInput): AffectedRowsOutput!
  updateManyPosition(data: PositionUpdateManyMutationInput!, where: PositionWhereInput): AffectedRowsOutput!
  updateManyRSVPEvent(data: RSVPEventUpdateManyMutationInput!, where: RSVPEventWhereInput): AffectedRowsOutput!
  updateManyStudentRank(data: StudentRankUpdateManyMutationInput!, where: StudentRankWhereInput): AffectedRowsOutput!
  updateManySubscription(data: SubscriptionUpdateManyMutationInput!, where: SubscriptionWhereInput): AffectedRowsOutput!
  updateManyTag(data: TagUpdateManyMutationInput!, where: TagWhereInput): AffectedRowsOutput!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput!
  updateManyUserNotification(data: UserNotificationUpdateManyMutationInput!, where: UserNotificationWhereInput): AffectedRowsOutput!
  updateManyUserTag(data: UserTagUpdateManyMutationInput!, where: UserTagWhereInput): AffectedRowsOutput!
  updateManyVote(data: VoteUpdateManyMutationInput!, where: VoteWhereInput): AffectedRowsOutput!
  updateNotification(data: NotificationUpdateInput!, where: NotificationWhereUniqueInput!): Notification
  updateOTP(data: OTPUpdateInput!, where: OTPWhereUniqueInput!): OTP
  updatePosition(data: PositionUpdateInput!, where: PositionWhereUniqueInput!): Position
  updateRSVPEvent(data: RSVPEventUpdateInput!, where: RSVPEventWhereUniqueInput!): RSVPEvent
  updateStudentRank(data: StudentRankUpdateInput!, where: StudentRankWhereUniqueInput!): StudentRank
  updateSubscription(data: SubscriptionUpdateInput!, where: SubscriptionWhereUniqueInput!): Subscription
  updateTag(data: TagUpdateInput!, where: TagWhereUniqueInput!): Tag
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateUserNotification(data: UserNotificationUpdateInput!, where: UserNotificationWhereUniqueInput!): UserNotification
  updateUserTag(data: UserTagUpdateInput!, where: UserTagWhereUniqueInput!): UserTag
  updateVote(data: VoteUpdateInput!, where: VoteWhereUniqueInput!): Vote
  upload(data: String!): Image!
  upsertClub(create: ClubCreateInput!, update: ClubUpdateInput!, where: ClubWhereUniqueInput!): Club!
  upsertClubCoordinator(create: ClubCoordinatorCreateInput!, update: ClubCoordinatorUpdateInput!, where: ClubCoordinatorWhereUniqueInput!): ClubCoordinator!
  upsertClubEvent(create: ClubEventCreateInput!, update: ClubEventUpdateInput!, where: ClubEventWhereUniqueInput!): ClubEvent!
  upsertClubMember(create: ClubMemberCreateInput!, update: ClubMemberUpdateInput!, where: ClubMemberWhereUniqueInput!): ClubMember!
  upsertClubNotification(create: ClubNotificationCreateInput!, update: ClubNotificationUpdateInput!, where: ClubNotificationWhereUniqueInput!): ClubNotification!
  upsertClubRank(create: ClubRankCreateInput!, update: ClubRankUpdateInput!, where: ClubRankWhereUniqueInput!): ClubRank!
  upsertClubTag(create: ClubTagCreateInput!, update: ClubTagUpdateInput!, where: ClubTagWhereUniqueInput!): ClubTag!
  upsertEvent(create: EventCreateInput!, update: EventUpdateInput!, where: EventWhereUniqueInput!): Event!
  upsertNotification(create: NotificationCreateInput!, update: NotificationUpdateInput!, where: NotificationWhereUniqueInput!): Notification!
  upsertOTP(create: OTPCreateInput!, update: OTPUpdateInput!, where: OTPWhereUniqueInput!): OTP!
  upsertPosition(create: PositionCreateInput!, update: PositionUpdateInput!, where: PositionWhereUniqueInput!): Position!
  upsertRSVPEvent(create: RSVPEventCreateInput!, update: RSVPEventUpdateInput!, where: RSVPEventWhereUniqueInput!): RSVPEvent!
  upsertStudentRank(create: StudentRankCreateInput!, update: StudentRankUpdateInput!, where: StudentRankWhereUniqueInput!): StudentRank!
  upsertSubscription(create: SubscriptionCreateInput!, update: SubscriptionUpdateInput!, where: SubscriptionWhereUniqueInput!): Subscription!
  upsertTag(create: TagCreateInput!, update: TagUpdateInput!, where: TagWhereUniqueInput!): Tag!
  upsertUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  upsertUserNotification(create: UserNotificationCreateInput!, update: UserNotificationUpdateInput!, where: UserNotificationWhereUniqueInput!): UserNotification!
  upsertUserTag(create: UserTagCreateInput!, update: UserTagUpdateInput!, where: UserTagWhereUniqueInput!): UserTag!
  upsertVote(create: VoteCreateInput!, update: VoteUpdateInput!, where: VoteWhereUniqueInput!): Vote!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTime!]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedFloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedIntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

input NestedIntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type Notification {
  _count: NotificationCount
  createdAt: DateTime!
  createdBy(cursor: ClubNotificationWhereUniqueInput, distinct: [ClubNotificationScalarFieldEnum!], orderBy: [ClubNotificationOrderByWithRelationInput!], skip: Int, take: Int, where: ClubNotificationWhereInput): [ClubNotification!]!
  deletedAt: DateTime
  id: Int!
  message: String!
  updatedAt: DateTime!
  userNotifications(cursor: UserNotificationWhereUniqueInput, distinct: [UserNotificationScalarFieldEnum!], orderBy: [UserNotificationOrderByWithRelationInput!], skip: Int, take: Int, where: UserNotificationWhereInput): [UserNotification!]!
}

type NotificationAvgAggregate {
  id: Float
}

input NotificationAvgOrderByAggregateInput {
  id: SortOrder
}

type NotificationCount {
  createdBy: Int!
  userNotifications: Int!
}

type NotificationCountAggregate {
  _all: Int!
  createdAt: Int!
  deletedAt: Int!
  id: Int!
  message: Int!
  updatedAt: Int!
}

input NotificationCountOrderByAggregateInput {
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  message: SortOrder
  updatedAt: SortOrder
}

input NotificationCreateInput {
  createdAt: DateTime
  createdBy: ClubNotificationCreateNestedManyWithoutNotificationInput
  deletedAt: DateTime
  message: String!
  updatedAt: DateTime
  userNotifications: UserNotificationCreateNestedManyWithoutNotificationInput
}

input NotificationCreateManyInput {
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  message: String!
  updatedAt: DateTime
}

input NotificationCreateNestedOneWithoutCreatedByInput {
  connect: NotificationWhereUniqueInput
  connectOrCreate: NotificationCreateOrConnectWithoutCreatedByInput
  create: NotificationCreateWithoutCreatedByInput
}

input NotificationCreateNestedOneWithoutUserNotificationsInput {
  connect: NotificationWhereUniqueInput
  connectOrCreate: NotificationCreateOrConnectWithoutUserNotificationsInput
  create: NotificationCreateWithoutUserNotificationsInput
}

input NotificationCreateOrConnectWithoutCreatedByInput {
  create: NotificationCreateWithoutCreatedByInput!
  where: NotificationWhereUniqueInput!
}

input NotificationCreateOrConnectWithoutUserNotificationsInput {
  create: NotificationCreateWithoutUserNotificationsInput!
  where: NotificationWhereUniqueInput!
}

input NotificationCreateWithoutCreatedByInput {
  createdAt: DateTime
  deletedAt: DateTime
  message: String!
  updatedAt: DateTime
  userNotifications: UserNotificationCreateNestedManyWithoutNotificationInput
}

input NotificationCreateWithoutUserNotificationsInput {
  createdAt: DateTime
  createdBy: ClubNotificationCreateNestedManyWithoutNotificationInput
  deletedAt: DateTime
  message: String!
  updatedAt: DateTime
}

type NotificationGroupBy {
  _avg: NotificationAvgAggregate
  _count: NotificationCountAggregate
  _max: NotificationMaxAggregate
  _min: NotificationMinAggregate
  _sum: NotificationSumAggregate
  createdAt: DateTime!
  deletedAt: DateTime
  id: Int!
  message: String!
  updatedAt: DateTime!
}

type NotificationMaxAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  message: String
  updatedAt: DateTime
}

input NotificationMaxOrderByAggregateInput {
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  message: SortOrder
  updatedAt: SortOrder
}

type NotificationMinAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  message: String
  updatedAt: DateTime
}

input NotificationMinOrderByAggregateInput {
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  message: SortOrder
  updatedAt: SortOrder
}

input NotificationOrderByWithAggregationInput {
  _avg: NotificationAvgOrderByAggregateInput
  _count: NotificationCountOrderByAggregateInput
  _max: NotificationMaxOrderByAggregateInput
  _min: NotificationMinOrderByAggregateInput
  _sum: NotificationSumOrderByAggregateInput
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  message: SortOrder
  updatedAt: SortOrder
}

input NotificationOrderByWithRelationInput {
  createdAt: SortOrder
  createdBy: ClubNotificationOrderByRelationAggregateInput
  deletedAt: SortOrder
  id: SortOrder
  message: SortOrder
  updatedAt: SortOrder
  userNotifications: UserNotificationOrderByRelationAggregateInput
}

input NotificationRelationFilter {
  is: NotificationWhereInput
  isNot: NotificationWhereInput
}

enum NotificationScalarFieldEnum {
  createdAt
  deletedAt
  id
  message
  updatedAt
}

input NotificationScalarWhereWithAggregatesInput {
  AND: [NotificationScalarWhereWithAggregatesInput!]
  NOT: [NotificationScalarWhereWithAggregatesInput!]
  OR: [NotificationScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  deletedAt: DateTimeNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  message: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type NotificationSumAggregate {
  id: Int
}

input NotificationSumOrderByAggregateInput {
  id: SortOrder
}

input NotificationUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  createdBy: ClubNotificationUpdateManyWithoutNotificationInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  message: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userNotifications: UserNotificationUpdateManyWithoutNotificationInput
}

input NotificationUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  message: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input NotificationUpdateOneRequiredWithoutCreatedByInput {
  connect: NotificationWhereUniqueInput
  connectOrCreate: NotificationCreateOrConnectWithoutCreatedByInput
  create: NotificationCreateWithoutCreatedByInput
  update: NotificationUpdateWithoutCreatedByInput
  upsert: NotificationUpsertWithoutCreatedByInput
}

input NotificationUpdateOneRequiredWithoutUserNotificationsInput {
  connect: NotificationWhereUniqueInput
  connectOrCreate: NotificationCreateOrConnectWithoutUserNotificationsInput
  create: NotificationCreateWithoutUserNotificationsInput
  update: NotificationUpdateWithoutUserNotificationsInput
  upsert: NotificationUpsertWithoutUserNotificationsInput
}

input NotificationUpdateWithoutCreatedByInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  message: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userNotifications: UserNotificationUpdateManyWithoutNotificationInput
}

input NotificationUpdateWithoutUserNotificationsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  createdBy: ClubNotificationUpdateManyWithoutNotificationInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  message: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input NotificationUpsertWithoutCreatedByInput {
  create: NotificationCreateWithoutCreatedByInput!
  update: NotificationUpdateWithoutCreatedByInput!
}

input NotificationUpsertWithoutUserNotificationsInput {
  create: NotificationCreateWithoutUserNotificationsInput!
  update: NotificationUpdateWithoutUserNotificationsInput!
}

input NotificationWhereInput {
  AND: [NotificationWhereInput!]
  NOT: [NotificationWhereInput!]
  OR: [NotificationWhereInput!]
  createdAt: DateTimeFilter
  createdBy: ClubNotificationListRelationFilter
  deletedAt: DateTimeNullableFilter
  id: IntFilter
  message: StringFilter
  updatedAt: DateTimeFilter
  userNotifications: UserNotificationListRelationFilter
}

input NotificationWhereUniqueInput {
  id: Int
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableIntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type OTP {
  club: Club!
  clubId: Int!
  createdAt: DateTime!
  deletedAt: DateTime
  expiredAt: DateTime!
  id: Int!
  otp: String!
  updatedAt: DateTime!
}

type OTPAvgAggregate {
  clubId: Float
  id: Float
}

input OTPAvgOrderByAggregateInput {
  clubId: SortOrder
  id: SortOrder
}

type OTPCountAggregate {
  _all: Int!
  clubId: Int!
  createdAt: Int!
  deletedAt: Int!
  expiredAt: Int!
  id: Int!
  otp: Int!
  updatedAt: Int!
}

input OTPCountOrderByAggregateInput {
  clubId: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  expiredAt: SortOrder
  id: SortOrder
  otp: SortOrder
  updatedAt: SortOrder
}

input OTPCreateInput {
  club: ClubCreateNestedOneWithoutOtpInput!
  createdAt: DateTime
  deletedAt: DateTime
  expiredAt: DateTime!
  otp: String!
  updatedAt: DateTime
}

input OTPCreateManyInput {
  clubId: Int!
  createdAt: DateTime
  deletedAt: DateTime
  expiredAt: DateTime!
  id: Int
  otp: String!
  updatedAt: DateTime
}

input OTPCreateNestedOneWithoutClubInput {
  connect: OTPWhereUniqueInput
  connectOrCreate: OTPCreateOrConnectWithoutClubInput
  create: OTPCreateWithoutClubInput
}

input OTPCreateOrConnectWithoutClubInput {
  create: OTPCreateWithoutClubInput!
  where: OTPWhereUniqueInput!
}

input OTPCreateWithoutClubInput {
  createdAt: DateTime
  deletedAt: DateTime
  expiredAt: DateTime!
  otp: String!
  updatedAt: DateTime
}

type OTPGroupBy {
  _avg: OTPAvgAggregate
  _count: OTPCountAggregate
  _max: OTPMaxAggregate
  _min: OTPMinAggregate
  _sum: OTPSumAggregate
  clubId: Int!
  createdAt: DateTime!
  deletedAt: DateTime
  expiredAt: DateTime!
  id: Int!
  otp: String!
  updatedAt: DateTime!
}

type OTPMaxAggregate {
  clubId: Int
  createdAt: DateTime
  deletedAt: DateTime
  expiredAt: DateTime
  id: Int
  otp: String
  updatedAt: DateTime
}

input OTPMaxOrderByAggregateInput {
  clubId: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  expiredAt: SortOrder
  id: SortOrder
  otp: SortOrder
  updatedAt: SortOrder
}

type OTPMinAggregate {
  clubId: Int
  createdAt: DateTime
  deletedAt: DateTime
  expiredAt: DateTime
  id: Int
  otp: String
  updatedAt: DateTime
}

input OTPMinOrderByAggregateInput {
  clubId: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  expiredAt: SortOrder
  id: SortOrder
  otp: SortOrder
  updatedAt: SortOrder
}

input OTPOrderByWithAggregationInput {
  _avg: OTPAvgOrderByAggregateInput
  _count: OTPCountOrderByAggregateInput
  _max: OTPMaxOrderByAggregateInput
  _min: OTPMinOrderByAggregateInput
  _sum: OTPSumOrderByAggregateInput
  clubId: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  expiredAt: SortOrder
  id: SortOrder
  otp: SortOrder
  updatedAt: SortOrder
}

input OTPOrderByWithRelationInput {
  club: ClubOrderByWithRelationInput
  clubId: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  expiredAt: SortOrder
  id: SortOrder
  otp: SortOrder
  updatedAt: SortOrder
}

input OTPRelationFilter {
  is: OTPWhereInput
  isNot: OTPWhereInput
}

enum OTPScalarFieldEnum {
  clubId
  createdAt
  deletedAt
  expiredAt
  id
  otp
  updatedAt
}

input OTPScalarWhereWithAggregatesInput {
  AND: [OTPScalarWhereWithAggregatesInput!]
  NOT: [OTPScalarWhereWithAggregatesInput!]
  OR: [OTPScalarWhereWithAggregatesInput!]
  clubId: IntWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  deletedAt: DateTimeNullableWithAggregatesFilter
  expiredAt: DateTimeWithAggregatesFilter
  id: IntWithAggregatesFilter
  otp: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type OTPSumAggregate {
  clubId: Int
  id: Int
}

input OTPSumOrderByAggregateInput {
  clubId: SortOrder
  id: SortOrder
}

input OTPUpdateInput {
  club: ClubUpdateOneRequiredWithoutOtpInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  expiredAt: DateTimeFieldUpdateOperationsInput
  otp: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input OTPUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  expiredAt: DateTimeFieldUpdateOperationsInput
  otp: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input OTPUpdateOneWithoutClubInput {
  connect: OTPWhereUniqueInput
  connectOrCreate: OTPCreateOrConnectWithoutClubInput
  create: OTPCreateWithoutClubInput
  delete: Boolean
  disconnect: Boolean
  update: OTPUpdateWithoutClubInput
  upsert: OTPUpsertWithoutClubInput
}

input OTPUpdateWithoutClubInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  expiredAt: DateTimeFieldUpdateOperationsInput
  otp: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input OTPUpsertWithoutClubInput {
  create: OTPCreateWithoutClubInput!
  update: OTPUpdateWithoutClubInput!
}

input OTPWhereInput {
  AND: [OTPWhereInput!]
  NOT: [OTPWhereInput!]
  OR: [OTPWhereInput!]
  club: ClubRelationFilter
  clubId: IntFilter
  createdAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  expiredAt: DateTimeFilter
  id: IntFilter
  otp: StringFilter
  updatedAt: DateTimeFilter
}

input OTPWhereUniqueInput {
  clubId: Int
  id: Int
}

type Position {
  createdAt: DateTime!
  deletedAt: DateTime
  event: Event!
  eventId: Int!
  id: Int!
  money: Int
  position: String!
  updatedAt: DateTime!
  user: User!
  userId: Int!
}

type PositionAvgAggregate {
  eventId: Float
  id: Float
  money: Float
  userId: Float
}

input PositionAvgOrderByAggregateInput {
  eventId: SortOrder
  id: SortOrder
  money: SortOrder
  userId: SortOrder
}

type PositionCountAggregate {
  _all: Int!
  createdAt: Int!
  deletedAt: Int!
  eventId: Int!
  id: Int!
  money: Int!
  position: Int!
  updatedAt: Int!
  userId: Int!
}

input PositionCountOrderByAggregateInput {
  createdAt: SortOrder
  deletedAt: SortOrder
  eventId: SortOrder
  id: SortOrder
  money: SortOrder
  position: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input PositionCreateInput {
  createdAt: DateTime
  deletedAt: DateTime
  event: EventCreateNestedOneWithoutPostionsInput!
  money: Int
  position: String!
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutPositionsInput!
}

input PositionCreateManyEventInput {
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  money: Int
  position: String!
  updatedAt: DateTime
  userId: Int!
}

input PositionCreateManyEventInputEnvelope {
  data: [PositionCreateManyEventInput!]!
  skipDuplicates: Boolean
}

input PositionCreateManyInput {
  createdAt: DateTime
  deletedAt: DateTime
  eventId: Int!
  id: Int
  money: Int
  position: String!
  updatedAt: DateTime
  userId: Int!
}

input PositionCreateManyUserInput {
  createdAt: DateTime
  deletedAt: DateTime
  eventId: Int!
  id: Int
  money: Int
  position: String!
  updatedAt: DateTime
}

input PositionCreateManyUserInputEnvelope {
  data: [PositionCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input PositionCreateNestedManyWithoutEventInput {
  connect: [PositionWhereUniqueInput!]
  connectOrCreate: [PositionCreateOrConnectWithoutEventInput!]
  create: [PositionCreateWithoutEventInput!]
  createMany: PositionCreateManyEventInputEnvelope
}

input PositionCreateNestedManyWithoutUserInput {
  connect: [PositionWhereUniqueInput!]
  connectOrCreate: [PositionCreateOrConnectWithoutUserInput!]
  create: [PositionCreateWithoutUserInput!]
  createMany: PositionCreateManyUserInputEnvelope
}

input PositionCreateOrConnectWithoutEventInput {
  create: PositionCreateWithoutEventInput!
  where: PositionWhereUniqueInput!
}

input PositionCreateOrConnectWithoutUserInput {
  create: PositionCreateWithoutUserInput!
  where: PositionWhereUniqueInput!
}

input PositionCreateWithoutEventInput {
  createdAt: DateTime
  deletedAt: DateTime
  money: Int
  position: String!
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutPositionsInput!
}

input PositionCreateWithoutUserInput {
  createdAt: DateTime
  deletedAt: DateTime
  event: EventCreateNestedOneWithoutPostionsInput!
  money: Int
  position: String!
  updatedAt: DateTime
}

type PositionGroupBy {
  _avg: PositionAvgAggregate
  _count: PositionCountAggregate
  _max: PositionMaxAggregate
  _min: PositionMinAggregate
  _sum: PositionSumAggregate
  createdAt: DateTime!
  deletedAt: DateTime
  eventId: Int!
  id: Int!
  money: Int
  position: String!
  updatedAt: DateTime!
  userId: Int!
}

input PositionListRelationFilter {
  every: PositionWhereInput
  none: PositionWhereInput
  some: PositionWhereInput
}

type PositionMaxAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  eventId: Int
  id: Int
  money: Int
  position: String
  updatedAt: DateTime
  userId: Int
}

input PositionMaxOrderByAggregateInput {
  createdAt: SortOrder
  deletedAt: SortOrder
  eventId: SortOrder
  id: SortOrder
  money: SortOrder
  position: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

type PositionMinAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  eventId: Int
  id: Int
  money: Int
  position: String
  updatedAt: DateTime
  userId: Int
}

input PositionMinOrderByAggregateInput {
  createdAt: SortOrder
  deletedAt: SortOrder
  eventId: SortOrder
  id: SortOrder
  money: SortOrder
  position: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input PositionOrderByRelationAggregateInput {
  _count: SortOrder
}

input PositionOrderByWithAggregationInput {
  _avg: PositionAvgOrderByAggregateInput
  _count: PositionCountOrderByAggregateInput
  _max: PositionMaxOrderByAggregateInput
  _min: PositionMinOrderByAggregateInput
  _sum: PositionSumOrderByAggregateInput
  createdAt: SortOrder
  deletedAt: SortOrder
  eventId: SortOrder
  id: SortOrder
  money: SortOrder
  position: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input PositionOrderByWithRelationInput {
  createdAt: SortOrder
  deletedAt: SortOrder
  event: EventOrderByWithRelationInput
  eventId: SortOrder
  id: SortOrder
  money: SortOrder
  position: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum PositionScalarFieldEnum {
  createdAt
  deletedAt
  eventId
  id
  money
  position
  updatedAt
  userId
}

input PositionScalarWhereInput {
  AND: [PositionScalarWhereInput!]
  NOT: [PositionScalarWhereInput!]
  OR: [PositionScalarWhereInput!]
  createdAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  eventId: IntFilter
  id: IntFilter
  money: IntNullableFilter
  position: StringFilter
  updatedAt: DateTimeFilter
  userId: IntFilter
}

input PositionScalarWhereWithAggregatesInput {
  AND: [PositionScalarWhereWithAggregatesInput!]
  NOT: [PositionScalarWhereWithAggregatesInput!]
  OR: [PositionScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  deletedAt: DateTimeNullableWithAggregatesFilter
  eventId: IntWithAggregatesFilter
  id: IntWithAggregatesFilter
  money: IntNullableWithAggregatesFilter
  position: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userId: IntWithAggregatesFilter
}

type PositionSumAggregate {
  eventId: Int
  id: Int
  money: Int
  userId: Int
}

input PositionSumOrderByAggregateInput {
  eventId: SortOrder
  id: SortOrder
  money: SortOrder
  userId: SortOrder
}

input PositionUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  event: EventUpdateOneRequiredWithoutPostionsInput
  money: NullableIntFieldUpdateOperationsInput
  position: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutPositionsInput
}

input PositionUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  money: NullableIntFieldUpdateOperationsInput
  position: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PositionUpdateManyWithWhereWithoutEventInput {
  data: PositionUpdateManyMutationInput!
  where: PositionScalarWhereInput!
}

input PositionUpdateManyWithWhereWithoutUserInput {
  data: PositionUpdateManyMutationInput!
  where: PositionScalarWhereInput!
}

input PositionUpdateManyWithoutEventInput {
  connect: [PositionWhereUniqueInput!]
  connectOrCreate: [PositionCreateOrConnectWithoutEventInput!]
  create: [PositionCreateWithoutEventInput!]
  createMany: PositionCreateManyEventInputEnvelope
  delete: [PositionWhereUniqueInput!]
  deleteMany: [PositionScalarWhereInput!]
  disconnect: [PositionWhereUniqueInput!]
  set: [PositionWhereUniqueInput!]
  update: [PositionUpdateWithWhereUniqueWithoutEventInput!]
  updateMany: [PositionUpdateManyWithWhereWithoutEventInput!]
  upsert: [PositionUpsertWithWhereUniqueWithoutEventInput!]
}

input PositionUpdateManyWithoutUserInput {
  connect: [PositionWhereUniqueInput!]
  connectOrCreate: [PositionCreateOrConnectWithoutUserInput!]
  create: [PositionCreateWithoutUserInput!]
  createMany: PositionCreateManyUserInputEnvelope
  delete: [PositionWhereUniqueInput!]
  deleteMany: [PositionScalarWhereInput!]
  disconnect: [PositionWhereUniqueInput!]
  set: [PositionWhereUniqueInput!]
  update: [PositionUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [PositionUpdateManyWithWhereWithoutUserInput!]
  upsert: [PositionUpsertWithWhereUniqueWithoutUserInput!]
}

input PositionUpdateWithWhereUniqueWithoutEventInput {
  data: PositionUpdateWithoutEventInput!
  where: PositionWhereUniqueInput!
}

input PositionUpdateWithWhereUniqueWithoutUserInput {
  data: PositionUpdateWithoutUserInput!
  where: PositionWhereUniqueInput!
}

input PositionUpdateWithoutEventInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  money: NullableIntFieldUpdateOperationsInput
  position: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutPositionsInput
}

input PositionUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  event: EventUpdateOneRequiredWithoutPostionsInput
  money: NullableIntFieldUpdateOperationsInput
  position: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PositionUpsertWithWhereUniqueWithoutEventInput {
  create: PositionCreateWithoutEventInput!
  update: PositionUpdateWithoutEventInput!
  where: PositionWhereUniqueInput!
}

input PositionUpsertWithWhereUniqueWithoutUserInput {
  create: PositionCreateWithoutUserInput!
  update: PositionUpdateWithoutUserInput!
  where: PositionWhereUniqueInput!
}

input PositionWhereInput {
  AND: [PositionWhereInput!]
  NOT: [PositionWhereInput!]
  OR: [PositionWhereInput!]
  createdAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  event: EventRelationFilter
  eventId: IntFilter
  id: IntFilter
  money: IntNullableFilter
  position: StringFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: IntFilter
}

input PositionWhereUniqueInput {
  id: Int
}

type Query {
  aggregateClub(cursor: ClubWhereUniqueInput, orderBy: [ClubOrderByWithRelationInput!], skip: Int, take: Int, where: ClubWhereInput): AggregateClub!
  aggregateClubCoordinator(cursor: ClubCoordinatorWhereUniqueInput, orderBy: [ClubCoordinatorOrderByWithRelationInput!], skip: Int, take: Int, where: ClubCoordinatorWhereInput): AggregateClubCoordinator!
  aggregateClubEvent(cursor: ClubEventWhereUniqueInput, orderBy: [ClubEventOrderByWithRelationInput!], skip: Int, take: Int, where: ClubEventWhereInput): AggregateClubEvent!
  aggregateClubMember(cursor: ClubMemberWhereUniqueInput, orderBy: [ClubMemberOrderByWithRelationInput!], skip: Int, take: Int, where: ClubMemberWhereInput): AggregateClubMember!
  aggregateClubNotification(cursor: ClubNotificationWhereUniqueInput, orderBy: [ClubNotificationOrderByWithRelationInput!], skip: Int, take: Int, where: ClubNotificationWhereInput): AggregateClubNotification!
  aggregateClubRank(cursor: ClubRankWhereUniqueInput, orderBy: [ClubRankOrderByWithRelationInput!], skip: Int, take: Int, where: ClubRankWhereInput): AggregateClubRank!
  aggregateClubTag(cursor: ClubTagWhereUniqueInput, orderBy: [ClubTagOrderByWithRelationInput!], skip: Int, take: Int, where: ClubTagWhereInput): AggregateClubTag!
  aggregateEvent(cursor: EventWhereUniqueInput, orderBy: [EventOrderByWithRelationInput!], skip: Int, take: Int, where: EventWhereInput): AggregateEvent!
  aggregateNotification(cursor: NotificationWhereUniqueInput, orderBy: [NotificationOrderByWithRelationInput!], skip: Int, take: Int, where: NotificationWhereInput): AggregateNotification!
  aggregateOTP(cursor: OTPWhereUniqueInput, orderBy: [OTPOrderByWithRelationInput!], skip: Int, take: Int, where: OTPWhereInput): AggregateOTP!
  aggregatePosition(cursor: PositionWhereUniqueInput, orderBy: [PositionOrderByWithRelationInput!], skip: Int, take: Int, where: PositionWhereInput): AggregatePosition!
  aggregateRSVPEvent(cursor: RSVPEventWhereUniqueInput, orderBy: [RSVPEventOrderByWithRelationInput!], skip: Int, take: Int, where: RSVPEventWhereInput): AggregateRSVPEvent!
  aggregateStudentRank(cursor: StudentRankWhereUniqueInput, orderBy: [StudentRankOrderByWithRelationInput!], skip: Int, take: Int, where: StudentRankWhereInput): AggregateStudentRank!
  aggregateSubscription(cursor: SubscriptionWhereUniqueInput, orderBy: [SubscriptionOrderByWithRelationInput!], skip: Int, take: Int, where: SubscriptionWhereInput): AggregateSubscription!
  aggregateTag(cursor: TagWhereUniqueInput, orderBy: [TagOrderByWithRelationInput!], skip: Int, take: Int, where: TagWhereInput): AggregateTag!
  aggregateUser(cursor: UserWhereUniqueInput, orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): AggregateUser!
  aggregateUserNotification(cursor: UserNotificationWhereUniqueInput, orderBy: [UserNotificationOrderByWithRelationInput!], skip: Int, take: Int, where: UserNotificationWhereInput): AggregateUserNotification!
  aggregateUserTag(cursor: UserTagWhereUniqueInput, orderBy: [UserTagOrderByWithRelationInput!], skip: Int, take: Int, where: UserTagWhereInput): AggregateUserTag!
  aggregateVote(cursor: VoteWhereUniqueInput, orderBy: [VoteOrderByWithRelationInput!], skip: Int, take: Int, where: VoteWhereInput): AggregateVote!
  club(where: ClubWhereUniqueInput!): Club
  clubCoordinator(where: ClubCoordinatorWhereUniqueInput!): ClubCoordinator
  clubCoordinators(cursor: ClubCoordinatorWhereUniqueInput, distinct: [ClubCoordinatorScalarFieldEnum!], orderBy: [ClubCoordinatorOrderByWithRelationInput!], skip: Int, take: Int, where: ClubCoordinatorWhereInput): [ClubCoordinator!]!
  clubEvent(where: ClubEventWhereUniqueInput!): ClubEvent
  clubEvents(cursor: ClubEventWhereUniqueInput, distinct: [ClubEventScalarFieldEnum!], orderBy: [ClubEventOrderByWithRelationInput!], skip: Int, take: Int, where: ClubEventWhereInput): [ClubEvent!]!
  clubMember(where: ClubMemberWhereUniqueInput!): ClubMember
  clubMembers(cursor: ClubMemberWhereUniqueInput, distinct: [ClubMemberScalarFieldEnum!], orderBy: [ClubMemberOrderByWithRelationInput!], skip: Int, take: Int, where: ClubMemberWhereInput): [ClubMember!]!
  clubNotification(where: ClubNotificationWhereUniqueInput!): ClubNotification
  clubNotifications(cursor: ClubNotificationWhereUniqueInput, distinct: [ClubNotificationScalarFieldEnum!], orderBy: [ClubNotificationOrderByWithRelationInput!], skip: Int, take: Int, where: ClubNotificationWhereInput): [ClubNotification!]!
  clubRank(where: ClubRankWhereUniqueInput!): ClubRank
  clubRanks(cursor: ClubRankWhereUniqueInput, distinct: [ClubRankScalarFieldEnum!], orderBy: [ClubRankOrderByWithRelationInput!], skip: Int, take: Int, where: ClubRankWhereInput): [ClubRank!]!
  clubTag(where: ClubTagWhereUniqueInput!): ClubTag
  clubTags(cursor: ClubTagWhereUniqueInput, distinct: [ClubTagScalarFieldEnum!], orderBy: [ClubTagOrderByWithRelationInput!], skip: Int, take: Int, where: ClubTagWhereInput): [ClubTag!]!
  clubs(cursor: ClubWhereUniqueInput, distinct: [ClubScalarFieldEnum!], orderBy: [ClubOrderByWithRelationInput!], skip: Int, take: Int, where: ClubWhereInput): [Club!]!
  event(where: EventWhereUniqueInput!): Event
  events(cursor: EventWhereUniqueInput, distinct: [EventScalarFieldEnum!], orderBy: [EventOrderByWithRelationInput!], skip: Int, take: Int, where: EventWhereInput): [Event!]!
  findFirstClub(cursor: ClubWhereUniqueInput, distinct: [ClubScalarFieldEnum!], orderBy: [ClubOrderByWithRelationInput!], skip: Int, take: Int, where: ClubWhereInput): Club
  findFirstClubCoordinator(cursor: ClubCoordinatorWhereUniqueInput, distinct: [ClubCoordinatorScalarFieldEnum!], orderBy: [ClubCoordinatorOrderByWithRelationInput!], skip: Int, take: Int, where: ClubCoordinatorWhereInput): ClubCoordinator
  findFirstClubEvent(cursor: ClubEventWhereUniqueInput, distinct: [ClubEventScalarFieldEnum!], orderBy: [ClubEventOrderByWithRelationInput!], skip: Int, take: Int, where: ClubEventWhereInput): ClubEvent
  findFirstClubMember(cursor: ClubMemberWhereUniqueInput, distinct: [ClubMemberScalarFieldEnum!], orderBy: [ClubMemberOrderByWithRelationInput!], skip: Int, take: Int, where: ClubMemberWhereInput): ClubMember
  findFirstClubNotification(cursor: ClubNotificationWhereUniqueInput, distinct: [ClubNotificationScalarFieldEnum!], orderBy: [ClubNotificationOrderByWithRelationInput!], skip: Int, take: Int, where: ClubNotificationWhereInput): ClubNotification
  findFirstClubRank(cursor: ClubRankWhereUniqueInput, distinct: [ClubRankScalarFieldEnum!], orderBy: [ClubRankOrderByWithRelationInput!], skip: Int, take: Int, where: ClubRankWhereInput): ClubRank
  findFirstClubTag(cursor: ClubTagWhereUniqueInput, distinct: [ClubTagScalarFieldEnum!], orderBy: [ClubTagOrderByWithRelationInput!], skip: Int, take: Int, where: ClubTagWhereInput): ClubTag
  findFirstEvent(cursor: EventWhereUniqueInput, distinct: [EventScalarFieldEnum!], orderBy: [EventOrderByWithRelationInput!], skip: Int, take: Int, where: EventWhereInput): Event
  findFirstNotification(cursor: NotificationWhereUniqueInput, distinct: [NotificationScalarFieldEnum!], orderBy: [NotificationOrderByWithRelationInput!], skip: Int, take: Int, where: NotificationWhereInput): Notification
  findFirstOTP(cursor: OTPWhereUniqueInput, distinct: [OTPScalarFieldEnum!], orderBy: [OTPOrderByWithRelationInput!], skip: Int, take: Int, where: OTPWhereInput): OTP
  findFirstPosition(cursor: PositionWhereUniqueInput, distinct: [PositionScalarFieldEnum!], orderBy: [PositionOrderByWithRelationInput!], skip: Int, take: Int, where: PositionWhereInput): Position
  findFirstRSVPEvent(cursor: RSVPEventWhereUniqueInput, distinct: [RSVPEventScalarFieldEnum!], orderBy: [RSVPEventOrderByWithRelationInput!], skip: Int, take: Int, where: RSVPEventWhereInput): RSVPEvent
  findFirstStudentRank(cursor: StudentRankWhereUniqueInput, distinct: [StudentRankScalarFieldEnum!], orderBy: [StudentRankOrderByWithRelationInput!], skip: Int, take: Int, where: StudentRankWhereInput): StudentRank
  findFirstSubscription(cursor: SubscriptionWhereUniqueInput, distinct: [SubscriptionScalarFieldEnum!], orderBy: [SubscriptionOrderByWithRelationInput!], skip: Int, take: Int, where: SubscriptionWhereInput): Subscription
  findFirstTag(cursor: TagWhereUniqueInput, distinct: [TagScalarFieldEnum!], orderBy: [TagOrderByWithRelationInput!], skip: Int, take: Int, where: TagWhereInput): Tag
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User
  findFirstUserNotification(cursor: UserNotificationWhereUniqueInput, distinct: [UserNotificationScalarFieldEnum!], orderBy: [UserNotificationOrderByWithRelationInput!], skip: Int, take: Int, where: UserNotificationWhereInput): UserNotification
  findFirstUserTag(cursor: UserTagWhereUniqueInput, distinct: [UserTagScalarFieldEnum!], orderBy: [UserTagOrderByWithRelationInput!], skip: Int, take: Int, where: UserTagWhereInput): UserTag
  findFirstVote(cursor: VoteWhereUniqueInput, distinct: [VoteScalarFieldEnum!], orderBy: [VoteOrderByWithRelationInput!], skip: Int, take: Int, where: VoteWhereInput): Vote
  groupByClub(by: [ClubScalarFieldEnum!]!, having: ClubScalarWhereWithAggregatesInput, orderBy: [ClubOrderByWithAggregationInput!], skip: Int, take: Int, where: ClubWhereInput): [ClubGroupBy!]!
  groupByClubCoordinator(by: [ClubCoordinatorScalarFieldEnum!]!, having: ClubCoordinatorScalarWhereWithAggregatesInput, orderBy: [ClubCoordinatorOrderByWithAggregationInput!], skip: Int, take: Int, where: ClubCoordinatorWhereInput): [ClubCoordinatorGroupBy!]!
  groupByClubEvent(by: [ClubEventScalarFieldEnum!]!, having: ClubEventScalarWhereWithAggregatesInput, orderBy: [ClubEventOrderByWithAggregationInput!], skip: Int, take: Int, where: ClubEventWhereInput): [ClubEventGroupBy!]!
  groupByClubMember(by: [ClubMemberScalarFieldEnum!]!, having: ClubMemberScalarWhereWithAggregatesInput, orderBy: [ClubMemberOrderByWithAggregationInput!], skip: Int, take: Int, where: ClubMemberWhereInput): [ClubMemberGroupBy!]!
  groupByClubNotification(by: [ClubNotificationScalarFieldEnum!]!, having: ClubNotificationScalarWhereWithAggregatesInput, orderBy: [ClubNotificationOrderByWithAggregationInput!], skip: Int, take: Int, where: ClubNotificationWhereInput): [ClubNotificationGroupBy!]!
  groupByClubRank(by: [ClubRankScalarFieldEnum!]!, having: ClubRankScalarWhereWithAggregatesInput, orderBy: [ClubRankOrderByWithAggregationInput!], skip: Int, take: Int, where: ClubRankWhereInput): [ClubRankGroupBy!]!
  groupByClubTag(by: [ClubTagScalarFieldEnum!]!, having: ClubTagScalarWhereWithAggregatesInput, orderBy: [ClubTagOrderByWithAggregationInput!], skip: Int, take: Int, where: ClubTagWhereInput): [ClubTagGroupBy!]!
  groupByEvent(by: [EventScalarFieldEnum!]!, having: EventScalarWhereWithAggregatesInput, orderBy: [EventOrderByWithAggregationInput!], skip: Int, take: Int, where: EventWhereInput): [EventGroupBy!]!
  groupByNotification(by: [NotificationScalarFieldEnum!]!, having: NotificationScalarWhereWithAggregatesInput, orderBy: [NotificationOrderByWithAggregationInput!], skip: Int, take: Int, where: NotificationWhereInput): [NotificationGroupBy!]!
  groupByOTP(by: [OTPScalarFieldEnum!]!, having: OTPScalarWhereWithAggregatesInput, orderBy: [OTPOrderByWithAggregationInput!], skip: Int, take: Int, where: OTPWhereInput): [OTPGroupBy!]!
  groupByPosition(by: [PositionScalarFieldEnum!]!, having: PositionScalarWhereWithAggregatesInput, orderBy: [PositionOrderByWithAggregationInput!], skip: Int, take: Int, where: PositionWhereInput): [PositionGroupBy!]!
  groupByRSVPEvent(by: [RSVPEventScalarFieldEnum!]!, having: RSVPEventScalarWhereWithAggregatesInput, orderBy: [RSVPEventOrderByWithAggregationInput!], skip: Int, take: Int, where: RSVPEventWhereInput): [RSVPEventGroupBy!]!
  groupByStudentRank(by: [StudentRankScalarFieldEnum!]!, having: StudentRankScalarWhereWithAggregatesInput, orderBy: [StudentRankOrderByWithAggregationInput!], skip: Int, take: Int, where: StudentRankWhereInput): [StudentRankGroupBy!]!
  groupBySubscription(by: [SubscriptionScalarFieldEnum!]!, having: SubscriptionScalarWhereWithAggregatesInput, orderBy: [SubscriptionOrderByWithAggregationInput!], skip: Int, take: Int, where: SubscriptionWhereInput): [SubscriptionGroupBy!]!
  groupByTag(by: [TagScalarFieldEnum!]!, having: TagScalarWhereWithAggregatesInput, orderBy: [TagOrderByWithAggregationInput!], skip: Int, take: Int, where: TagWhereInput): [TagGroupBy!]!
  groupByUser(by: [UserScalarFieldEnum!]!, having: UserScalarWhereWithAggregatesInput, orderBy: [UserOrderByWithAggregationInput!], skip: Int, take: Int, where: UserWhereInput): [UserGroupBy!]!
  groupByUserNotification(by: [UserNotificationScalarFieldEnum!]!, having: UserNotificationScalarWhereWithAggregatesInput, orderBy: [UserNotificationOrderByWithAggregationInput!], skip: Int, take: Int, where: UserNotificationWhereInput): [UserNotificationGroupBy!]!
  groupByUserTag(by: [UserTagScalarFieldEnum!]!, having: UserTagScalarWhereWithAggregatesInput, orderBy: [UserTagOrderByWithAggregationInput!], skip: Int, take: Int, where: UserTagWhereInput): [UserTagGroupBy!]!
  groupByVote(by: [VoteScalarFieldEnum!]!, having: VoteScalarWhereWithAggregatesInput, orderBy: [VoteOrderByWithAggregationInput!], skip: Int, take: Int, where: VoteWhereInput): [VoteGroupBy!]!
  logout: Boolean!
  me: User!
  notification(where: NotificationWhereUniqueInput!): Notification
  notifications(cursor: NotificationWhereUniqueInput, distinct: [NotificationScalarFieldEnum!], orderBy: [NotificationOrderByWithRelationInput!], skip: Int, take: Int, where: NotificationWhereInput): [Notification!]!
  oTP(where: OTPWhereUniqueInput!): OTP
  oTPS(cursor: OTPWhereUniqueInput, distinct: [OTPScalarFieldEnum!], orderBy: [OTPOrderByWithRelationInput!], skip: Int, take: Int, where: OTPWhereInput): [OTP!]!
  position(where: PositionWhereUniqueInput!): Position
  positions(cursor: PositionWhereUniqueInput, distinct: [PositionScalarFieldEnum!], orderBy: [PositionOrderByWithRelationInput!], skip: Int, take: Int, where: PositionWhereInput): [Position!]!
  rSVPEvent(where: RSVPEventWhereUniqueInput!): RSVPEvent
  rSVPEvents(cursor: RSVPEventWhereUniqueInput, distinct: [RSVPEventScalarFieldEnum!], orderBy: [RSVPEventOrderByWithRelationInput!], skip: Int, take: Int, where: RSVPEventWhereInput): [RSVPEvent!]!
  studentRank(where: StudentRankWhereUniqueInput!): StudentRank
  studentRanks(cursor: StudentRankWhereUniqueInput, distinct: [StudentRankScalarFieldEnum!], orderBy: [StudentRankOrderByWithRelationInput!], skip: Int, take: Int, where: StudentRankWhereInput): [StudentRank!]!
  subscription(where: SubscriptionWhereUniqueInput!): Subscription
  subscriptions(cursor: SubscriptionWhereUniqueInput, distinct: [SubscriptionScalarFieldEnum!], orderBy: [SubscriptionOrderByWithRelationInput!], skip: Int, take: Int, where: SubscriptionWhereInput): [Subscription!]!
  tag(where: TagWhereUniqueInput!): Tag
  tags(cursor: TagWhereUniqueInput, distinct: [TagScalarFieldEnum!], orderBy: [TagOrderByWithRelationInput!], skip: Int, take: Int, where: TagWhereInput): [Tag!]!
  user(where: UserWhereUniqueInput!): User
  userNotification(where: UserNotificationWhereUniqueInput!): UserNotification
  userNotifications(cursor: UserNotificationWhereUniqueInput, distinct: [UserNotificationScalarFieldEnum!], orderBy: [UserNotificationOrderByWithRelationInput!], skip: Int, take: Int, where: UserNotificationWhereInput): [UserNotification!]!
  userTag(where: UserTagWhereUniqueInput!): UserTag
  userTags(cursor: UserTagWhereUniqueInput, distinct: [UserTagScalarFieldEnum!], orderBy: [UserTagOrderByWithRelationInput!], skip: Int, take: Int, where: UserTagWhereInput): [UserTag!]!
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
  vote(where: VoteWhereUniqueInput!): Vote
  votes(cursor: VoteWhereUniqueInput, distinct: [VoteScalarFieldEnum!], orderBy: [VoteOrderByWithRelationInput!], skip: Int, take: Int, where: VoteWhereInput): [Vote!]!
}

type RSVPEvent {
  createdAt: DateTime!
  deletedAt: DateTime
  event: Event!
  eventId: Int!
  id: Int!
  updatedAt: DateTime!
  user: User!
  userId: Int!
}

type RSVPEventAvgAggregate {
  eventId: Float
  id: Float
  userId: Float
}

input RSVPEventAvgOrderByAggregateInput {
  eventId: SortOrder
  id: SortOrder
  userId: SortOrder
}

type RSVPEventCountAggregate {
  _all: Int!
  createdAt: Int!
  deletedAt: Int!
  eventId: Int!
  id: Int!
  updatedAt: Int!
  userId: Int!
}

input RSVPEventCountOrderByAggregateInput {
  createdAt: SortOrder
  deletedAt: SortOrder
  eventId: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input RSVPEventCreateInput {
  createdAt: DateTime
  deletedAt: DateTime
  event: EventCreateNestedOneWithoutRsvpEventInput!
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutRsvpEventInput!
}

input RSVPEventCreateManyEventInput {
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  updatedAt: DateTime
  userId: Int!
}

input RSVPEventCreateManyEventInputEnvelope {
  data: [RSVPEventCreateManyEventInput!]!
  skipDuplicates: Boolean
}

input RSVPEventCreateManyInput {
  createdAt: DateTime
  deletedAt: DateTime
  eventId: Int!
  id: Int
  updatedAt: DateTime
  userId: Int!
}

input RSVPEventCreateManyUserInput {
  createdAt: DateTime
  deletedAt: DateTime
  eventId: Int!
  id: Int
  updatedAt: DateTime
}

input RSVPEventCreateManyUserInputEnvelope {
  data: [RSVPEventCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input RSVPEventCreateNestedManyWithoutEventInput {
  connect: [RSVPEventWhereUniqueInput!]
  connectOrCreate: [RSVPEventCreateOrConnectWithoutEventInput!]
  create: [RSVPEventCreateWithoutEventInput!]
  createMany: RSVPEventCreateManyEventInputEnvelope
}

input RSVPEventCreateNestedManyWithoutUserInput {
  connect: [RSVPEventWhereUniqueInput!]
  connectOrCreate: [RSVPEventCreateOrConnectWithoutUserInput!]
  create: [RSVPEventCreateWithoutUserInput!]
  createMany: RSVPEventCreateManyUserInputEnvelope
}

input RSVPEventCreateOrConnectWithoutEventInput {
  create: RSVPEventCreateWithoutEventInput!
  where: RSVPEventWhereUniqueInput!
}

input RSVPEventCreateOrConnectWithoutUserInput {
  create: RSVPEventCreateWithoutUserInput!
  where: RSVPEventWhereUniqueInput!
}

input RSVPEventCreateWithoutEventInput {
  createdAt: DateTime
  deletedAt: DateTime
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutRsvpEventInput!
}

input RSVPEventCreateWithoutUserInput {
  createdAt: DateTime
  deletedAt: DateTime
  event: EventCreateNestedOneWithoutRsvpEventInput!
  updatedAt: DateTime
}

input RSVPEventEventIdUserIdCompoundUniqueInput {
  eventId: Int!
  userId: Int!
}

type RSVPEventGroupBy {
  _avg: RSVPEventAvgAggregate
  _count: RSVPEventCountAggregate
  _max: RSVPEventMaxAggregate
  _min: RSVPEventMinAggregate
  _sum: RSVPEventSumAggregate
  createdAt: DateTime!
  deletedAt: DateTime
  eventId: Int!
  id: Int!
  updatedAt: DateTime!
  userId: Int!
}

input RSVPEventListRelationFilter {
  every: RSVPEventWhereInput
  none: RSVPEventWhereInput
  some: RSVPEventWhereInput
}

type RSVPEventMaxAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  eventId: Int
  id: Int
  updatedAt: DateTime
  userId: Int
}

input RSVPEventMaxOrderByAggregateInput {
  createdAt: SortOrder
  deletedAt: SortOrder
  eventId: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

type RSVPEventMinAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  eventId: Int
  id: Int
  updatedAt: DateTime
  userId: Int
}

input RSVPEventMinOrderByAggregateInput {
  createdAt: SortOrder
  deletedAt: SortOrder
  eventId: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input RSVPEventOrderByRelationAggregateInput {
  _count: SortOrder
}

input RSVPEventOrderByWithAggregationInput {
  _avg: RSVPEventAvgOrderByAggregateInput
  _count: RSVPEventCountOrderByAggregateInput
  _max: RSVPEventMaxOrderByAggregateInput
  _min: RSVPEventMinOrderByAggregateInput
  _sum: RSVPEventSumOrderByAggregateInput
  createdAt: SortOrder
  deletedAt: SortOrder
  eventId: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input RSVPEventOrderByWithRelationInput {
  createdAt: SortOrder
  deletedAt: SortOrder
  event: EventOrderByWithRelationInput
  eventId: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum RSVPEventScalarFieldEnum {
  createdAt
  deletedAt
  eventId
  id
  updatedAt
  userId
}

input RSVPEventScalarWhereInput {
  AND: [RSVPEventScalarWhereInput!]
  NOT: [RSVPEventScalarWhereInput!]
  OR: [RSVPEventScalarWhereInput!]
  createdAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  eventId: IntFilter
  id: IntFilter
  updatedAt: DateTimeFilter
  userId: IntFilter
}

input RSVPEventScalarWhereWithAggregatesInput {
  AND: [RSVPEventScalarWhereWithAggregatesInput!]
  NOT: [RSVPEventScalarWhereWithAggregatesInput!]
  OR: [RSVPEventScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  deletedAt: DateTimeNullableWithAggregatesFilter
  eventId: IntWithAggregatesFilter
  id: IntWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userId: IntWithAggregatesFilter
}

type RSVPEventSumAggregate {
  eventId: Int
  id: Int
  userId: Int
}

input RSVPEventSumOrderByAggregateInput {
  eventId: SortOrder
  id: SortOrder
  userId: SortOrder
}

input RSVPEventUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  event: EventUpdateOneRequiredWithoutRsvpEventInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutRsvpEventInput
}

input RSVPEventUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RSVPEventUpdateManyWithWhereWithoutEventInput {
  data: RSVPEventUpdateManyMutationInput!
  where: RSVPEventScalarWhereInput!
}

input RSVPEventUpdateManyWithWhereWithoutUserInput {
  data: RSVPEventUpdateManyMutationInput!
  where: RSVPEventScalarWhereInput!
}

input RSVPEventUpdateManyWithoutEventInput {
  connect: [RSVPEventWhereUniqueInput!]
  connectOrCreate: [RSVPEventCreateOrConnectWithoutEventInput!]
  create: [RSVPEventCreateWithoutEventInput!]
  createMany: RSVPEventCreateManyEventInputEnvelope
  delete: [RSVPEventWhereUniqueInput!]
  deleteMany: [RSVPEventScalarWhereInput!]
  disconnect: [RSVPEventWhereUniqueInput!]
  set: [RSVPEventWhereUniqueInput!]
  update: [RSVPEventUpdateWithWhereUniqueWithoutEventInput!]
  updateMany: [RSVPEventUpdateManyWithWhereWithoutEventInput!]
  upsert: [RSVPEventUpsertWithWhereUniqueWithoutEventInput!]
}

input RSVPEventUpdateManyWithoutUserInput {
  connect: [RSVPEventWhereUniqueInput!]
  connectOrCreate: [RSVPEventCreateOrConnectWithoutUserInput!]
  create: [RSVPEventCreateWithoutUserInput!]
  createMany: RSVPEventCreateManyUserInputEnvelope
  delete: [RSVPEventWhereUniqueInput!]
  deleteMany: [RSVPEventScalarWhereInput!]
  disconnect: [RSVPEventWhereUniqueInput!]
  set: [RSVPEventWhereUniqueInput!]
  update: [RSVPEventUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [RSVPEventUpdateManyWithWhereWithoutUserInput!]
  upsert: [RSVPEventUpsertWithWhereUniqueWithoutUserInput!]
}

input RSVPEventUpdateWithWhereUniqueWithoutEventInput {
  data: RSVPEventUpdateWithoutEventInput!
  where: RSVPEventWhereUniqueInput!
}

input RSVPEventUpdateWithWhereUniqueWithoutUserInput {
  data: RSVPEventUpdateWithoutUserInput!
  where: RSVPEventWhereUniqueInput!
}

input RSVPEventUpdateWithoutEventInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutRsvpEventInput
}

input RSVPEventUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  event: EventUpdateOneRequiredWithoutRsvpEventInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RSVPEventUpsertWithWhereUniqueWithoutEventInput {
  create: RSVPEventCreateWithoutEventInput!
  update: RSVPEventUpdateWithoutEventInput!
  where: RSVPEventWhereUniqueInput!
}

input RSVPEventUpsertWithWhereUniqueWithoutUserInput {
  create: RSVPEventCreateWithoutUserInput!
  update: RSVPEventUpdateWithoutUserInput!
  where: RSVPEventWhereUniqueInput!
}

input RSVPEventWhereInput {
  AND: [RSVPEventWhereInput!]
  NOT: [RSVPEventWhereInput!]
  OR: [RSVPEventWhereInput!]
  createdAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  event: EventRelationFilter
  eventId: IntFilter
  id: IntFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: IntFilter
}

input RSVPEventWhereUniqueInput {
  eventId_userId: RSVPEventEventIdUserIdCompoundUniqueInput
  id: Int
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type StudentRank {
  createdAt: DateTime!
  deletedAt: DateTime
  eventCount: Int!
  firstCount: Int!
  id: Int!
  moneyEarned: Int!
  rank: Int!
  secondCount: Int!
  thirdCount: Int!
  updatedAt: DateTime!
  user: User!
  userId: Int!
}

type StudentRankAvgAggregate {
  eventCount: Float
  firstCount: Float
  id: Float
  moneyEarned: Float
  rank: Float
  secondCount: Float
  thirdCount: Float
  userId: Float
}

input StudentRankAvgOrderByAggregateInput {
  eventCount: SortOrder
  firstCount: SortOrder
  id: SortOrder
  moneyEarned: SortOrder
  rank: SortOrder
  secondCount: SortOrder
  thirdCount: SortOrder
  userId: SortOrder
}

type StudentRankCountAggregate {
  _all: Int!
  createdAt: Int!
  deletedAt: Int!
  eventCount: Int!
  firstCount: Int!
  id: Int!
  moneyEarned: Int!
  rank: Int!
  secondCount: Int!
  thirdCount: Int!
  updatedAt: Int!
  userId: Int!
}

input StudentRankCountOrderByAggregateInput {
  createdAt: SortOrder
  deletedAt: SortOrder
  eventCount: SortOrder
  firstCount: SortOrder
  id: SortOrder
  moneyEarned: SortOrder
  rank: SortOrder
  secondCount: SortOrder
  thirdCount: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input StudentRankCreateInput {
  createdAt: DateTime
  deletedAt: DateTime
  eventCount: Int!
  firstCount: Int!
  moneyEarned: Int!
  rank: Int!
  secondCount: Int!
  thirdCount: Int!
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutStudentRankInput!
}

input StudentRankCreateManyInput {
  createdAt: DateTime
  deletedAt: DateTime
  eventCount: Int!
  firstCount: Int!
  id: Int
  moneyEarned: Int!
  rank: Int!
  secondCount: Int!
  thirdCount: Int!
  updatedAt: DateTime
  userId: Int!
}

input StudentRankCreateNestedOneWithoutUserInput {
  connect: StudentRankWhereUniqueInput
  connectOrCreate: StudentRankCreateOrConnectWithoutUserInput
  create: StudentRankCreateWithoutUserInput
}

input StudentRankCreateOrConnectWithoutUserInput {
  create: StudentRankCreateWithoutUserInput!
  where: StudentRankWhereUniqueInput!
}

input StudentRankCreateWithoutUserInput {
  createdAt: DateTime
  deletedAt: DateTime
  eventCount: Int!
  firstCount: Int!
  moneyEarned: Int!
  rank: Int!
  secondCount: Int!
  thirdCount: Int!
  updatedAt: DateTime
}

type StudentRankGroupBy {
  _avg: StudentRankAvgAggregate
  _count: StudentRankCountAggregate
  _max: StudentRankMaxAggregate
  _min: StudentRankMinAggregate
  _sum: StudentRankSumAggregate
  createdAt: DateTime!
  deletedAt: DateTime
  eventCount: Int!
  firstCount: Int!
  id: Int!
  moneyEarned: Int!
  rank: Int!
  secondCount: Int!
  thirdCount: Int!
  updatedAt: DateTime!
  userId: Int!
}

type StudentRankMaxAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  eventCount: Int
  firstCount: Int
  id: Int
  moneyEarned: Int
  rank: Int
  secondCount: Int
  thirdCount: Int
  updatedAt: DateTime
  userId: Int
}

input StudentRankMaxOrderByAggregateInput {
  createdAt: SortOrder
  deletedAt: SortOrder
  eventCount: SortOrder
  firstCount: SortOrder
  id: SortOrder
  moneyEarned: SortOrder
  rank: SortOrder
  secondCount: SortOrder
  thirdCount: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

type StudentRankMinAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  eventCount: Int
  firstCount: Int
  id: Int
  moneyEarned: Int
  rank: Int
  secondCount: Int
  thirdCount: Int
  updatedAt: DateTime
  userId: Int
}

input StudentRankMinOrderByAggregateInput {
  createdAt: SortOrder
  deletedAt: SortOrder
  eventCount: SortOrder
  firstCount: SortOrder
  id: SortOrder
  moneyEarned: SortOrder
  rank: SortOrder
  secondCount: SortOrder
  thirdCount: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input StudentRankOrderByWithAggregationInput {
  _avg: StudentRankAvgOrderByAggregateInput
  _count: StudentRankCountOrderByAggregateInput
  _max: StudentRankMaxOrderByAggregateInput
  _min: StudentRankMinOrderByAggregateInput
  _sum: StudentRankSumOrderByAggregateInput
  createdAt: SortOrder
  deletedAt: SortOrder
  eventCount: SortOrder
  firstCount: SortOrder
  id: SortOrder
  moneyEarned: SortOrder
  rank: SortOrder
  secondCount: SortOrder
  thirdCount: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input StudentRankOrderByWithRelationInput {
  createdAt: SortOrder
  deletedAt: SortOrder
  eventCount: SortOrder
  firstCount: SortOrder
  id: SortOrder
  moneyEarned: SortOrder
  rank: SortOrder
  secondCount: SortOrder
  thirdCount: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

input StudentRankRelationFilter {
  is: StudentRankWhereInput
  isNot: StudentRankWhereInput
}

enum StudentRankScalarFieldEnum {
  createdAt
  deletedAt
  eventCount
  firstCount
  id
  moneyEarned
  rank
  secondCount
  thirdCount
  updatedAt
  userId
}

input StudentRankScalarWhereWithAggregatesInput {
  AND: [StudentRankScalarWhereWithAggregatesInput!]
  NOT: [StudentRankScalarWhereWithAggregatesInput!]
  OR: [StudentRankScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  deletedAt: DateTimeNullableWithAggregatesFilter
  eventCount: IntWithAggregatesFilter
  firstCount: IntWithAggregatesFilter
  id: IntWithAggregatesFilter
  moneyEarned: IntWithAggregatesFilter
  rank: IntWithAggregatesFilter
  secondCount: IntWithAggregatesFilter
  thirdCount: IntWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userId: IntWithAggregatesFilter
}

type StudentRankSumAggregate {
  eventCount: Int
  firstCount: Int
  id: Int
  moneyEarned: Int
  rank: Int
  secondCount: Int
  thirdCount: Int
  userId: Int
}

input StudentRankSumOrderByAggregateInput {
  eventCount: SortOrder
  firstCount: SortOrder
  id: SortOrder
  moneyEarned: SortOrder
  rank: SortOrder
  secondCount: SortOrder
  thirdCount: SortOrder
  userId: SortOrder
}

input StudentRankUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  eventCount: IntFieldUpdateOperationsInput
  firstCount: IntFieldUpdateOperationsInput
  moneyEarned: IntFieldUpdateOperationsInput
  rank: IntFieldUpdateOperationsInput
  secondCount: IntFieldUpdateOperationsInput
  thirdCount: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutStudentRankInput
}

input StudentRankUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  eventCount: IntFieldUpdateOperationsInput
  firstCount: IntFieldUpdateOperationsInput
  moneyEarned: IntFieldUpdateOperationsInput
  rank: IntFieldUpdateOperationsInput
  secondCount: IntFieldUpdateOperationsInput
  thirdCount: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input StudentRankUpdateOneWithoutUserInput {
  connect: StudentRankWhereUniqueInput
  connectOrCreate: StudentRankCreateOrConnectWithoutUserInput
  create: StudentRankCreateWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  update: StudentRankUpdateWithoutUserInput
  upsert: StudentRankUpsertWithoutUserInput
}

input StudentRankUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  eventCount: IntFieldUpdateOperationsInput
  firstCount: IntFieldUpdateOperationsInput
  moneyEarned: IntFieldUpdateOperationsInput
  rank: IntFieldUpdateOperationsInput
  secondCount: IntFieldUpdateOperationsInput
  thirdCount: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input StudentRankUpsertWithoutUserInput {
  create: StudentRankCreateWithoutUserInput!
  update: StudentRankUpdateWithoutUserInput!
}

input StudentRankWhereInput {
  AND: [StudentRankWhereInput!]
  NOT: [StudentRankWhereInput!]
  OR: [StudentRankWhereInput!]
  createdAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  eventCount: IntFilter
  firstCount: IntFilter
  id: IntFilter
  moneyEarned: IntFilter
  rank: IntFilter
  secondCount: IntFilter
  thirdCount: IntFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: IntFilter
}

input StudentRankWhereUniqueInput {
  id: Int
  userId: Int
}

type Subscription {
  club: Club!
  clubId: Int!
  createdAt: DateTime!
  deletedAt: DateTime
  id: Int!
  updatedAt: DateTime!
  user: User!
  userId: Int!
}

type SubscriptionAvgAggregate {
  clubId: Float
  id: Float
  userId: Float
}

input SubscriptionAvgOrderByAggregateInput {
  clubId: SortOrder
  id: SortOrder
  userId: SortOrder
}

input SubscriptionClubIdUserIdCompoundUniqueInput {
  clubId: Int!
  userId: Int!
}

type SubscriptionCountAggregate {
  _all: Int!
  clubId: Int!
  createdAt: Int!
  deletedAt: Int!
  id: Int!
  updatedAt: Int!
  userId: Int!
}

input SubscriptionCountOrderByAggregateInput {
  clubId: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input SubscriptionCreateInput {
  club: ClubCreateNestedOneWithoutSubscriptionInput!
  createdAt: DateTime
  deletedAt: DateTime
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutSubscriptionInput!
}

input SubscriptionCreateManyClubInput {
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  updatedAt: DateTime
  userId: Int!
}

input SubscriptionCreateManyClubInputEnvelope {
  data: [SubscriptionCreateManyClubInput!]!
  skipDuplicates: Boolean
}

input SubscriptionCreateManyInput {
  clubId: Int!
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  updatedAt: DateTime
  userId: Int!
}

input SubscriptionCreateManyUserInput {
  clubId: Int!
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  updatedAt: DateTime
}

input SubscriptionCreateManyUserInputEnvelope {
  data: [SubscriptionCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input SubscriptionCreateNestedManyWithoutClubInput {
  connect: [SubscriptionWhereUniqueInput!]
  connectOrCreate: [SubscriptionCreateOrConnectWithoutClubInput!]
  create: [SubscriptionCreateWithoutClubInput!]
  createMany: SubscriptionCreateManyClubInputEnvelope
}

input SubscriptionCreateNestedManyWithoutUserInput {
  connect: [SubscriptionWhereUniqueInput!]
  connectOrCreate: [SubscriptionCreateOrConnectWithoutUserInput!]
  create: [SubscriptionCreateWithoutUserInput!]
  createMany: SubscriptionCreateManyUserInputEnvelope
}

input SubscriptionCreateOrConnectWithoutClubInput {
  create: SubscriptionCreateWithoutClubInput!
  where: SubscriptionWhereUniqueInput!
}

input SubscriptionCreateOrConnectWithoutUserInput {
  create: SubscriptionCreateWithoutUserInput!
  where: SubscriptionWhereUniqueInput!
}

input SubscriptionCreateWithoutClubInput {
  createdAt: DateTime
  deletedAt: DateTime
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutSubscriptionInput!
}

input SubscriptionCreateWithoutUserInput {
  club: ClubCreateNestedOneWithoutSubscriptionInput!
  createdAt: DateTime
  deletedAt: DateTime
  updatedAt: DateTime
}

type SubscriptionGroupBy {
  _avg: SubscriptionAvgAggregate
  _count: SubscriptionCountAggregate
  _max: SubscriptionMaxAggregate
  _min: SubscriptionMinAggregate
  _sum: SubscriptionSumAggregate
  clubId: Int!
  createdAt: DateTime!
  deletedAt: DateTime
  id: Int!
  updatedAt: DateTime!
  userId: Int!
}

input SubscriptionListRelationFilter {
  every: SubscriptionWhereInput
  none: SubscriptionWhereInput
  some: SubscriptionWhereInput
}

type SubscriptionMaxAggregate {
  clubId: Int
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  updatedAt: DateTime
  userId: Int
}

input SubscriptionMaxOrderByAggregateInput {
  clubId: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

type SubscriptionMinAggregate {
  clubId: Int
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  updatedAt: DateTime
  userId: Int
}

input SubscriptionMinOrderByAggregateInput {
  clubId: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input SubscriptionOrderByRelationAggregateInput {
  _count: SortOrder
}

input SubscriptionOrderByWithAggregationInput {
  _avg: SubscriptionAvgOrderByAggregateInput
  _count: SubscriptionCountOrderByAggregateInput
  _max: SubscriptionMaxOrderByAggregateInput
  _min: SubscriptionMinOrderByAggregateInput
  _sum: SubscriptionSumOrderByAggregateInput
  clubId: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input SubscriptionOrderByWithRelationInput {
  club: ClubOrderByWithRelationInput
  clubId: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum SubscriptionScalarFieldEnum {
  clubId
  createdAt
  deletedAt
  id
  updatedAt
  userId
}

input SubscriptionScalarWhereInput {
  AND: [SubscriptionScalarWhereInput!]
  NOT: [SubscriptionScalarWhereInput!]
  OR: [SubscriptionScalarWhereInput!]
  clubId: IntFilter
  createdAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  id: IntFilter
  updatedAt: DateTimeFilter
  userId: IntFilter
}

input SubscriptionScalarWhereWithAggregatesInput {
  AND: [SubscriptionScalarWhereWithAggregatesInput!]
  NOT: [SubscriptionScalarWhereWithAggregatesInput!]
  OR: [SubscriptionScalarWhereWithAggregatesInput!]
  clubId: IntWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  deletedAt: DateTimeNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userId: IntWithAggregatesFilter
}

type SubscriptionSumAggregate {
  clubId: Int
  id: Int
  userId: Int
}

input SubscriptionSumOrderByAggregateInput {
  clubId: SortOrder
  id: SortOrder
  userId: SortOrder
}

input SubscriptionUpdateInput {
  club: ClubUpdateOneRequiredWithoutSubscriptionInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutSubscriptionInput
}

input SubscriptionUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SubscriptionUpdateManyWithWhereWithoutClubInput {
  data: SubscriptionUpdateManyMutationInput!
  where: SubscriptionScalarWhereInput!
}

input SubscriptionUpdateManyWithWhereWithoutUserInput {
  data: SubscriptionUpdateManyMutationInput!
  where: SubscriptionScalarWhereInput!
}

input SubscriptionUpdateManyWithoutClubInput {
  connect: [SubscriptionWhereUniqueInput!]
  connectOrCreate: [SubscriptionCreateOrConnectWithoutClubInput!]
  create: [SubscriptionCreateWithoutClubInput!]
  createMany: SubscriptionCreateManyClubInputEnvelope
  delete: [SubscriptionWhereUniqueInput!]
  deleteMany: [SubscriptionScalarWhereInput!]
  disconnect: [SubscriptionWhereUniqueInput!]
  set: [SubscriptionWhereUniqueInput!]
  update: [SubscriptionUpdateWithWhereUniqueWithoutClubInput!]
  updateMany: [SubscriptionUpdateManyWithWhereWithoutClubInput!]
  upsert: [SubscriptionUpsertWithWhereUniqueWithoutClubInput!]
}

input SubscriptionUpdateManyWithoutUserInput {
  connect: [SubscriptionWhereUniqueInput!]
  connectOrCreate: [SubscriptionCreateOrConnectWithoutUserInput!]
  create: [SubscriptionCreateWithoutUserInput!]
  createMany: SubscriptionCreateManyUserInputEnvelope
  delete: [SubscriptionWhereUniqueInput!]
  deleteMany: [SubscriptionScalarWhereInput!]
  disconnect: [SubscriptionWhereUniqueInput!]
  set: [SubscriptionWhereUniqueInput!]
  update: [SubscriptionUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [SubscriptionUpdateManyWithWhereWithoutUserInput!]
  upsert: [SubscriptionUpsertWithWhereUniqueWithoutUserInput!]
}

input SubscriptionUpdateWithWhereUniqueWithoutClubInput {
  data: SubscriptionUpdateWithoutClubInput!
  where: SubscriptionWhereUniqueInput!
}

input SubscriptionUpdateWithWhereUniqueWithoutUserInput {
  data: SubscriptionUpdateWithoutUserInput!
  where: SubscriptionWhereUniqueInput!
}

input SubscriptionUpdateWithoutClubInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutSubscriptionInput
}

input SubscriptionUpdateWithoutUserInput {
  club: ClubUpdateOneRequiredWithoutSubscriptionInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SubscriptionUpsertWithWhereUniqueWithoutClubInput {
  create: SubscriptionCreateWithoutClubInput!
  update: SubscriptionUpdateWithoutClubInput!
  where: SubscriptionWhereUniqueInput!
}

input SubscriptionUpsertWithWhereUniqueWithoutUserInput {
  create: SubscriptionCreateWithoutUserInput!
  update: SubscriptionUpdateWithoutUserInput!
  where: SubscriptionWhereUniqueInput!
}

input SubscriptionWhereInput {
  AND: [SubscriptionWhereInput!]
  NOT: [SubscriptionWhereInput!]
  OR: [SubscriptionWhereInput!]
  club: ClubRelationFilter
  clubId: IntFilter
  createdAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  id: IntFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: IntFilter
}

input SubscriptionWhereUniqueInput {
  clubId_userId: SubscriptionClubIdUserIdCompoundUniqueInput
  id: Int
}

type Tag {
  _count: TagCount
  clubTags(cursor: ClubTagWhereUniqueInput, distinct: [ClubTagScalarFieldEnum!], orderBy: [ClubTagOrderByWithRelationInput!], skip: Int, take: Int, where: ClubTagWhereInput): [ClubTag!]!
  createdAt: DateTime!
  deletedAt: DateTime
  id: Int!
  name: String!
  updatedAt: DateTime!
  userTags(cursor: UserTagWhereUniqueInput, distinct: [UserTagScalarFieldEnum!], orderBy: [UserTagOrderByWithRelationInput!], skip: Int, take: Int, where: UserTagWhereInput): [UserTag!]!
}

type TagAvgAggregate {
  id: Float
}

input TagAvgOrderByAggregateInput {
  id: SortOrder
}

type TagCount {
  clubTags: Int!
  userTags: Int!
}

type TagCountAggregate {
  _all: Int!
  createdAt: Int!
  deletedAt: Int!
  id: Int!
  name: Int!
  updatedAt: Int!
}

input TagCountOrderByAggregateInput {
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input TagCreateInput {
  clubTags: ClubTagCreateNestedManyWithoutTagInput
  createdAt: DateTime
  deletedAt: DateTime
  name: String!
  updatedAt: DateTime
  userTags: UserTagCreateNestedManyWithoutTagInput
}

input TagCreateManyInput {
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  name: String!
  updatedAt: DateTime
}

input TagCreateNestedOneWithoutClubTagsInput {
  connect: TagWhereUniqueInput
  connectOrCreate: TagCreateOrConnectWithoutClubTagsInput
  create: TagCreateWithoutClubTagsInput
}

input TagCreateNestedOneWithoutUserTagsInput {
  connect: TagWhereUniqueInput
  connectOrCreate: TagCreateOrConnectWithoutUserTagsInput
  create: TagCreateWithoutUserTagsInput
}

input TagCreateOrConnectWithoutClubTagsInput {
  create: TagCreateWithoutClubTagsInput!
  where: TagWhereUniqueInput!
}

input TagCreateOrConnectWithoutUserTagsInput {
  create: TagCreateWithoutUserTagsInput!
  where: TagWhereUniqueInput!
}

input TagCreateWithoutClubTagsInput {
  createdAt: DateTime
  deletedAt: DateTime
  name: String!
  updatedAt: DateTime
  userTags: UserTagCreateNestedManyWithoutTagInput
}

input TagCreateWithoutUserTagsInput {
  clubTags: ClubTagCreateNestedManyWithoutTagInput
  createdAt: DateTime
  deletedAt: DateTime
  name: String!
  updatedAt: DateTime
}

type TagGroupBy {
  _avg: TagAvgAggregate
  _count: TagCountAggregate
  _max: TagMaxAggregate
  _min: TagMinAggregate
  _sum: TagSumAggregate
  createdAt: DateTime!
  deletedAt: DateTime
  id: Int!
  name: String!
  updatedAt: DateTime!
}

type TagMaxAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  name: String
  updatedAt: DateTime
}

input TagMaxOrderByAggregateInput {
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

type TagMinAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  name: String
  updatedAt: DateTime
}

input TagMinOrderByAggregateInput {
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input TagOrderByWithAggregationInput {
  _avg: TagAvgOrderByAggregateInput
  _count: TagCountOrderByAggregateInput
  _max: TagMaxOrderByAggregateInput
  _min: TagMinOrderByAggregateInput
  _sum: TagSumOrderByAggregateInput
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input TagOrderByWithRelationInput {
  clubTags: ClubTagOrderByRelationAggregateInput
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  userTags: UserTagOrderByRelationAggregateInput
}

input TagRelationFilter {
  is: TagWhereInput
  isNot: TagWhereInput
}

enum TagScalarFieldEnum {
  createdAt
  deletedAt
  id
  name
  updatedAt
}

input TagScalarWhereWithAggregatesInput {
  AND: [TagScalarWhereWithAggregatesInput!]
  NOT: [TagScalarWhereWithAggregatesInput!]
  OR: [TagScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  deletedAt: DateTimeNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type TagSumAggregate {
  id: Int
}

input TagSumOrderByAggregateInput {
  id: SortOrder
}

input TagUpdateInput {
  clubTags: ClubTagUpdateManyWithoutTagInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userTags: UserTagUpdateManyWithoutTagInput
}

input TagUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TagUpdateOneRequiredWithoutClubTagsInput {
  connect: TagWhereUniqueInput
  connectOrCreate: TagCreateOrConnectWithoutClubTagsInput
  create: TagCreateWithoutClubTagsInput
  update: TagUpdateWithoutClubTagsInput
  upsert: TagUpsertWithoutClubTagsInput
}

input TagUpdateOneRequiredWithoutUserTagsInput {
  connect: TagWhereUniqueInput
  connectOrCreate: TagCreateOrConnectWithoutUserTagsInput
  create: TagCreateWithoutUserTagsInput
  update: TagUpdateWithoutUserTagsInput
  upsert: TagUpsertWithoutUserTagsInput
}

input TagUpdateWithoutClubTagsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userTags: UserTagUpdateManyWithoutTagInput
}

input TagUpdateWithoutUserTagsInput {
  clubTags: ClubTagUpdateManyWithoutTagInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TagUpsertWithoutClubTagsInput {
  create: TagCreateWithoutClubTagsInput!
  update: TagUpdateWithoutClubTagsInput!
}

input TagUpsertWithoutUserTagsInput {
  create: TagCreateWithoutUserTagsInput!
  update: TagUpdateWithoutUserTagsInput!
}

input TagWhereInput {
  AND: [TagWhereInput!]
  NOT: [TagWhereInput!]
  OR: [TagWhereInput!]
  clubTags: ClubTagListRelationFilter
  createdAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  id: IntFilter
  name: StringFilter
  updatedAt: DateTimeFilter
  userTags: UserTagListRelationFilter
}

input TagWhereUniqueInput {
  id: Int
}

type User {
  _count: UserCount
  clubCoordinator(cursor: ClubCoordinatorWhereUniqueInput, distinct: [ClubCoordinatorScalarFieldEnum!], orderBy: [ClubCoordinatorOrderByWithRelationInput!], skip: Int, take: Int, where: ClubCoordinatorWhereInput): [ClubCoordinator!]!
  clubMember(cursor: ClubMemberWhereUniqueInput, distinct: [ClubMemberScalarFieldEnum!], orderBy: [ClubMemberOrderByWithRelationInput!], skip: Int, take: Int, where: ClubMemberWhereInput): [ClubMember!]!
  createdAt: DateTime!
  deletedAt: DateTime
  email: String!
  expoToken: String
  id: Int!
  isOnBoarded: Boolean!
  jwtToken: String
  name: String!
  picture: String!
  positions(cursor: PositionWhereUniqueInput, distinct: [PositionScalarFieldEnum!], orderBy: [PositionOrderByWithRelationInput!], skip: Int, take: Int, where: PositionWhereInput): [Position!]!
  rsvpEvent(cursor: RSVPEventWhereUniqueInput, distinct: [RSVPEventScalarFieldEnum!], orderBy: [RSVPEventOrderByWithRelationInput!], skip: Int, take: Int, where: RSVPEventWhereInput): [RSVPEvent!]!
  studentRank: StudentRank
  subscription(cursor: SubscriptionWhereUniqueInput, distinct: [SubscriptionScalarFieldEnum!], orderBy: [SubscriptionOrderByWithRelationInput!], skip: Int, take: Int, where: SubscriptionWhereInput): [Subscription!]!
  updatedAt: DateTime!
  userNotifications(cursor: UserNotificationWhereUniqueInput, distinct: [UserNotificationScalarFieldEnum!], orderBy: [UserNotificationOrderByWithRelationInput!], skip: Int, take: Int, where: UserNotificationWhereInput): [UserNotification!]!
  userTags(cursor: UserTagWhereUniqueInput, distinct: [UserTagScalarFieldEnum!], orderBy: [UserTagOrderByWithRelationInput!], skip: Int, take: Int, where: UserTagWhereInput): [UserTag!]!
  votes(cursor: VoteWhereUniqueInput, distinct: [VoteScalarFieldEnum!], orderBy: [VoteOrderByWithRelationInput!], skip: Int, take: Int, where: VoteWhereInput): [Vote!]!
}

type UserAvgAggregate {
  id: Float
}

input UserAvgOrderByAggregateInput {
  id: SortOrder
}

type UserCount {
  clubCoordinator: Int!
  clubMember: Int!
  positions: Int!
  rsvpEvent: Int!
  subscription: Int!
  userNotifications: Int!
  userTags: Int!
  votes: Int!
}

type UserCountAggregate {
  _all: Int!
  createdAt: Int!
  deletedAt: Int!
  email: Int!
  expoToken: Int!
  id: Int!
  isOnBoarded: Int!
  jwtToken: Int!
  name: Int!
  picture: Int!
  updatedAt: Int!
}

input UserCountOrderByAggregateInput {
  createdAt: SortOrder
  deletedAt: SortOrder
  email: SortOrder
  expoToken: SortOrder
  id: SortOrder
  isOnBoarded: SortOrder
  jwtToken: SortOrder
  name: SortOrder
  picture: SortOrder
  updatedAt: SortOrder
}

input UserCreateInput {
  clubCoordinator: ClubCoordinatorCreateNestedManyWithoutUserInput
  clubMember: ClubMemberCreateNestedManyWithoutUserInput
  createdAt: DateTime
  deletedAt: DateTime
  email: String!
  expoToken: String
  isOnBoarded: Boolean!
  jwtToken: String
  name: String!
  picture: String
  positions: PositionCreateNestedManyWithoutUserInput
  rsvpEvent: RSVPEventCreateNestedManyWithoutUserInput
  studentRank: StudentRankCreateNestedOneWithoutUserInput
  subscription: SubscriptionCreateNestedManyWithoutUserInput
  updatedAt: DateTime
  userNotifications: UserNotificationCreateNestedManyWithoutUserInput
  userTags: UserTagCreateNestedManyWithoutUserInput
  votes: VoteCreateNestedManyWithoutUserInput
}

input UserCreateManyInput {
  createdAt: DateTime
  deletedAt: DateTime
  email: String!
  expoToken: String
  id: Int
  isOnBoarded: Boolean!
  jwtToken: String
  name: String!
  picture: String
  updatedAt: DateTime
}

input UserCreateNestedOneWithoutClubCoordinatorInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutClubCoordinatorInput
  create: UserCreateWithoutClubCoordinatorInput
}

input UserCreateNestedOneWithoutClubMemberInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutClubMemberInput
  create: UserCreateWithoutClubMemberInput
}

input UserCreateNestedOneWithoutPositionsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPositionsInput
  create: UserCreateWithoutPositionsInput
}

input UserCreateNestedOneWithoutRsvpEventInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutRsvpEventInput
  create: UserCreateWithoutRsvpEventInput
}

input UserCreateNestedOneWithoutStudentRankInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutStudentRankInput
  create: UserCreateWithoutStudentRankInput
}

input UserCreateNestedOneWithoutSubscriptionInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutSubscriptionInput
  create: UserCreateWithoutSubscriptionInput
}

input UserCreateNestedOneWithoutUserNotificationsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutUserNotificationsInput
  create: UserCreateWithoutUserNotificationsInput
}

input UserCreateNestedOneWithoutUserTagsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutUserTagsInput
  create: UserCreateWithoutUserTagsInput
}

input UserCreateNestedOneWithoutVotesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutVotesInput
  create: UserCreateWithoutVotesInput
}

input UserCreateOrConnectWithoutClubCoordinatorInput {
  create: UserCreateWithoutClubCoordinatorInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutClubMemberInput {
  create: UserCreateWithoutClubMemberInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutPositionsInput {
  create: UserCreateWithoutPositionsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutRsvpEventInput {
  create: UserCreateWithoutRsvpEventInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutStudentRankInput {
  create: UserCreateWithoutStudentRankInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutSubscriptionInput {
  create: UserCreateWithoutSubscriptionInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutUserNotificationsInput {
  create: UserCreateWithoutUserNotificationsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutUserTagsInput {
  create: UserCreateWithoutUserTagsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutVotesInput {
  create: UserCreateWithoutVotesInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutClubCoordinatorInput {
  clubMember: ClubMemberCreateNestedManyWithoutUserInput
  createdAt: DateTime
  deletedAt: DateTime
  email: String!
  expoToken: String
  isOnBoarded: Boolean!
  jwtToken: String
  name: String!
  picture: String
  positions: PositionCreateNestedManyWithoutUserInput
  rsvpEvent: RSVPEventCreateNestedManyWithoutUserInput
  studentRank: StudentRankCreateNestedOneWithoutUserInput
  subscription: SubscriptionCreateNestedManyWithoutUserInput
  updatedAt: DateTime
  userNotifications: UserNotificationCreateNestedManyWithoutUserInput
  userTags: UserTagCreateNestedManyWithoutUserInput
  votes: VoteCreateNestedManyWithoutUserInput
}

input UserCreateWithoutClubMemberInput {
  clubCoordinator: ClubCoordinatorCreateNestedManyWithoutUserInput
  createdAt: DateTime
  deletedAt: DateTime
  email: String!
  expoToken: String
  isOnBoarded: Boolean!
  jwtToken: String
  name: String!
  picture: String
  positions: PositionCreateNestedManyWithoutUserInput
  rsvpEvent: RSVPEventCreateNestedManyWithoutUserInput
  studentRank: StudentRankCreateNestedOneWithoutUserInput
  subscription: SubscriptionCreateNestedManyWithoutUserInput
  updatedAt: DateTime
  userNotifications: UserNotificationCreateNestedManyWithoutUserInput
  userTags: UserTagCreateNestedManyWithoutUserInput
  votes: VoteCreateNestedManyWithoutUserInput
}

input UserCreateWithoutPositionsInput {
  clubCoordinator: ClubCoordinatorCreateNestedManyWithoutUserInput
  clubMember: ClubMemberCreateNestedManyWithoutUserInput
  createdAt: DateTime
  deletedAt: DateTime
  email: String!
  expoToken: String
  isOnBoarded: Boolean!
  jwtToken: String
  name: String!
  picture: String
  rsvpEvent: RSVPEventCreateNestedManyWithoutUserInput
  studentRank: StudentRankCreateNestedOneWithoutUserInput
  subscription: SubscriptionCreateNestedManyWithoutUserInput
  updatedAt: DateTime
  userNotifications: UserNotificationCreateNestedManyWithoutUserInput
  userTags: UserTagCreateNestedManyWithoutUserInput
  votes: VoteCreateNestedManyWithoutUserInput
}

input UserCreateWithoutRsvpEventInput {
  clubCoordinator: ClubCoordinatorCreateNestedManyWithoutUserInput
  clubMember: ClubMemberCreateNestedManyWithoutUserInput
  createdAt: DateTime
  deletedAt: DateTime
  email: String!
  expoToken: String
  isOnBoarded: Boolean!
  jwtToken: String
  name: String!
  picture: String
  positions: PositionCreateNestedManyWithoutUserInput
  studentRank: StudentRankCreateNestedOneWithoutUserInput
  subscription: SubscriptionCreateNestedManyWithoutUserInput
  updatedAt: DateTime
  userNotifications: UserNotificationCreateNestedManyWithoutUserInput
  userTags: UserTagCreateNestedManyWithoutUserInput
  votes: VoteCreateNestedManyWithoutUserInput
}

input UserCreateWithoutStudentRankInput {
  clubCoordinator: ClubCoordinatorCreateNestedManyWithoutUserInput
  clubMember: ClubMemberCreateNestedManyWithoutUserInput
  createdAt: DateTime
  deletedAt: DateTime
  email: String!
  expoToken: String
  isOnBoarded: Boolean!
  jwtToken: String
  name: String!
  picture: String
  positions: PositionCreateNestedManyWithoutUserInput
  rsvpEvent: RSVPEventCreateNestedManyWithoutUserInput
  subscription: SubscriptionCreateNestedManyWithoutUserInput
  updatedAt: DateTime
  userNotifications: UserNotificationCreateNestedManyWithoutUserInput
  userTags: UserTagCreateNestedManyWithoutUserInput
  votes: VoteCreateNestedManyWithoutUserInput
}

input UserCreateWithoutSubscriptionInput {
  clubCoordinator: ClubCoordinatorCreateNestedManyWithoutUserInput
  clubMember: ClubMemberCreateNestedManyWithoutUserInput
  createdAt: DateTime
  deletedAt: DateTime
  email: String!
  expoToken: String
  isOnBoarded: Boolean!
  jwtToken: String
  name: String!
  picture: String
  positions: PositionCreateNestedManyWithoutUserInput
  rsvpEvent: RSVPEventCreateNestedManyWithoutUserInput
  studentRank: StudentRankCreateNestedOneWithoutUserInput
  updatedAt: DateTime
  userNotifications: UserNotificationCreateNestedManyWithoutUserInput
  userTags: UserTagCreateNestedManyWithoutUserInput
  votes: VoteCreateNestedManyWithoutUserInput
}

input UserCreateWithoutUserNotificationsInput {
  clubCoordinator: ClubCoordinatorCreateNestedManyWithoutUserInput
  clubMember: ClubMemberCreateNestedManyWithoutUserInput
  createdAt: DateTime
  deletedAt: DateTime
  email: String!
  expoToken: String
  isOnBoarded: Boolean!
  jwtToken: String
  name: String!
  picture: String
  positions: PositionCreateNestedManyWithoutUserInput
  rsvpEvent: RSVPEventCreateNestedManyWithoutUserInput
  studentRank: StudentRankCreateNestedOneWithoutUserInput
  subscription: SubscriptionCreateNestedManyWithoutUserInput
  updatedAt: DateTime
  userTags: UserTagCreateNestedManyWithoutUserInput
  votes: VoteCreateNestedManyWithoutUserInput
}

input UserCreateWithoutUserTagsInput {
  clubCoordinator: ClubCoordinatorCreateNestedManyWithoutUserInput
  clubMember: ClubMemberCreateNestedManyWithoutUserInput
  createdAt: DateTime
  deletedAt: DateTime
  email: String!
  expoToken: String
  isOnBoarded: Boolean!
  jwtToken: String
  name: String!
  picture: String
  positions: PositionCreateNestedManyWithoutUserInput
  rsvpEvent: RSVPEventCreateNestedManyWithoutUserInput
  studentRank: StudentRankCreateNestedOneWithoutUserInput
  subscription: SubscriptionCreateNestedManyWithoutUserInput
  updatedAt: DateTime
  userNotifications: UserNotificationCreateNestedManyWithoutUserInput
  votes: VoteCreateNestedManyWithoutUserInput
}

input UserCreateWithoutVotesInput {
  clubCoordinator: ClubCoordinatorCreateNestedManyWithoutUserInput
  clubMember: ClubMemberCreateNestedManyWithoutUserInput
  createdAt: DateTime
  deletedAt: DateTime
  email: String!
  expoToken: String
  isOnBoarded: Boolean!
  jwtToken: String
  name: String!
  picture: String
  positions: PositionCreateNestedManyWithoutUserInput
  rsvpEvent: RSVPEventCreateNestedManyWithoutUserInput
  studentRank: StudentRankCreateNestedOneWithoutUserInput
  subscription: SubscriptionCreateNestedManyWithoutUserInput
  updatedAt: DateTime
  userNotifications: UserNotificationCreateNestedManyWithoutUserInput
  userTags: UserTagCreateNestedManyWithoutUserInput
}

type UserGroupBy {
  _avg: UserAvgAggregate
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  _sum: UserSumAggregate
  createdAt: DateTime!
  deletedAt: DateTime
  email: String!
  expoToken: String
  id: Int!
  isOnBoarded: Boolean!
  jwtToken: String
  name: String!
  picture: String!
  updatedAt: DateTime!
}

type UserMaxAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  email: String
  expoToken: String
  id: Int
  isOnBoarded: Boolean
  jwtToken: String
  name: String
  picture: String
  updatedAt: DateTime
}

input UserMaxOrderByAggregateInput {
  createdAt: SortOrder
  deletedAt: SortOrder
  email: SortOrder
  expoToken: SortOrder
  id: SortOrder
  isOnBoarded: SortOrder
  jwtToken: SortOrder
  name: SortOrder
  picture: SortOrder
  updatedAt: SortOrder
}

type UserMinAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  email: String
  expoToken: String
  id: Int
  isOnBoarded: Boolean
  jwtToken: String
  name: String
  picture: String
  updatedAt: DateTime
}

input UserMinOrderByAggregateInput {
  createdAt: SortOrder
  deletedAt: SortOrder
  email: SortOrder
  expoToken: SortOrder
  id: SortOrder
  isOnBoarded: SortOrder
  jwtToken: SortOrder
  name: SortOrder
  picture: SortOrder
  updatedAt: SortOrder
}

type UserNotification {
  createdAt: DateTime!
  deletedAt: DateTime
  id: Int!
  notification: Notification!
  notificationId: Int!
  updatedAt: DateTime!
  user: User!
  userId: Int!
}

type UserNotificationAvgAggregate {
  id: Float
  notificationId: Float
  userId: Float
}

input UserNotificationAvgOrderByAggregateInput {
  id: SortOrder
  notificationId: SortOrder
  userId: SortOrder
}

type UserNotificationCountAggregate {
  _all: Int!
  createdAt: Int!
  deletedAt: Int!
  id: Int!
  notificationId: Int!
  updatedAt: Int!
  userId: Int!
}

input UserNotificationCountOrderByAggregateInput {
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  notificationId: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input UserNotificationCreateInput {
  createdAt: DateTime
  deletedAt: DateTime
  notification: NotificationCreateNestedOneWithoutUserNotificationsInput!
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutUserNotificationsInput!
}

input UserNotificationCreateManyInput {
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  notificationId: Int!
  updatedAt: DateTime
  userId: Int!
}

input UserNotificationCreateManyNotificationInput {
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  updatedAt: DateTime
  userId: Int!
}

input UserNotificationCreateManyNotificationInputEnvelope {
  data: [UserNotificationCreateManyNotificationInput!]!
  skipDuplicates: Boolean
}

input UserNotificationCreateManyUserInput {
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  notificationId: Int!
  updatedAt: DateTime
}

input UserNotificationCreateManyUserInputEnvelope {
  data: [UserNotificationCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input UserNotificationCreateNestedManyWithoutNotificationInput {
  connect: [UserNotificationWhereUniqueInput!]
  connectOrCreate: [UserNotificationCreateOrConnectWithoutNotificationInput!]
  create: [UserNotificationCreateWithoutNotificationInput!]
  createMany: UserNotificationCreateManyNotificationInputEnvelope
}

input UserNotificationCreateNestedManyWithoutUserInput {
  connect: [UserNotificationWhereUniqueInput!]
  connectOrCreate: [UserNotificationCreateOrConnectWithoutUserInput!]
  create: [UserNotificationCreateWithoutUserInput!]
  createMany: UserNotificationCreateManyUserInputEnvelope
}

input UserNotificationCreateOrConnectWithoutNotificationInput {
  create: UserNotificationCreateWithoutNotificationInput!
  where: UserNotificationWhereUniqueInput!
}

input UserNotificationCreateOrConnectWithoutUserInput {
  create: UserNotificationCreateWithoutUserInput!
  where: UserNotificationWhereUniqueInput!
}

input UserNotificationCreateWithoutNotificationInput {
  createdAt: DateTime
  deletedAt: DateTime
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutUserNotificationsInput!
}

input UserNotificationCreateWithoutUserInput {
  createdAt: DateTime
  deletedAt: DateTime
  notification: NotificationCreateNestedOneWithoutUserNotificationsInput!
  updatedAt: DateTime
}

type UserNotificationGroupBy {
  _avg: UserNotificationAvgAggregate
  _count: UserNotificationCountAggregate
  _max: UserNotificationMaxAggregate
  _min: UserNotificationMinAggregate
  _sum: UserNotificationSumAggregate
  createdAt: DateTime!
  deletedAt: DateTime
  id: Int!
  notificationId: Int!
  updatedAt: DateTime!
  userId: Int!
}

input UserNotificationListRelationFilter {
  every: UserNotificationWhereInput
  none: UserNotificationWhereInput
  some: UserNotificationWhereInput
}

type UserNotificationMaxAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  notificationId: Int
  updatedAt: DateTime
  userId: Int
}

input UserNotificationMaxOrderByAggregateInput {
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  notificationId: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

type UserNotificationMinAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  notificationId: Int
  updatedAt: DateTime
  userId: Int
}

input UserNotificationMinOrderByAggregateInput {
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  notificationId: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input UserNotificationNotificationIdUserIdCompoundUniqueInput {
  notificationId: Int!
  userId: Int!
}

input UserNotificationOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserNotificationOrderByWithAggregationInput {
  _avg: UserNotificationAvgOrderByAggregateInput
  _count: UserNotificationCountOrderByAggregateInput
  _max: UserNotificationMaxOrderByAggregateInput
  _min: UserNotificationMinOrderByAggregateInput
  _sum: UserNotificationSumOrderByAggregateInput
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  notificationId: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input UserNotificationOrderByWithRelationInput {
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  notification: NotificationOrderByWithRelationInput
  notificationId: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum UserNotificationScalarFieldEnum {
  createdAt
  deletedAt
  id
  notificationId
  updatedAt
  userId
}

input UserNotificationScalarWhereInput {
  AND: [UserNotificationScalarWhereInput!]
  NOT: [UserNotificationScalarWhereInput!]
  OR: [UserNotificationScalarWhereInput!]
  createdAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  id: IntFilter
  notificationId: IntFilter
  updatedAt: DateTimeFilter
  userId: IntFilter
}

input UserNotificationScalarWhereWithAggregatesInput {
  AND: [UserNotificationScalarWhereWithAggregatesInput!]
  NOT: [UserNotificationScalarWhereWithAggregatesInput!]
  OR: [UserNotificationScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  deletedAt: DateTimeNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  notificationId: IntWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userId: IntWithAggregatesFilter
}

type UserNotificationSumAggregate {
  id: Int
  notificationId: Int
  userId: Int
}

input UserNotificationSumOrderByAggregateInput {
  id: SortOrder
  notificationId: SortOrder
  userId: SortOrder
}

input UserNotificationUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  notification: NotificationUpdateOneRequiredWithoutUserNotificationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutUserNotificationsInput
}

input UserNotificationUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserNotificationUpdateManyWithWhereWithoutNotificationInput {
  data: UserNotificationUpdateManyMutationInput!
  where: UserNotificationScalarWhereInput!
}

input UserNotificationUpdateManyWithWhereWithoutUserInput {
  data: UserNotificationUpdateManyMutationInput!
  where: UserNotificationScalarWhereInput!
}

input UserNotificationUpdateManyWithoutNotificationInput {
  connect: [UserNotificationWhereUniqueInput!]
  connectOrCreate: [UserNotificationCreateOrConnectWithoutNotificationInput!]
  create: [UserNotificationCreateWithoutNotificationInput!]
  createMany: UserNotificationCreateManyNotificationInputEnvelope
  delete: [UserNotificationWhereUniqueInput!]
  deleteMany: [UserNotificationScalarWhereInput!]
  disconnect: [UserNotificationWhereUniqueInput!]
  set: [UserNotificationWhereUniqueInput!]
  update: [UserNotificationUpdateWithWhereUniqueWithoutNotificationInput!]
  updateMany: [UserNotificationUpdateManyWithWhereWithoutNotificationInput!]
  upsert: [UserNotificationUpsertWithWhereUniqueWithoutNotificationInput!]
}

input UserNotificationUpdateManyWithoutUserInput {
  connect: [UserNotificationWhereUniqueInput!]
  connectOrCreate: [UserNotificationCreateOrConnectWithoutUserInput!]
  create: [UserNotificationCreateWithoutUserInput!]
  createMany: UserNotificationCreateManyUserInputEnvelope
  delete: [UserNotificationWhereUniqueInput!]
  deleteMany: [UserNotificationScalarWhereInput!]
  disconnect: [UserNotificationWhereUniqueInput!]
  set: [UserNotificationWhereUniqueInput!]
  update: [UserNotificationUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [UserNotificationUpdateManyWithWhereWithoutUserInput!]
  upsert: [UserNotificationUpsertWithWhereUniqueWithoutUserInput!]
}

input UserNotificationUpdateWithWhereUniqueWithoutNotificationInput {
  data: UserNotificationUpdateWithoutNotificationInput!
  where: UserNotificationWhereUniqueInput!
}

input UserNotificationUpdateWithWhereUniqueWithoutUserInput {
  data: UserNotificationUpdateWithoutUserInput!
  where: UserNotificationWhereUniqueInput!
}

input UserNotificationUpdateWithoutNotificationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutUserNotificationsInput
}

input UserNotificationUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  notification: NotificationUpdateOneRequiredWithoutUserNotificationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserNotificationUpsertWithWhereUniqueWithoutNotificationInput {
  create: UserNotificationCreateWithoutNotificationInput!
  update: UserNotificationUpdateWithoutNotificationInput!
  where: UserNotificationWhereUniqueInput!
}

input UserNotificationUpsertWithWhereUniqueWithoutUserInput {
  create: UserNotificationCreateWithoutUserInput!
  update: UserNotificationUpdateWithoutUserInput!
  where: UserNotificationWhereUniqueInput!
}

input UserNotificationWhereInput {
  AND: [UserNotificationWhereInput!]
  NOT: [UserNotificationWhereInput!]
  OR: [UserNotificationWhereInput!]
  createdAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  id: IntFilter
  notification: NotificationRelationFilter
  notificationId: IntFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: IntFilter
}

input UserNotificationWhereUniqueInput {
  id: Int
  notificationId_userId: UserNotificationNotificationIdUserIdCompoundUniqueInput
}

input UserOrderByWithAggregationInput {
  _avg: UserAvgOrderByAggregateInput
  _count: UserCountOrderByAggregateInput
  _max: UserMaxOrderByAggregateInput
  _min: UserMinOrderByAggregateInput
  _sum: UserSumOrderByAggregateInput
  createdAt: SortOrder
  deletedAt: SortOrder
  email: SortOrder
  expoToken: SortOrder
  id: SortOrder
  isOnBoarded: SortOrder
  jwtToken: SortOrder
  name: SortOrder
  picture: SortOrder
  updatedAt: SortOrder
}

input UserOrderByWithRelationInput {
  clubCoordinator: ClubCoordinatorOrderByRelationAggregateInput
  clubMember: ClubMemberOrderByRelationAggregateInput
  createdAt: SortOrder
  deletedAt: SortOrder
  email: SortOrder
  expoToken: SortOrder
  id: SortOrder
  isOnBoarded: SortOrder
  jwtToken: SortOrder
  name: SortOrder
  picture: SortOrder
  positions: PositionOrderByRelationAggregateInput
  rsvpEvent: RSVPEventOrderByRelationAggregateInput
  studentRank: StudentRankOrderByWithRelationInput
  subscription: SubscriptionOrderByRelationAggregateInput
  updatedAt: SortOrder
  userNotifications: UserNotificationOrderByRelationAggregateInput
  userTags: UserTagOrderByRelationAggregateInput
  votes: VoteOrderByRelationAggregateInput
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  createdAt
  deletedAt
  email
  expoToken
  id
  isOnBoarded
  jwtToken
  name
  picture
  updatedAt
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput!]
  NOT: [UserScalarWhereWithAggregatesInput!]
  OR: [UserScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  deletedAt: DateTimeNullableWithAggregatesFilter
  email: StringWithAggregatesFilter
  expoToken: StringNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  isOnBoarded: BoolWithAggregatesFilter
  jwtToken: StringNullableWithAggregatesFilter
  name: StringWithAggregatesFilter
  picture: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type UserSumAggregate {
  id: Int
}

input UserSumOrderByAggregateInput {
  id: SortOrder
}

type UserTag {
  createdAt: DateTime!
  id: Int!
  tag: Tag!
  tagId: Int!
  updatedAt: DateTime!
  user: User!
  userId: Int!
}

type UserTagAvgAggregate {
  id: Float
  tagId: Float
  userId: Float
}

input UserTagAvgOrderByAggregateInput {
  id: SortOrder
  tagId: SortOrder
  userId: SortOrder
}

type UserTagCountAggregate {
  _all: Int!
  createdAt: Int!
  id: Int!
  tagId: Int!
  updatedAt: Int!
  userId: Int!
}

input UserTagCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  tagId: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input UserTagCreateInput {
  createdAt: DateTime
  tag: TagCreateNestedOneWithoutUserTagsInput!
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutUserTagsInput!
}

input UserTagCreateManyInput {
  createdAt: DateTime
  id: Int
  tagId: Int!
  updatedAt: DateTime
  userId: Int!
}

input UserTagCreateManyTagInput {
  createdAt: DateTime
  id: Int
  updatedAt: DateTime
  userId: Int!
}

input UserTagCreateManyTagInputEnvelope {
  data: [UserTagCreateManyTagInput!]!
  skipDuplicates: Boolean
}

input UserTagCreateManyUserInput {
  createdAt: DateTime
  id: Int
  tagId: Int!
  updatedAt: DateTime
}

input UserTagCreateManyUserInputEnvelope {
  data: [UserTagCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input UserTagCreateNestedManyWithoutTagInput {
  connect: [UserTagWhereUniqueInput!]
  connectOrCreate: [UserTagCreateOrConnectWithoutTagInput!]
  create: [UserTagCreateWithoutTagInput!]
  createMany: UserTagCreateManyTagInputEnvelope
}

input UserTagCreateNestedManyWithoutUserInput {
  connect: [UserTagWhereUniqueInput!]
  connectOrCreate: [UserTagCreateOrConnectWithoutUserInput!]
  create: [UserTagCreateWithoutUserInput!]
  createMany: UserTagCreateManyUserInputEnvelope
}

input UserTagCreateOrConnectWithoutTagInput {
  create: UserTagCreateWithoutTagInput!
  where: UserTagWhereUniqueInput!
}

input UserTagCreateOrConnectWithoutUserInput {
  create: UserTagCreateWithoutUserInput!
  where: UserTagWhereUniqueInput!
}

input UserTagCreateWithoutTagInput {
  createdAt: DateTime
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutUserTagsInput!
}

input UserTagCreateWithoutUserInput {
  createdAt: DateTime
  tag: TagCreateNestedOneWithoutUserTagsInput!
  updatedAt: DateTime
}

type UserTagGroupBy {
  _avg: UserTagAvgAggregate
  _count: UserTagCountAggregate
  _max: UserTagMaxAggregate
  _min: UserTagMinAggregate
  _sum: UserTagSumAggregate
  createdAt: DateTime!
  id: Int!
  tagId: Int!
  updatedAt: DateTime!
  userId: Int!
}

input UserTagListRelationFilter {
  every: UserTagWhereInput
  none: UserTagWhereInput
  some: UserTagWhereInput
}

type UserTagMaxAggregate {
  createdAt: DateTime
  id: Int
  tagId: Int
  updatedAt: DateTime
  userId: Int
}

input UserTagMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  tagId: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

type UserTagMinAggregate {
  createdAt: DateTime
  id: Int
  tagId: Int
  updatedAt: DateTime
  userId: Int
}

input UserTagMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  tagId: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input UserTagOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserTagOrderByWithAggregationInput {
  _avg: UserTagAvgOrderByAggregateInput
  _count: UserTagCountOrderByAggregateInput
  _max: UserTagMaxOrderByAggregateInput
  _min: UserTagMinOrderByAggregateInput
  _sum: UserTagSumOrderByAggregateInput
  createdAt: SortOrder
  id: SortOrder
  tagId: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input UserTagOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  tag: TagOrderByWithRelationInput
  tagId: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum UserTagScalarFieldEnum {
  createdAt
  id
  tagId
  updatedAt
  userId
}

input UserTagScalarWhereInput {
  AND: [UserTagScalarWhereInput!]
  NOT: [UserTagScalarWhereInput!]
  OR: [UserTagScalarWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  tagId: IntFilter
  updatedAt: DateTimeFilter
  userId: IntFilter
}

input UserTagScalarWhereWithAggregatesInput {
  AND: [UserTagScalarWhereWithAggregatesInput!]
  NOT: [UserTagScalarWhereWithAggregatesInput!]
  OR: [UserTagScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  id: IntWithAggregatesFilter
  tagId: IntWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userId: IntWithAggregatesFilter
}

type UserTagSumAggregate {
  id: Int
  tagId: Int
  userId: Int
}

input UserTagSumOrderByAggregateInput {
  id: SortOrder
  tagId: SortOrder
  userId: SortOrder
}

input UserTagUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  tag: TagUpdateOneRequiredWithoutUserTagsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutUserTagsInput
}

input UserTagUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserTagUpdateManyWithWhereWithoutTagInput {
  data: UserTagUpdateManyMutationInput!
  where: UserTagScalarWhereInput!
}

input UserTagUpdateManyWithWhereWithoutUserInput {
  data: UserTagUpdateManyMutationInput!
  where: UserTagScalarWhereInput!
}

input UserTagUpdateManyWithoutTagInput {
  connect: [UserTagWhereUniqueInput!]
  connectOrCreate: [UserTagCreateOrConnectWithoutTagInput!]
  create: [UserTagCreateWithoutTagInput!]
  createMany: UserTagCreateManyTagInputEnvelope
  delete: [UserTagWhereUniqueInput!]
  deleteMany: [UserTagScalarWhereInput!]
  disconnect: [UserTagWhereUniqueInput!]
  set: [UserTagWhereUniqueInput!]
  update: [UserTagUpdateWithWhereUniqueWithoutTagInput!]
  updateMany: [UserTagUpdateManyWithWhereWithoutTagInput!]
  upsert: [UserTagUpsertWithWhereUniqueWithoutTagInput!]
}

input UserTagUpdateManyWithoutUserInput {
  connect: [UserTagWhereUniqueInput!]
  connectOrCreate: [UserTagCreateOrConnectWithoutUserInput!]
  create: [UserTagCreateWithoutUserInput!]
  createMany: UserTagCreateManyUserInputEnvelope
  delete: [UserTagWhereUniqueInput!]
  deleteMany: [UserTagScalarWhereInput!]
  disconnect: [UserTagWhereUniqueInput!]
  set: [UserTagWhereUniqueInput!]
  update: [UserTagUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [UserTagUpdateManyWithWhereWithoutUserInput!]
  upsert: [UserTagUpsertWithWhereUniqueWithoutUserInput!]
}

input UserTagUpdateWithWhereUniqueWithoutTagInput {
  data: UserTagUpdateWithoutTagInput!
  where: UserTagWhereUniqueInput!
}

input UserTagUpdateWithWhereUniqueWithoutUserInput {
  data: UserTagUpdateWithoutUserInput!
  where: UserTagWhereUniqueInput!
}

input UserTagUpdateWithoutTagInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutUserTagsInput
}

input UserTagUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  tag: TagUpdateOneRequiredWithoutUserTagsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserTagUpsertWithWhereUniqueWithoutTagInput {
  create: UserTagCreateWithoutTagInput!
  update: UserTagUpdateWithoutTagInput!
  where: UserTagWhereUniqueInput!
}

input UserTagUpsertWithWhereUniqueWithoutUserInput {
  create: UserTagCreateWithoutUserInput!
  update: UserTagUpdateWithoutUserInput!
  where: UserTagWhereUniqueInput!
}

input UserTagUserIdTagIdCompoundUniqueInput {
  tagId: Int!
  userId: Int!
}

input UserTagWhereInput {
  AND: [UserTagWhereInput!]
  NOT: [UserTagWhereInput!]
  OR: [UserTagWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  tag: TagRelationFilter
  tagId: IntFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: IntFilter
}

input UserTagWhereUniqueInput {
  id: Int
  userId_tagId: UserTagUserIdTagIdCompoundUniqueInput
}

input UserUpdateInput {
  clubCoordinator: ClubCoordinatorUpdateManyWithoutUserInput
  clubMember: ClubMemberUpdateManyWithoutUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  expoToken: NullableStringFieldUpdateOperationsInput
  isOnBoarded: BoolFieldUpdateOperationsInput
  jwtToken: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  picture: StringFieldUpdateOperationsInput
  positions: PositionUpdateManyWithoutUserInput
  rsvpEvent: RSVPEventUpdateManyWithoutUserInput
  studentRank: StudentRankUpdateOneWithoutUserInput
  subscription: SubscriptionUpdateManyWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userNotifications: UserNotificationUpdateManyWithoutUserInput
  userTags: UserTagUpdateManyWithoutUserInput
  votes: VoteUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  expoToken: NullableStringFieldUpdateOperationsInput
  isOnBoarded: BoolFieldUpdateOperationsInput
  jwtToken: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  picture: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutClubCoordinatorInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutClubCoordinatorInput
  create: UserCreateWithoutClubCoordinatorInput
  update: UserUpdateWithoutClubCoordinatorInput
  upsert: UserUpsertWithoutClubCoordinatorInput
}

input UserUpdateOneRequiredWithoutClubMemberInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutClubMemberInput
  create: UserCreateWithoutClubMemberInput
  update: UserUpdateWithoutClubMemberInput
  upsert: UserUpsertWithoutClubMemberInput
}

input UserUpdateOneRequiredWithoutPositionsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPositionsInput
  create: UserCreateWithoutPositionsInput
  update: UserUpdateWithoutPositionsInput
  upsert: UserUpsertWithoutPositionsInput
}

input UserUpdateOneRequiredWithoutRsvpEventInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutRsvpEventInput
  create: UserCreateWithoutRsvpEventInput
  update: UserUpdateWithoutRsvpEventInput
  upsert: UserUpsertWithoutRsvpEventInput
}

input UserUpdateOneRequiredWithoutStudentRankInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutStudentRankInput
  create: UserCreateWithoutStudentRankInput
  update: UserUpdateWithoutStudentRankInput
  upsert: UserUpsertWithoutStudentRankInput
}

input UserUpdateOneRequiredWithoutSubscriptionInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutSubscriptionInput
  create: UserCreateWithoutSubscriptionInput
  update: UserUpdateWithoutSubscriptionInput
  upsert: UserUpsertWithoutSubscriptionInput
}

input UserUpdateOneRequiredWithoutUserNotificationsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutUserNotificationsInput
  create: UserCreateWithoutUserNotificationsInput
  update: UserUpdateWithoutUserNotificationsInput
  upsert: UserUpsertWithoutUserNotificationsInput
}

input UserUpdateOneRequiredWithoutUserTagsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutUserTagsInput
  create: UserCreateWithoutUserTagsInput
  update: UserUpdateWithoutUserTagsInput
  upsert: UserUpsertWithoutUserTagsInput
}

input UserUpdateOneRequiredWithoutVotesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutVotesInput
  create: UserCreateWithoutVotesInput
  update: UserUpdateWithoutVotesInput
  upsert: UserUpsertWithoutVotesInput
}

input UserUpdateWithoutClubCoordinatorInput {
  clubMember: ClubMemberUpdateManyWithoutUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  expoToken: NullableStringFieldUpdateOperationsInput
  isOnBoarded: BoolFieldUpdateOperationsInput
  jwtToken: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  picture: StringFieldUpdateOperationsInput
  positions: PositionUpdateManyWithoutUserInput
  rsvpEvent: RSVPEventUpdateManyWithoutUserInput
  studentRank: StudentRankUpdateOneWithoutUserInput
  subscription: SubscriptionUpdateManyWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userNotifications: UserNotificationUpdateManyWithoutUserInput
  userTags: UserTagUpdateManyWithoutUserInput
  votes: VoteUpdateManyWithoutUserInput
}

input UserUpdateWithoutClubMemberInput {
  clubCoordinator: ClubCoordinatorUpdateManyWithoutUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  expoToken: NullableStringFieldUpdateOperationsInput
  isOnBoarded: BoolFieldUpdateOperationsInput
  jwtToken: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  picture: StringFieldUpdateOperationsInput
  positions: PositionUpdateManyWithoutUserInput
  rsvpEvent: RSVPEventUpdateManyWithoutUserInput
  studentRank: StudentRankUpdateOneWithoutUserInput
  subscription: SubscriptionUpdateManyWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userNotifications: UserNotificationUpdateManyWithoutUserInput
  userTags: UserTagUpdateManyWithoutUserInput
  votes: VoteUpdateManyWithoutUserInput
}

input UserUpdateWithoutPositionsInput {
  clubCoordinator: ClubCoordinatorUpdateManyWithoutUserInput
  clubMember: ClubMemberUpdateManyWithoutUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  expoToken: NullableStringFieldUpdateOperationsInput
  isOnBoarded: BoolFieldUpdateOperationsInput
  jwtToken: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  picture: StringFieldUpdateOperationsInput
  rsvpEvent: RSVPEventUpdateManyWithoutUserInput
  studentRank: StudentRankUpdateOneWithoutUserInput
  subscription: SubscriptionUpdateManyWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userNotifications: UserNotificationUpdateManyWithoutUserInput
  userTags: UserTagUpdateManyWithoutUserInput
  votes: VoteUpdateManyWithoutUserInput
}

input UserUpdateWithoutRsvpEventInput {
  clubCoordinator: ClubCoordinatorUpdateManyWithoutUserInput
  clubMember: ClubMemberUpdateManyWithoutUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  expoToken: NullableStringFieldUpdateOperationsInput
  isOnBoarded: BoolFieldUpdateOperationsInput
  jwtToken: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  picture: StringFieldUpdateOperationsInput
  positions: PositionUpdateManyWithoutUserInput
  studentRank: StudentRankUpdateOneWithoutUserInput
  subscription: SubscriptionUpdateManyWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userNotifications: UserNotificationUpdateManyWithoutUserInput
  userTags: UserTagUpdateManyWithoutUserInput
  votes: VoteUpdateManyWithoutUserInput
}

input UserUpdateWithoutStudentRankInput {
  clubCoordinator: ClubCoordinatorUpdateManyWithoutUserInput
  clubMember: ClubMemberUpdateManyWithoutUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  expoToken: NullableStringFieldUpdateOperationsInput
  isOnBoarded: BoolFieldUpdateOperationsInput
  jwtToken: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  picture: StringFieldUpdateOperationsInput
  positions: PositionUpdateManyWithoutUserInput
  rsvpEvent: RSVPEventUpdateManyWithoutUserInput
  subscription: SubscriptionUpdateManyWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userNotifications: UserNotificationUpdateManyWithoutUserInput
  userTags: UserTagUpdateManyWithoutUserInput
  votes: VoteUpdateManyWithoutUserInput
}

input UserUpdateWithoutSubscriptionInput {
  clubCoordinator: ClubCoordinatorUpdateManyWithoutUserInput
  clubMember: ClubMemberUpdateManyWithoutUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  expoToken: NullableStringFieldUpdateOperationsInput
  isOnBoarded: BoolFieldUpdateOperationsInput
  jwtToken: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  picture: StringFieldUpdateOperationsInput
  positions: PositionUpdateManyWithoutUserInput
  rsvpEvent: RSVPEventUpdateManyWithoutUserInput
  studentRank: StudentRankUpdateOneWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userNotifications: UserNotificationUpdateManyWithoutUserInput
  userTags: UserTagUpdateManyWithoutUserInput
  votes: VoteUpdateManyWithoutUserInput
}

input UserUpdateWithoutUserNotificationsInput {
  clubCoordinator: ClubCoordinatorUpdateManyWithoutUserInput
  clubMember: ClubMemberUpdateManyWithoutUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  expoToken: NullableStringFieldUpdateOperationsInput
  isOnBoarded: BoolFieldUpdateOperationsInput
  jwtToken: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  picture: StringFieldUpdateOperationsInput
  positions: PositionUpdateManyWithoutUserInput
  rsvpEvent: RSVPEventUpdateManyWithoutUserInput
  studentRank: StudentRankUpdateOneWithoutUserInput
  subscription: SubscriptionUpdateManyWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userTags: UserTagUpdateManyWithoutUserInput
  votes: VoteUpdateManyWithoutUserInput
}

input UserUpdateWithoutUserTagsInput {
  clubCoordinator: ClubCoordinatorUpdateManyWithoutUserInput
  clubMember: ClubMemberUpdateManyWithoutUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  expoToken: NullableStringFieldUpdateOperationsInput
  isOnBoarded: BoolFieldUpdateOperationsInput
  jwtToken: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  picture: StringFieldUpdateOperationsInput
  positions: PositionUpdateManyWithoutUserInput
  rsvpEvent: RSVPEventUpdateManyWithoutUserInput
  studentRank: StudentRankUpdateOneWithoutUserInput
  subscription: SubscriptionUpdateManyWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userNotifications: UserNotificationUpdateManyWithoutUserInput
  votes: VoteUpdateManyWithoutUserInput
}

input UserUpdateWithoutVotesInput {
  clubCoordinator: ClubCoordinatorUpdateManyWithoutUserInput
  clubMember: ClubMemberUpdateManyWithoutUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  expoToken: NullableStringFieldUpdateOperationsInput
  isOnBoarded: BoolFieldUpdateOperationsInput
  jwtToken: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  picture: StringFieldUpdateOperationsInput
  positions: PositionUpdateManyWithoutUserInput
  rsvpEvent: RSVPEventUpdateManyWithoutUserInput
  studentRank: StudentRankUpdateOneWithoutUserInput
  subscription: SubscriptionUpdateManyWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userNotifications: UserNotificationUpdateManyWithoutUserInput
  userTags: UserTagUpdateManyWithoutUserInput
}

input UserUpsertWithoutClubCoordinatorInput {
  create: UserCreateWithoutClubCoordinatorInput!
  update: UserUpdateWithoutClubCoordinatorInput!
}

input UserUpsertWithoutClubMemberInput {
  create: UserCreateWithoutClubMemberInput!
  update: UserUpdateWithoutClubMemberInput!
}

input UserUpsertWithoutPositionsInput {
  create: UserCreateWithoutPositionsInput!
  update: UserUpdateWithoutPositionsInput!
}

input UserUpsertWithoutRsvpEventInput {
  create: UserCreateWithoutRsvpEventInput!
  update: UserUpdateWithoutRsvpEventInput!
}

input UserUpsertWithoutStudentRankInput {
  create: UserCreateWithoutStudentRankInput!
  update: UserUpdateWithoutStudentRankInput!
}

input UserUpsertWithoutSubscriptionInput {
  create: UserCreateWithoutSubscriptionInput!
  update: UserUpdateWithoutSubscriptionInput!
}

input UserUpsertWithoutUserNotificationsInput {
  create: UserCreateWithoutUserNotificationsInput!
  update: UserUpdateWithoutUserNotificationsInput!
}

input UserUpsertWithoutUserTagsInput {
  create: UserCreateWithoutUserTagsInput!
  update: UserUpdateWithoutUserTagsInput!
}

input UserUpsertWithoutVotesInput {
  create: UserCreateWithoutVotesInput!
  update: UserUpdateWithoutVotesInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  clubCoordinator: ClubCoordinatorListRelationFilter
  clubMember: ClubMemberListRelationFilter
  createdAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  email: StringFilter
  expoToken: StringNullableFilter
  id: IntFilter
  isOnBoarded: BoolFilter
  jwtToken: StringNullableFilter
  name: StringFilter
  picture: StringFilter
  positions: PositionListRelationFilter
  rsvpEvent: RSVPEventListRelationFilter
  studentRank: StudentRankRelationFilter
  subscription: SubscriptionListRelationFilter
  updatedAt: DateTimeFilter
  userNotifications: UserNotificationListRelationFilter
  userTags: UserTagListRelationFilter
  votes: VoteListRelationFilter
}

input UserWhereUniqueInput {
  email: String
  id: Int
}

type Vote {
  createdAt: DateTime!
  deletedAt: DateTime
  event: Event!
  eventId: Int!
  id: Int!
  updatedAt: DateTime!
  user: User!
  userId: Int!
  vote: Boolean!
}

type VoteAvgAggregate {
  eventId: Float
  id: Float
  userId: Float
}

input VoteAvgOrderByAggregateInput {
  eventId: SortOrder
  id: SortOrder
  userId: SortOrder
}

type VoteCountAggregate {
  _all: Int!
  createdAt: Int!
  deletedAt: Int!
  eventId: Int!
  id: Int!
  updatedAt: Int!
  userId: Int!
  vote: Int!
}

input VoteCountOrderByAggregateInput {
  createdAt: SortOrder
  deletedAt: SortOrder
  eventId: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
  vote: SortOrder
}

input VoteCreateInput {
  createdAt: DateTime
  deletedAt: DateTime
  event: EventCreateNestedOneWithoutVotesInput!
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutVotesInput!
  vote: Boolean!
}

input VoteCreateManyEventInput {
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  updatedAt: DateTime
  userId: Int!
  vote: Boolean!
}

input VoteCreateManyEventInputEnvelope {
  data: [VoteCreateManyEventInput!]!
  skipDuplicates: Boolean
}

input VoteCreateManyInput {
  createdAt: DateTime
  deletedAt: DateTime
  eventId: Int!
  id: Int
  updatedAt: DateTime
  userId: Int!
  vote: Boolean!
}

input VoteCreateManyUserInput {
  createdAt: DateTime
  deletedAt: DateTime
  eventId: Int!
  id: Int
  updatedAt: DateTime
  vote: Boolean!
}

input VoteCreateManyUserInputEnvelope {
  data: [VoteCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input VoteCreateNestedManyWithoutEventInput {
  connect: [VoteWhereUniqueInput!]
  connectOrCreate: [VoteCreateOrConnectWithoutEventInput!]
  create: [VoteCreateWithoutEventInput!]
  createMany: VoteCreateManyEventInputEnvelope
}

input VoteCreateNestedManyWithoutUserInput {
  connect: [VoteWhereUniqueInput!]
  connectOrCreate: [VoteCreateOrConnectWithoutUserInput!]
  create: [VoteCreateWithoutUserInput!]
  createMany: VoteCreateManyUserInputEnvelope
}

input VoteCreateOrConnectWithoutEventInput {
  create: VoteCreateWithoutEventInput!
  where: VoteWhereUniqueInput!
}

input VoteCreateOrConnectWithoutUserInput {
  create: VoteCreateWithoutUserInput!
  where: VoteWhereUniqueInput!
}

input VoteCreateWithoutEventInput {
  createdAt: DateTime
  deletedAt: DateTime
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutVotesInput!
  vote: Boolean!
}

input VoteCreateWithoutUserInput {
  createdAt: DateTime
  deletedAt: DateTime
  event: EventCreateNestedOneWithoutVotesInput!
  updatedAt: DateTime
  vote: Boolean!
}

input VoteEventIdUserIdCompoundUniqueInput {
  eventId: Int!
  userId: Int!
}

type VoteGroupBy {
  _avg: VoteAvgAggregate
  _count: VoteCountAggregate
  _max: VoteMaxAggregate
  _min: VoteMinAggregate
  _sum: VoteSumAggregate
  createdAt: DateTime!
  deletedAt: DateTime
  eventId: Int!
  id: Int!
  updatedAt: DateTime!
  userId: Int!
  vote: Boolean!
}

input VoteListRelationFilter {
  every: VoteWhereInput
  none: VoteWhereInput
  some: VoteWhereInput
}

type VoteMaxAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  eventId: Int
  id: Int
  updatedAt: DateTime
  userId: Int
  vote: Boolean
}

input VoteMaxOrderByAggregateInput {
  createdAt: SortOrder
  deletedAt: SortOrder
  eventId: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
  vote: SortOrder
}

type VoteMinAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  eventId: Int
  id: Int
  updatedAt: DateTime
  userId: Int
  vote: Boolean
}

input VoteMinOrderByAggregateInput {
  createdAt: SortOrder
  deletedAt: SortOrder
  eventId: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
  vote: SortOrder
}

input VoteOrderByRelationAggregateInput {
  _count: SortOrder
}

input VoteOrderByWithAggregationInput {
  _avg: VoteAvgOrderByAggregateInput
  _count: VoteCountOrderByAggregateInput
  _max: VoteMaxOrderByAggregateInput
  _min: VoteMinOrderByAggregateInput
  _sum: VoteSumOrderByAggregateInput
  createdAt: SortOrder
  deletedAt: SortOrder
  eventId: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
  vote: SortOrder
}

input VoteOrderByWithRelationInput {
  createdAt: SortOrder
  deletedAt: SortOrder
  event: EventOrderByWithRelationInput
  eventId: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
  vote: SortOrder
}

enum VoteScalarFieldEnum {
  createdAt
  deletedAt
  eventId
  id
  updatedAt
  userId
  vote
}

input VoteScalarWhereInput {
  AND: [VoteScalarWhereInput!]
  NOT: [VoteScalarWhereInput!]
  OR: [VoteScalarWhereInput!]
  createdAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  eventId: IntFilter
  id: IntFilter
  updatedAt: DateTimeFilter
  userId: IntFilter
  vote: BoolFilter
}

input VoteScalarWhereWithAggregatesInput {
  AND: [VoteScalarWhereWithAggregatesInput!]
  NOT: [VoteScalarWhereWithAggregatesInput!]
  OR: [VoteScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  deletedAt: DateTimeNullableWithAggregatesFilter
  eventId: IntWithAggregatesFilter
  id: IntWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userId: IntWithAggregatesFilter
  vote: BoolWithAggregatesFilter
}

type VoteSumAggregate {
  eventId: Int
  id: Int
  userId: Int
}

input VoteSumOrderByAggregateInput {
  eventId: SortOrder
  id: SortOrder
  userId: SortOrder
}

input VoteUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  event: EventUpdateOneRequiredWithoutVotesInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutVotesInput
  vote: BoolFieldUpdateOperationsInput
}

input VoteUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  vote: BoolFieldUpdateOperationsInput
}

input VoteUpdateManyWithWhereWithoutEventInput {
  data: VoteUpdateManyMutationInput!
  where: VoteScalarWhereInput!
}

input VoteUpdateManyWithWhereWithoutUserInput {
  data: VoteUpdateManyMutationInput!
  where: VoteScalarWhereInput!
}

input VoteUpdateManyWithoutEventInput {
  connect: [VoteWhereUniqueInput!]
  connectOrCreate: [VoteCreateOrConnectWithoutEventInput!]
  create: [VoteCreateWithoutEventInput!]
  createMany: VoteCreateManyEventInputEnvelope
  delete: [VoteWhereUniqueInput!]
  deleteMany: [VoteScalarWhereInput!]
  disconnect: [VoteWhereUniqueInput!]
  set: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithWhereUniqueWithoutEventInput!]
  updateMany: [VoteUpdateManyWithWhereWithoutEventInput!]
  upsert: [VoteUpsertWithWhereUniqueWithoutEventInput!]
}

input VoteUpdateManyWithoutUserInput {
  connect: [VoteWhereUniqueInput!]
  connectOrCreate: [VoteCreateOrConnectWithoutUserInput!]
  create: [VoteCreateWithoutUserInput!]
  createMany: VoteCreateManyUserInputEnvelope
  delete: [VoteWhereUniqueInput!]
  deleteMany: [VoteScalarWhereInput!]
  disconnect: [VoteWhereUniqueInput!]
  set: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [VoteUpdateManyWithWhereWithoutUserInput!]
  upsert: [VoteUpsertWithWhereUniqueWithoutUserInput!]
}

input VoteUpdateWithWhereUniqueWithoutEventInput {
  data: VoteUpdateWithoutEventInput!
  where: VoteWhereUniqueInput!
}

input VoteUpdateWithWhereUniqueWithoutUserInput {
  data: VoteUpdateWithoutUserInput!
  where: VoteWhereUniqueInput!
}

input VoteUpdateWithoutEventInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutVotesInput
  vote: BoolFieldUpdateOperationsInput
}

input VoteUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  event: EventUpdateOneRequiredWithoutVotesInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  vote: BoolFieldUpdateOperationsInput
}

input VoteUpsertWithWhereUniqueWithoutEventInput {
  create: VoteCreateWithoutEventInput!
  update: VoteUpdateWithoutEventInput!
  where: VoteWhereUniqueInput!
}

input VoteUpsertWithWhereUniqueWithoutUserInput {
  create: VoteCreateWithoutUserInput!
  update: VoteUpdateWithoutUserInput!
  where: VoteWhereUniqueInput!
}

input VoteWhereInput {
  AND: [VoteWhereInput!]
  NOT: [VoteWhereInput!]
  OR: [VoteWhereInput!]
  createdAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  event: EventRelationFilter
  eventId: IntFilter
  id: IntFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: IntFilter
  vote: BoolFilter
}

input VoteWhereUniqueInput {
  eventId_userId: VoteEventIdUserIdCompoundUniqueInput
  id: Int
}
